"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@taquito";
exports.ids = ["vendor-chunks/@taquito"];
exports.modules = {

/***/ "(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js":
/*!*************************************************************!*\
  !*** ./node_modules/@taquito/core/dist/taquito-core.es6.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeprecationError: () => (/* binding */ DeprecationError),\n/* harmony export */   InvalidAddressError: () => (/* binding */ InvalidAddressError),\n/* harmony export */   InvalidAmountError: () => (/* binding */ InvalidAmountError),\n/* harmony export */   InvalidBlockHashError: () => (/* binding */ InvalidBlockHashError),\n/* harmony export */   InvalidChainIdError: () => (/* binding */ InvalidChainIdError),\n/* harmony export */   InvalidContractAddressError: () => (/* binding */ InvalidContractAddressError),\n/* harmony export */   InvalidDerivationPathError: () => (/* binding */ InvalidDerivationPathError),\n/* harmony export */   InvalidHexStringError: () => (/* binding */ InvalidHexStringError),\n/* harmony export */   InvalidKeyError: () => (/* binding */ InvalidKeyError),\n/* harmony export */   InvalidKeyHashError: () => (/* binding */ InvalidKeyHashError),\n/* harmony export */   InvalidMessageError: () => (/* binding */ InvalidMessageError),\n/* harmony export */   InvalidOperationHashError: () => (/* binding */ InvalidOperationHashError),\n/* harmony export */   InvalidOperationKindError: () => (/* binding */ InvalidOperationKindError),\n/* harmony export */   InvalidPublicKeyError: () => (/* binding */ InvalidPublicKeyError),\n/* harmony export */   InvalidSignatureError: () => (/* binding */ InvalidSignatureError),\n/* harmony export */   InvalidViewParameterError: () => (/* binding */ InvalidViewParameterError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   ParameterValidationError: () => (/* binding */ ParameterValidationError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   ProhibitedActionError: () => (/* binding */ ProhibitedActionError),\n/* harmony export */   PublicKeyNotFoundError: () => (/* binding */ PublicKeyNotFoundError),\n/* harmony export */   RpcError: () => (/* binding */ RpcError),\n/* harmony export */   TaquitoError: () => (/* binding */ TaquitoError),\n/* harmony export */   TezosToolkitConfigError: () => (/* binding */ TezosToolkitConfigError),\n/* harmony export */   UnsupportedActionError: () => (/* binding */ UnsupportedActionError)\n/* harmony export */ });\n// ==========================================================================================\n// parent error classes for Taquito\n// ==========================================================================================\n/**\n *  @category Error\n *  @description Parent error class all taquito errors to extend from\n */\nclass TaquitoError extends Error {\n}\n/**\n *  @category Error\n *  @description Error that indicates invalid user inputs\n */\nclass ParameterValidationError extends TaquitoError {\n}\n/**\n *  @category Error\n *  @description Error returned by RPC node\n */\nclass RpcError extends TaquitoError {\n}\n/**\n *  @category Error\n *  @description Error that indicates TezosToolKit has not been configured appropriately\n */\nclass TezosToolkitConfigError extends TaquitoError {\n}\n/**\n *  @category Error\n *  @description Error that indicates a requested action is not supported by Taquito\n */\nclass UnsupportedActionError extends TaquitoError {\n}\n/**\n *  @category Error\n *  @description Error during a network operation\n */\nclass NetworkError extends TaquitoError {\n}\n/**\n *  @category Error\n *  @description Error that indicates user attempts an action without necessary permissions\n */\nclass PermissionDeniedError extends TaquitoError {\n}\n// ==========================================================================================\n// common error classes for Taquito\n// ==========================================================================================\n/**\n *  @category Error\n *  @description Error that indicates an invalid originated or implicit address being passed or used\n */\nclass InvalidAddressError extends ParameterValidationError {\n    constructor(address, errorDetail) {\n        super();\n        this.address = address;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidAddressError';\n        this.message = `Invalid address \"${address}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid block hash being passed or used\n */\nclass InvalidBlockHashError extends ParameterValidationError {\n    constructor(blockHash, errorDetail) {\n        super();\n        this.blockHash = blockHash;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidBlockHashError';\n        this.message = `Invalid block hash \"${blockHash}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n * @category Error\n * @description Error that indicates an invalid amount of tez being passed as a parameter\n */\nclass InvalidAmountError extends ParameterValidationError {\n    constructor(amount) {\n        super();\n        this.amount = amount;\n        this.name = 'InvalidAmountError';\n        this.message = `Invalid amount \"${amount}\"`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid derivation path being passed or used\n */\nclass InvalidDerivationPathError extends ParameterValidationError {\n    constructor(derivationPath, errorDetail) {\n        super();\n        this.derivationPath = derivationPath;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidDerivationPathError';\n        this.message = `Invalid derivation path \"${derivationPath}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid hex string have been passed or used\n */\nclass InvalidHexStringError extends ParameterValidationError {\n    constructor(hexString, errorDetail) {\n        super();\n        this.hexString = hexString;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidHexStringError';\n        this.message = `Invalid hex string \"${hexString}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid message being passed or used\n */\nclass InvalidMessageError extends ParameterValidationError {\n    constructor(msg, errorDetail) {\n        super();\n        this.msg = msg;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidMessageError';\n        this.message = `Invalid message \"${msg}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates invalid view parameter of a smart contract\n */\nclass InvalidViewParameterError extends ParameterValidationError {\n    constructor(viewName, sigs, args, cause) {\n        super();\n        this.viewName = viewName;\n        this.sigs = sigs;\n        this.args = args;\n        this.cause = cause;\n        this.name = 'InvalidViewParameterError';\n        this.message = `Invalid view arguments ${JSON.stringify(args)} received for name \"${viewName}\" expecting one of the following signatures ${JSON.stringify(sigs)}.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid private key being passed or used\n */\nclass InvalidKeyError extends ParameterValidationError {\n    constructor(errorDetail) {\n        super();\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidKeyError';\n        this.message = `Invalid private key`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an Invalid Public Key being passed or used\n */\nclass InvalidPublicKeyError extends ParameterValidationError {\n    constructor(publicKey, errorDetail) {\n        super();\n        this.publicKey = publicKey;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidPublicKeyError';\n        this.message = `Invalid public key \"${publicKey}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid signature being passed or used\n */\nclass InvalidSignatureError extends ParameterValidationError {\n    constructor(signature, errorDetail) {\n        super();\n        this.signature = signature;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidSignatureError';\n        this.message = `Invalid signature \"${signature}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract address being passed or used\n */\nclass InvalidContractAddressError extends ParameterValidationError {\n    constructor(contractAddress, errorDetail) {\n        super();\n        this.contractAddress = contractAddress;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidContractAddressError';\n        this.message = `Invalid contract address \"${contractAddress}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid chain id being passed or used\n */\nclass InvalidChainIdError extends ParameterValidationError {\n    constructor(chainId, errorDetail) {\n        super();\n        this.chainId = chainId;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidChainIdError';\n        this.message = `Invalid chain id \"${chainId}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid public key hash being passed or used\n */\nclass InvalidKeyHashError extends ParameterValidationError {\n    constructor(keyHash, errorDetail) {\n        super();\n        this.keyHash = keyHash;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidKeyHashError';\n        this.message = `Invalid public key hash \"${keyHash}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation hash being passed or used\n */\nclass InvalidOperationHashError extends ParameterValidationError {\n    constructor(operationHash, errorDetail) {\n        super();\n        this.operationHash = operationHash;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidOperationHashError';\n        this.message = `Invalid operation hash \"${operationHash}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation kind being passed or used\n */\nclass InvalidOperationKindError extends ParameterValidationError {\n    constructor(operationKind, errorDetail) {\n        super();\n        this.operationKind = operationKind;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidOperationKindError';\n        this.message = `Invalid operation kind \"${operationKind}\"`;\n        this.message += errorDetail ? ` ${errorDetail}.` : '.';\n    }\n}\n/**\n *  @category Error\n *  @description General error that indicates something is no longer supported and/or deprecated\n */\nclass DeprecationError extends UnsupportedActionError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'DeprecationError';\n    }\n}\n/**\n *  @category Error\n *  @description General error that indicates an action is prohibited or not allowed\n */\nclass ProhibitedActionError extends UnsupportedActionError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'ProhibitedActionError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure in grabbing the public key\n */\nclass PublicKeyNotFoundError extends TaquitoError {\n    constructor(pkh, cause) {\n        super();\n        this.pkh = pkh;\n        this.cause = cause;\n        this.name = 'PublicKeyNotFoundError';\n        this.message = `Public key not found of this address \"${pkh}\" in either wallet or contract API.`;\n    }\n}\n\n\n//# sourceMappingURL=taquito-core.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpBackend: () => (/* binding */ HttpBackend),\n/* harmony export */   HttpRequestFailed: () => (/* binding */ HttpRequestFailed),\n/* harmony export */   HttpResponseError: () => (/* binding */ HttpResponseError),\n/* harmony export */   HttpTimeoutError: () => (/* binding */ HttpTimeoutError),\n/* harmony export */   STATUS_CODE: () => (/* binding */ STATUS_CODE),\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n *  @category Error\n *  @description Error that indicates a general failure in making the HTTP request\n */\nclass HttpRequestFailed extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.NetworkError {\n    constructor(method, url, cause) {\n        super();\n        this.method = method;\n        this.url = url;\n        this.cause = cause;\n        this.name = 'HttpRequestFailed';\n        this.message = `${method} ${url} ${String(cause)}`;\n    }\n}\n/**\n *  @category Error\n *  @description Error thrown when the endpoint returns an HTTP error to the client\n */\nclass HttpResponseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.NetworkError {\n    constructor(message, status, statusText, body, url) {\n        super();\n        this.message = message;\n        this.status = status;\n        this.statusText = statusText;\n        this.body = body;\n        this.url = url;\n        this.name = 'HttpResponseError';\n    }\n}\n/**\n *  @category Error\n *  @description Error\n */\nclass HttpTimeoutError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.NetworkError {\n    constructor(timeout, url) {\n        super();\n        this.timeout = timeout;\n        this.url = url;\n        this.name = 'HttpTimeoutError';\n        this.message = `HTTP request timeout of ${timeout}ms exceeded`;\n    }\n}\n\n/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n */\nvar STATUS_CODE;\n(function (STATUS_CODE) {\n    /**\n     * The server has received the request headers and the client should proceed to send the request body\n     * (in the case of a request for which a body needs to be sent; for example, a POST request).\n     * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n     * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n     * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n     */\n    STATUS_CODE[STATUS_CODE[\"CONTINUE\"] = 100] = \"CONTINUE\";\n    /**\n     * The requester has asked the server to switch protocols and the server has agreed to do so.\n     */\n    STATUS_CODE[STATUS_CODE[\"SWITCHING_PROTOCOLS\"] = 101] = \"SWITCHING_PROTOCOLS\";\n    /**\n     * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n     * This code indicates that the server has received and is processing the request, but no response is available yet.\n     * This prevents the client from timing out and assuming the request was lost.\n     */\n    STATUS_CODE[STATUS_CODE[\"PROCESSING\"] = 102] = \"PROCESSING\";\n    /**\n     * Standard response for successful HTTP requests.\n     * The actual response will depend on the request method used.\n     * In a GET request, the response will contain an entity corresponding to the requested resource.\n     * In a POST request, the response will contain an entity describing or containing the result of the action.\n     */\n    STATUS_CODE[STATUS_CODE[\"OK\"] = 200] = \"OK\";\n    /**\n     * The request has been fulfilled, resulting in the creation of a new resource.\n     */\n    STATUS_CODE[STATUS_CODE[\"CREATED\"] = 201] = \"CREATED\";\n    /**\n     * The request has been accepted for processing, but the processing has not been completed.\n     * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n     */\n    STATUS_CODE[STATUS_CODE[\"ACCEPTED\"] = 202] = \"ACCEPTED\";\n    /**\n     * SINCE HTTP/1.1\n     * The server is a transforming proxy that received a 200 OK from its origin,\n     * but is returning a modified version of the origin's response.\n     */\n    STATUS_CODE[STATUS_CODE[\"NON_AUTHORITATIVE_INFORMATION\"] = 203] = \"NON_AUTHORITATIVE_INFORMATION\";\n    /**\n     * The server successfully processed the request and is not returning any content.\n     */\n    STATUS_CODE[STATUS_CODE[\"NO_CONTENT\"] = 204] = \"NO_CONTENT\";\n    /**\n     * The server successfully processed the request, but is not returning any content.\n     * Unlike a 204 response, this response requires that the requester reset the document view.\n     */\n    STATUS_CODE[STATUS_CODE[\"RESET_CONTENT\"] = 205] = \"RESET_CONTENT\";\n    /**\n     * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n     * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n     * or split a download into multiple simultaneous streams.\n     */\n    STATUS_CODE[STATUS_CODE[\"PARTIAL_CONTENT\"] = 206] = \"PARTIAL_CONTENT\";\n    /**\n     * The message body that follows is an XML message and can contain a number of separate response codes,\n     * depending on how many sub-requests were made.\n     */\n    STATUS_CODE[STATUS_CODE[\"MULTI_STATUS\"] = 207] = \"MULTI_STATUS\";\n    /**\n     * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n     * and are not being included again.\n     */\n    STATUS_CODE[STATUS_CODE[\"ALREADY_REPORTED\"] = 208] = \"ALREADY_REPORTED\";\n    /**\n     * The server has fulfilled a request for the resource,\n     * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n     */\n    STATUS_CODE[STATUS_CODE[\"IM_USED\"] = 226] = \"IM_USED\";\n    /**\n     * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n     * For example, this code could be used to present multiple video format options,\n     * to list files with different filename extensions, or to suggest word-sense disambiguation.\n     */\n    STATUS_CODE[STATUS_CODE[\"MULTIPLE_CHOICES\"] = 300] = \"MULTIPLE_CHOICES\";\n    /**\n     * This and all future requests should be directed to the given URI.\n     */\n    STATUS_CODE[STATUS_CODE[\"MOVED_PERMANENTLY\"] = 301] = \"MOVED_PERMANENTLY\";\n    /**\n     * This is an example of industry practice contradicting the standard.\n     * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n     * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n     * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n     * to distinguish between the two behaviours. However, some Web applications and frameworks\n     * use the 302 status code as if it were the 303.\n     */\n    STATUS_CODE[STATUS_CODE[\"FOUND\"] = 302] = \"FOUND\";\n    /**\n     * SINCE HTTP/1.1\n     * The response to the request can be found under another URI using a GET method.\n     * When received in response to a POST (or PUT/DELETE), the client should presume that\n     * the server has received the data and should issue a redirect with a separate GET message.\n     */\n    STATUS_CODE[STATUS_CODE[\"SEE_OTHER\"] = 303] = \"SEE_OTHER\";\n    /**\n     * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n     * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n     */\n    STATUS_CODE[STATUS_CODE[\"NOT_MODIFIED\"] = 304] = \"NOT_MODIFIED\";\n    /**\n     * SINCE HTTP/1.1\n     * The requested resource is available only through a proxy, the address for which is provided in the response.\n     * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n     */\n    STATUS_CODE[STATUS_CODE[\"USE_PROXY\"] = 305] = \"USE_PROXY\";\n    /**\n     * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n     */\n    STATUS_CODE[STATUS_CODE[\"SWITCH_PROXY\"] = 306] = \"SWITCH_PROXY\";\n    /**\n     * SINCE HTTP/1.1\n     * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n     * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n     * For example, a POST request should be repeated using another POST request.\n     */\n    STATUS_CODE[STATUS_CODE[\"TEMPORARY_REDIRECT\"] = 307] = \"TEMPORARY_REDIRECT\";\n    /**\n     * The request and all future requests should be repeated using another URI.\n     * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n     * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n     */\n    STATUS_CODE[STATUS_CODE[\"PERMANENT_REDIRECT\"] = 308] = \"PERMANENT_REDIRECT\";\n    /**\n     * The server cannot or will not process the request due to an apparent client error\n     * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n     */\n    STATUS_CODE[STATUS_CODE[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n    /**\n     * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n     * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n     * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n     * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n     */\n    STATUS_CODE[STATUS_CODE[\"UNAUTHORIZED\"] = 401] = \"UNAUTHORIZED\";\n    /**\n     * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n     * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n     * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n     */\n    STATUS_CODE[STATUS_CODE[\"PAYMENT_REQUIRED\"] = 402] = \"PAYMENT_REQUIRED\";\n    /**\n     * The request was valid, but the server is refusing action.\n     * The user might not have the necessary permissions for a resource.\n     */\n    STATUS_CODE[STATUS_CODE[\"FORBIDDEN\"] = 403] = \"FORBIDDEN\";\n    /**\n     * The requested resource could not be found but may be available in the future.\n     * Subsequent requests by the client are permissible.\n     */\n    STATUS_CODE[STATUS_CODE[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n    /**\n     * A request method is not supported for the requested resource;\n     * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n     */\n    STATUS_CODE[STATUS_CODE[\"METHOD_NOT_ALLOWED\"] = 405] = \"METHOD_NOT_ALLOWED\";\n    /**\n     * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n     */\n    STATUS_CODE[STATUS_CODE[\"NOT_ACCEPTABLE\"] = 406] = \"NOT_ACCEPTABLE\";\n    /**\n     * The client must first authenticate itself with the proxy.\n     */\n    STATUS_CODE[STATUS_CODE[\"PROXY_AUTHENTICATION_REQUIRED\"] = 407] = \"PROXY_AUTHENTICATION_REQUIRED\";\n    /**\n     * The server timed out waiting for the request.\n     * According to HTTP specifications:\n     * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n     */\n    STATUS_CODE[STATUS_CODE[\"REQUEST_TIMEOUT\"] = 408] = \"REQUEST_TIMEOUT\";\n    /**\n     * Indicates that the request could not be processed because of conflict in the request,\n     * such as an edit conflict between multiple simultaneous updates.\n     */\n    STATUS_CODE[STATUS_CODE[\"CONFLICT\"] = 409] = \"CONFLICT\";\n    /**\n     * Indicates that the resource requested is no longer available and will not be available again.\n     * This should be used when a resource has been intentionally removed and the resource should be purged.\n     * Upon receiving a 410 status code, the client should not request the resource in the future.\n     * Clients such as search engines should remove the resource from their indices.\n     * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n     */\n    STATUS_CODE[STATUS_CODE[\"GONE\"] = 410] = \"GONE\";\n    /**\n     * The request did not specify the length of its content, which is required by the requested resource.\n     */\n    STATUS_CODE[STATUS_CODE[\"LENGTH_REQUIRED\"] = 411] = \"LENGTH_REQUIRED\";\n    /**\n     * The server does not meet one of the preconditions that the requester put on the request.\n     */\n    STATUS_CODE[STATUS_CODE[\"PRECONDITION_FAILED\"] = 412] = \"PRECONDITION_FAILED\";\n    /**\n     * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n     */\n    STATUS_CODE[STATUS_CODE[\"PAYLOAD_TOO_LARGE\"] = 413] = \"PAYLOAD_TOO_LARGE\";\n    /**\n     * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n     * in which case it should be converted to a POST request.\n     * Called \"Request-URI Too Long\" previously.\n     */\n    STATUS_CODE[STATUS_CODE[\"URI_TOO_LONG\"] = 414] = \"URI_TOO_LONG\";\n    /**\n     * The request entity has a media type which the server or resource does not support.\n     * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n     */\n    STATUS_CODE[STATUS_CODE[\"UNSUPPORTED_MEDIA_TYPE\"] = 415] = \"UNSUPPORTED_MEDIA_TYPE\";\n    /**\n     * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n     * For example, if the client asked for a part of the file that lies beyond the end of the file.\n     * Called \"Requested Range Not Satisfiable\" previously.\n     */\n    STATUS_CODE[STATUS_CODE[\"RANGE_NOT_SATISFIABLE\"] = 416] = \"RANGE_NOT_SATISFIABLE\";\n    /**\n     * The server cannot meet the requirements of the Expect request-header field.\n     */\n    STATUS_CODE[STATUS_CODE[\"EXPECTATION_FAILED\"] = 417] = \"EXPECTATION_FAILED\";\n    /**\n     * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n     * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n     * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n     */\n    STATUS_CODE[STATUS_CODE[\"I_AM_A_TEAPOT\"] = 418] = \"I_AM_A_TEAPOT\";\n    /**\n     * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n     */\n    STATUS_CODE[STATUS_CODE[\"MISDIRECTED_REQUEST\"] = 421] = \"MISDIRECTED_REQUEST\";\n    /**\n     * The request was well-formed but was unable to be followed due to semantic errors.\n     */\n    STATUS_CODE[STATUS_CODE[\"UNPROCESSABLE_ENTITY\"] = 422] = \"UNPROCESSABLE_ENTITY\";\n    /**\n     * The resource that is being accessed is locked.\n     */\n    STATUS_CODE[STATUS_CODE[\"LOCKED\"] = 423] = \"LOCKED\";\n    /**\n     * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n     */\n    STATUS_CODE[STATUS_CODE[\"FAILED_DEPENDENCY\"] = 424] = \"FAILED_DEPENDENCY\";\n    /**\n     * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n     */\n    STATUS_CODE[STATUS_CODE[\"UPGRADE_REQUIRED\"] = 426] = \"UPGRADE_REQUIRED\";\n    /**\n     * The origin server requires the request to be conditional.\n     * Intended to prevent \"the 'lost update' problem, where a client\n     * GETs a resource's state, modifies it, and PUTs it back to the server,\n     * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n     */\n    STATUS_CODE[STATUS_CODE[\"PRECONDITION_REQUIRED\"] = 428] = \"PRECONDITION_REQUIRED\";\n    /**\n     * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n     */\n    STATUS_CODE[STATUS_CODE[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * The server is unwilling to process the request because either an individual header field,\n     * or all the header fields collectively, are too large.\n     */\n    STATUS_CODE[STATUS_CODE[\"REQUEST_HEADER_FIELDS_TOO_LARGE\"] = 431] = \"REQUEST_HEADER_FIELDS_TOO_LARGE\";\n    /**\n     * A server operator has received a legal demand to deny access to a resource or to a set of resources\n     * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n     */\n    STATUS_CODE[STATUS_CODE[\"UNAVAILABLE_FOR_LEGAL_REASONS\"] = 451] = \"UNAVAILABLE_FOR_LEGAL_REASONS\";\n    /**\n     * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n     */\n    STATUS_CODE[STATUS_CODE[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n     * Usually this implies future availability (e.g., a new feature of a web-service API).\n     */\n    STATUS_CODE[STATUS_CODE[\"NOT_IMPLEMENTED\"] = 501] = \"NOT_IMPLEMENTED\";\n    /**\n     * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n     */\n    STATUS_CODE[STATUS_CODE[\"BAD_GATEWAY\"] = 502] = \"BAD_GATEWAY\";\n    /**\n     * The server is currently unavailable (because it is overloaded or down for maintenance).\n     * Generally, this is a temporary state.\n     */\n    STATUS_CODE[STATUS_CODE[\"SERVICE_UNAVAILABLE\"] = 503] = \"SERVICE_UNAVAILABLE\";\n    /**\n     * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n     */\n    STATUS_CODE[STATUS_CODE[\"GATEWAY_TIMEOUT\"] = 504] = \"GATEWAY_TIMEOUT\";\n    /**\n     * The server does not support the HTTP protocol version used in the request\n     */\n    STATUS_CODE[STATUS_CODE[\"HTTP_VERSION_NOT_SUPPORTED\"] = 505] = \"HTTP_VERSION_NOT_SUPPORTED\";\n    /**\n     * Transparent content negotiation for the request results in a circular reference.\n     */\n    STATUS_CODE[STATUS_CODE[\"VARIANT_ALSO_NEGOTIATES\"] = 506] = \"VARIANT_ALSO_NEGOTIATES\";\n    /**\n     * The server is unable to store the representation needed to complete the request.\n     */\n    STATUS_CODE[STATUS_CODE[\"INSUFFICIENT_STORAGE\"] = 507] = \"INSUFFICIENT_STORAGE\";\n    /**\n     * The server detected an infinite loop while processing the request.\n     */\n    STATUS_CODE[STATUS_CODE[\"LOOP_DETECTED\"] = 508] = \"LOOP_DETECTED\";\n    /**\n     * Further extensions to the request are required for the server to fulfill it.\n     */\n    STATUS_CODE[STATUS_CODE[\"NOT_EXTENDED\"] = 510] = \"NOT_EXTENDED\";\n    /**\n     * The client needs to authenticate to gain network access.\n     * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n     * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n     */\n    STATUS_CODE[STATUS_CODE[\"NETWORK_AUTHENTICATION_REQUIRED\"] = 511] = \"NETWORK_AUTHENTICATION_REQUIRED\";\n})(STATUS_CODE || (STATUS_CODE = {}));\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n/**\n * @packageDocumentation\n * @module @taquito/http-utils\n */\nvar _a;\nlet fetch = globalThis === null || globalThis === void 0 ? void 0 : globalThis.fetch;\n// Will only use browser fetch if we are in a browser environment,\n// default to the more stable node-fetch otherwise\nconst isNode = typeof process !== 'undefined' && !!((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node);\nif (isNode) {\n    fetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\n}\nclass HttpBackend {\n    constructor(timeout = 30000) {\n        this.timeout = timeout;\n    }\n    serialize(obj) {\n        if (!obj) {\n            return '';\n        }\n        const str = [];\n        for (const p in obj) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {\n                const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\n                // query arguments can have no value so we need some way of handling that\n                // example https://domain.com/query?all\n                if (prop === null) {\n                    str.push(encodeURIComponent(p));\n                    continue;\n                }\n                // another use case is multiple arguments with the same name\n                // they are passed as array\n                if (Array.isArray(prop)) {\n                    prop.forEach((item) => {\n                        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n                    });\n                    continue;\n                }\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n            }\n        }\n        const serialized = str.join('&');\n        if (serialized) {\n            return `?${serialized}`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @param options contains options to be passed for the HTTP request (url, method and timeout)\n     * @throws {@link HttpRequestFailed} | {@link HttpResponseError} | {@link HttpTimeoutError}\n     */\n    createRequest({ url, method, timeout = this.timeout, query, headers = {}, json = true }, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Serializes query params\n            const urlWithQuery = url + this.serialize(query);\n            // Adds default header entry if there aren't any Content-Type header\n            if (!headers['Content-Type']) {\n                headers['Content-Type'] = 'application/json';\n            }\n            // Creates a new AbortController instance to handle timeouts\n            const controller = new AbortController();\n            const t = setTimeout(() => controller.abort(), timeout);\n            try {\n                const response = yield fetch(urlWithQuery, {\n                    method,\n                    headers,\n                    body: JSON.stringify(data),\n                    signal: controller.signal,\n                });\n                if (typeof response === 'undefined') {\n                    throw new Error('Response is undefined');\n                }\n                // Handle responses with status code >= 400\n                if (response.status >= 400) {\n                    const errorData = yield response.text();\n                    throw new HttpResponseError(`Http error response: (${response.status}) ${errorData}`, response.status, response.statusText, errorData, urlWithQuery);\n                }\n                if (json) {\n                    return response.json();\n                }\n                else {\n                    return response.text();\n                }\n            }\n            catch (e) {\n                if (e instanceof Error && e.name === 'AbortError') {\n                    throw new HttpTimeoutError(timeout, urlWithQuery);\n                }\n                else if (e instanceof HttpResponseError) {\n                    throw e;\n                }\n                else {\n                    throw new HttpRequestFailed(String(method), urlWithQuery, e);\n                }\n            }\n            finally {\n                clearTimeout(t);\n            }\n        });\n    }\n}\n\n\n//# sourceMappingURL=taquito-http-utils.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/local-forging/dist/taquito-local-forging.es6.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@taquito/local-forging/dist/taquito-local-forging.es6.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CODEC: () => (/* binding */ CODEC),\n/* harmony export */   LocalForger: () => (/* binding */ LocalForger),\n/* harmony export */   ProtocolsHash: () => (/* binding */ ProtocolsHash),\n/* harmony export */   Uint8ArrayConsumer: () => (/* binding */ Uint8ArrayConsumer),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   decoders: () => (/* binding */ decoders),\n/* harmony export */   encoders: () => (/* binding */ encoders),\n/* harmony export */   getCodec: () => (/* binding */ getCodec),\n/* harmony export */   localForger: () => (/* binding */ localForger),\n/* harmony export */   opMapping: () => (/* binding */ opMapping),\n/* harmony export */   opMappingReverse: () => (/* binding */ opMappingReverse)\n/* harmony export */ });\n/* harmony import */ var _taquito_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @taquito/utils */ \"(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js\");\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n\n\n\n\nconst toHexString = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nconst pad = (num, paddingLen = 8) => {\n    return num.toString(16).padStart(paddingLen, '0');\n};\n\n/*\n * Some code in this file is originally from sotez\n * Copyright (c) 2018 Andrew Kishino\n */\n// See: https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nconst ENTRYPOINT_MAX_LENGTH = 31;\nvar CODEC;\n(function (CODEC) {\n    CODEC[\"SECRET\"] = \"secret\";\n    CODEC[\"RAW\"] = \"raw\";\n    CODEC[\"TZ1\"] = \"tz1\";\n    CODEC[\"BRANCH\"] = \"branch\";\n    CODEC[\"ZARITH\"] = \"zarith\";\n    CODEC[\"PUBLIC_KEY\"] = \"public_key\";\n    CODEC[\"PKH\"] = \"pkh\";\n    CODEC[\"DELEGATE\"] = \"delegate\";\n    CODEC[\"SCRIPT\"] = \"script\";\n    CODEC[\"BALLOT_STATEMENT\"] = \"ballotStmt\";\n    CODEC[\"PROPOSAL\"] = \"proposal\";\n    CODEC[\"PROPOSAL_ARR\"] = \"proposalArr\";\n    CODEC[\"INT32\"] = \"int32\";\n    CODEC[\"INT16\"] = \"int16\";\n    CODEC[\"PARAMETERS\"] = \"parameters\";\n    CODEC[\"ADDRESS\"] = \"address\";\n    CODEC[\"SMART_CONTRACT_ADDRESS\"] = \"smart_contract_address\";\n    CODEC[\"SMART_ROLLUP_ADDRESS\"] = \"smart_rollup_address\";\n    CODEC[\"SMART_ROLLUP_COMMITMENT_HASH\"] = \"smart_rollup_commitment_hash\";\n    CODEC[\"VALUE\"] = \"value\";\n    CODEC[\"PADDED_BYTES\"] = \"padded_bytes\";\n    CODEC[\"SMART_ROLLUP_MESSAGE\"] = \"smart_rollup_message\";\n    CODEC[\"MANAGER\"] = \"manager\";\n    CODEC[\"BLOCK_PAYLOAD_HASH\"] = \"blockPayloadHash\";\n    CODEC[\"ENTRYPOINT\"] = \"entrypoint\";\n    CODEC[\"OPERATION\"] = \"operation\";\n    CODEC[\"OP_ACTIVATE_ACCOUNT\"] = \"activate_account\";\n    CODEC[\"OP_DELEGATION\"] = \"delegation\";\n    CODEC[\"OP_TRANSACTION\"] = \"transaction\";\n    CODEC[\"OP_ORIGINATION\"] = \"origination\";\n    CODEC[\"OP_BALLOT\"] = \"ballot\";\n    CODEC[\"OP_FAILING_NOOP\"] = \"failing_noop\";\n    CODEC[\"OP_ENDORSEMENT\"] = \"endorsement\";\n    CODEC[\"OP_SEED_NONCE_REVELATION\"] = \"seed_nonce_revelation\";\n    CODEC[\"OP_REVEAL\"] = \"reveal\";\n    CODEC[\"OP_PROPOSALS\"] = \"proposals\";\n    CODEC[\"OP_REGISTER_GLOBAL_CONSTANT\"] = \"register_global_constant\";\n    CODEC[\"OP_TRANSFER_TICKET\"] = \"transfer_ticket\";\n    CODEC[\"OP_TX_ROLLUP_ORIGINATION\"] = \"tx_rollup_origination\";\n    CODEC[\"OP_TX_ROLLUP_SUBMIT_BATCH\"] = \"tx_rollup_submit_batch\";\n    CODEC[\"BURN_LIMIT\"] = \"burn_limit\";\n    CODEC[\"TX_ROLLUP_ORIGINATION_PARAM\"] = \"tx_rollup_origination_param\";\n    CODEC[\"TX_ROLLUP_ID\"] = \"tx_rollup_id\";\n    CODEC[\"TX_ROLLUP_BATCH_CONTENT\"] = \"tx_rollup_batch_content\";\n    CODEC[\"OP_INCREASE_PAID_STORAGE\"] = \"increase_paid_storage\";\n    CODEC[\"OP_UPDATE_CONSENSUS_KEY\"] = \"update_consensus_key\";\n    CODEC[\"OP_DRAIN_DELEGATE\"] = \"drain_delegate\";\n    CODEC[\"DEPOSITS_LIMIT\"] = \"deposits_limit\";\n    CODEC[\"OP_SET_DEPOSITS_LIMIT\"] = \"set_deposits_limit\";\n    CODEC[\"OP_SMART_ROLLUP_ORIGINATE\"] = \"smart_rollup_originate\";\n    CODEC[\"PVM_KIND\"] = \"pvm_kind\";\n    CODEC[\"OP_SMART_ROLLUP_ADD_MESSAGES\"] = \"smart_rollup_add_messages\";\n    CODEC[\"OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE\"] = \"smart_rollup_execute_outbox_message\";\n})(CODEC || (CODEC = {}));\n// See https://tezos.gitlab.io/whitedoc/michelson.html#full-grammar\nconst opMapping = {\n    '00': 'parameter',\n    '01': 'storage',\n    '02': 'code',\n    '03': 'False',\n    '04': 'Elt',\n    '05': 'Left',\n    '06': 'None',\n    '07': 'Pair',\n    '08': 'Right',\n    '09': 'Some',\n    '0a': 'True',\n    '0b': 'Unit',\n    '0c': 'PACK',\n    '0d': 'UNPACK',\n    '0e': 'BLAKE2B',\n    '0f': 'SHA256',\n    '10': 'SHA512',\n    '11': 'ABS',\n    '12': 'ADD',\n    '13': 'AMOUNT',\n    '14': 'AND',\n    '15': 'BALANCE',\n    '16': 'CAR',\n    '17': 'CDR',\n    '18': 'CHECK_SIGNATURE',\n    '19': 'COMPARE',\n    '1a': 'CONCAT',\n    '1b': 'CONS',\n    '1c': 'CREATE_ACCOUNT',\n    '1d': 'CREATE_CONTRACT',\n    '1e': 'IMPLICIT_ACCOUNT',\n    '1f': 'DIP',\n    '20': 'DROP',\n    '21': 'DUP',\n    '22': 'EDIV',\n    '23': 'EMPTY_MAP',\n    '24': 'EMPTY_SET',\n    '25': 'EQ',\n    '26': 'EXEC',\n    '27': 'FAILWITH',\n    '28': 'GE',\n    '29': 'GET',\n    '2a': 'GT',\n    '2b': 'HASH_KEY',\n    '2c': 'IF',\n    '2d': 'IF_CONS',\n    '2e': 'IF_LEFT',\n    '2f': 'IF_NONE',\n    '30': 'INT',\n    '31': 'LAMBDA',\n    '32': 'LE',\n    '33': 'LEFT',\n    '34': 'LOOP',\n    '35': 'LSL',\n    '36': 'LSR',\n    '37': 'LT',\n    '38': 'MAP',\n    '39': 'MEM',\n    '3a': 'MUL',\n    '3b': 'NEG',\n    '3c': 'NEQ',\n    '3d': 'NIL',\n    '3e': 'NONE',\n    '3f': 'NOT',\n    '40': 'NOW',\n    '41': 'OR',\n    '42': 'PAIR',\n    '43': 'PUSH',\n    '44': 'RIGHT',\n    '45': 'SIZE',\n    '46': 'SOME',\n    '47': 'SOURCE',\n    '48': 'SENDER',\n    '49': 'SELF',\n    '4a': 'STEPS_TO_QUOTA',\n    '4b': 'SUB',\n    '4c': 'SWAP',\n    '4d': 'TRANSFER_TOKENS',\n    '4e': 'SET_DELEGATE',\n    '4f': 'UNIT',\n    '50': 'UPDATE',\n    '51': 'XOR',\n    '52': 'ITER',\n    '53': 'LOOP_LEFT',\n    '54': 'ADDRESS',\n    '55': 'CONTRACT',\n    '56': 'ISNAT',\n    '57': 'CAST',\n    '58': 'RENAME',\n    '59': 'bool',\n    '5a': 'contract',\n    '5b': 'int',\n    '5c': 'key',\n    '5d': 'key_hash',\n    '5e': 'lambda',\n    '5f': 'list',\n    '60': 'map',\n    '61': 'big_map',\n    '62': 'nat',\n    '63': 'option',\n    '64': 'or',\n    '65': 'pair',\n    '66': 'set',\n    '67': 'signature',\n    '68': 'string',\n    '69': 'bytes',\n    '6a': 'mutez',\n    '6b': 'timestamp',\n    '6c': 'unit',\n    '6d': 'operation',\n    '6e': 'address',\n    '6f': 'SLICE',\n    '70': 'DIG',\n    '71': 'DUG',\n    '72': 'EMPTY_BIG_MAP',\n    '73': 'APPLY',\n    '74': 'chain_id',\n    '75': 'CHAIN_ID',\n    '76': 'LEVEL',\n    '77': 'SELF_ADDRESS',\n    '78': 'never',\n    '79': 'NEVER',\n    '7a': 'UNPAIR',\n    '7b': 'VOTING_POWER',\n    '7c': 'TOTAL_VOTING_POWER',\n    '7d': 'KECCAK',\n    '7e': 'SHA3',\n    '7f': 'PAIRING_CHECK',\n    '80': 'bls12_381_g1',\n    '81': 'bls12_381_g2',\n    '82': 'bls12_381_fr',\n    '83': 'sapling_state',\n    '84': 'sapling_transaction_deprecated',\n    '85': 'SAPLING_EMPTY_STATE',\n    '86': 'SAPLING_VERIFY_UPDATE',\n    '87': 'ticket',\n    '88': 'TICKET_DEPRECATED',\n    '89': 'READ_TICKET',\n    '8a': 'SPLIT_TICKET',\n    '8b': 'JOIN_TICKETS',\n    '8c': 'GET_AND_UPDATE',\n    '8d': 'chest',\n    '8e': 'chest_key',\n    '8f': 'OPEN_CHEST',\n    '90': 'VIEW',\n    '91': 'view',\n    '92': 'constant',\n    '93': 'SUB_MUTEZ',\n    '94': 'tx_rollup_l2_address',\n    '95': 'MIN_BLOCK_TIME',\n    '96': 'sapling_transaction',\n    '97': 'EMIT',\n    '98': 'Lambda_rec',\n    '99': 'LAMBDA_REC',\n    '9a': 'TICKET',\n    '9b': 'BYTES',\n    '9c': 'NAT',\n};\nconst opMappingReverse = (() => {\n    const result = {};\n    Object.keys(opMapping).forEach((key) => {\n        result[opMapping[key]] = key;\n    });\n    return result;\n})();\n// See https://tezos.gitlab.io/shell/p2p_api.html?highlight=p2p\nconst kindMapping = {\n    0x04: 'activate_account',\n    0x6b: 'reveal',\n    0x6e: 'delegation',\n    0x6c: 'transaction',\n    0x6d: 'origination',\n    0x06: 'ballot',\n    0x15: 'endorsement',\n    0x01: 'seed_nonce_revelation',\n    0x05: 'proposals',\n    0x6f: 'register_global_constant',\n    0x96: 'tx_rollup_origination',\n    0x97: 'tx_rollup_submit_batch',\n    0x9e: 'transfer_ticket',\n    0x70: 'set_deposits_limit',\n    0x71: 'increase_paid_storage',\n    0x72: 'update_consensus_key',\n    0x09: 'drain_delegate',\n    0xc8: 'smart_rollup_originate',\n    0xc9: 'smart_rollup_add_messages',\n    0xce: 'smart_rollup_execute_outbox_message',\n    0x11: 'failing_noop',\n};\nconst kindMappingReverse = (() => {\n    const result = {};\n    Object.keys(kindMapping).forEach((key) => {\n        const keyNum = typeof key === 'string' ? parseInt(key, 10) : key;\n        result[kindMapping[keyNum]] = pad(keyNum, 2);\n    });\n    return result;\n})();\n// See https://tezos.gitlab.io/protocols/005_babylon.html#transactions-now-have-an-entrypoint\nconst entrypointMapping = {\n    '00': 'default',\n    '01': 'root',\n    '02': 'do',\n    '03': 'set_delegate',\n    '04': 'remove_delegate',\n    '05': 'deposit',\n};\nconst entrypointMappingReverse = (() => {\n    const result = {};\n    Object.keys(entrypointMapping).forEach((key) => {\n        result[entrypointMapping[key]] = key;\n    });\n    return result;\n})();\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid operation content being passed or used\n */ class InvalidOperationSchemaError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(operation, errorDetail) {\n        super();\n        this.operation = operation;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidOperationSchemaError';\n        this.message = `Invalid operation content recevied`;\n        errorDetail ? (this.message += ` ${errorDetail}.`) : '';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an entrypoint name exceeding maximum length\n */\nclass OversizedEntryPointError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(entrypoint) {\n        super();\n        this.entrypoint = entrypoint;\n        this.name = 'OversizedEntryPointError';\n        this.message = `Invalid entrypoint length \"${entrypoint.length}\", maximum length is \"${ENTRYPOINT_MAX_LENGTH}\".`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid ballot value being used\n */\nclass InvalidBallotValueError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(ballotValue) {\n        super();\n        this.ballotValue = ballotValue;\n        this.name = 'InvalidBallotValueError';\n        this.message = `Invalid ballot value \"${ballotValue}\" expecting one of the following: \"yay\", \"nay\", \"pass\".`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to decode ballot value\n */\nclass DecodeBallotValueError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(ballotValue) {\n        super();\n        this.ballotValue = ballotValue;\n        this.name = 'DecodeBallotValueError';\n        this.message = `Invalid ballot value \"${ballotValue}\", cannot be decoded.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates unexpected Michelson Value being passed or used\n */\nclass UnexpectedMichelsonValueError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(value) {\n        super();\n        this.value = value;\n        this.name = 'UnexpectedMichelsonValueError';\n        this.message = `Invalid Michelson value \"${value}\", unalbe to encode.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to decode an operation\n */\nclass OperationDecodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'OperationDecodingError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode an operation\n */\nclass OperationEncodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'OperationEncodingError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an unsupported operation being passed or used\n */\nclass UnsupportedOperationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(op) {\n        super();\n        this.op = op;\n        this.name = 'UnsupportedOperationError';\n        this.message = `Unsupported operation \"${op}\", can submit an issue on our github for feature request.`;\n    }\n}\n/**\n * @cateogry Error\n * @description Error that indicates an unsupported pvm being passed or used\n */\nclass UnsupportedPvmKindError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(pvm) {\n        super();\n        this.pvm = pvm;\n        this.name = 'UnsupportedPvmKindError';\n        this.message = `Invalid Pvm kind \"${pvm}\" expecting either \"arith\" or \"wasm_2_0_0\".`;\n    }\n}\n/**\n * @category Error\n * @description Error that indicates an unsupported pvm to decode\n */\nclass DecodePvmKindError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(pvm) {\n        super();\n        this.pvm = pvm;\n        this.name = 'DecodePvmKindError';\n        this.message = `Invalid Pvm kind \"${pvm}\", cannot be decoded.`;\n    }\n}\n/**\n * @category Error\n * @description Error that indicates an invalid Smart Rollup Address (sr1)\n */\nclass InvalidSmartRollupAddressError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(address, errorDetail) {\n        super();\n        this.address = address;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidSmartRollupAddress';\n        this.message = `Invalid smart rollup address \"${address}\"`;\n        errorDetail ? (this.message += ` ${errorDetail}.`) : '';\n    }\n}\n/**\n * @category Error\n * @description Error that indicates an invalid Smart Rollup commitment hash (src1)\n */\nclass InvalidSmartRollupCommitmentHashError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.ParameterValidationError {\n    constructor(hash, errorDetail) {\n        super();\n        this.hash = hash;\n        this.errorDetail = errorDetail;\n        this.name = 'InvalidSmartRollupCommitmentHashError';\n        this.message = `Invalid smart rollup commitment hash \"${hash}\"`;\n        errorDetail ? (this.message += ` ${errorDetail}.`) : '';\n    }\n}\n\nclass Uint8ArrayConsumer {\n    static fromHexString(hex) {\n        const lowHex = hex.toLowerCase();\n        if (/^(([a-f]|\\d){2})*$/.test(lowHex)) {\n            const arr = new Uint8Array((lowHex.match(/([a-z]|\\d){2}/g) || []).map((byte) => parseInt(byte, 16)));\n            return new Uint8ArrayConsumer(arr);\n        }\n        else {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidHexStringError(lowHex);\n        }\n    }\n    constructor(arr, offset = 0) {\n        this.arr = arr;\n        this.offset = offset;\n    }\n    consume(count) {\n        const subArr = this.arr.subarray(this.offset, this.offset + count);\n        this.offset += count;\n        return subArr;\n    }\n    get(idx) {\n        return this.arr[this.offset + idx];\n    }\n    length() {\n        return this.arr.length - this.offset;\n    }\n    slice(start, end) {\n        return new Uint8ArrayConsumer(this.arr.slice(start, end));\n    }\n}\n\nconst isPrim = (value) => {\n    return 'prim' in value;\n};\nconst isBytes = (value) => {\n    return 'bytes' in value && typeof value.bytes === 'string';\n};\nconst isString = (value) => {\n    return 'string' in value && typeof value.string === 'string';\n};\nconst isInt = (value) => {\n    return 'int' in value && typeof value.int === 'string';\n};\nconst scriptEncoder = (script) => {\n    const code = valueEncoder(script.code);\n    const storage = valueEncoder(script.storage);\n    return `${pad(code.length / 2, 8)}${code}${pad(storage.length / 2, 8)}${storage}`;\n};\nconst scriptDecoder = (value) => {\n    const code = extractRequiredLen(value);\n    const storage = extractRequiredLen(value);\n    return {\n        code: valueDecoder(new Uint8ArrayConsumer(code)),\n        storage: valueDecoder(new Uint8ArrayConsumer(storage)),\n    };\n};\nconst valueEncoder = (value) => {\n    if (Array.isArray(value)) {\n        const encoded = value.map((x) => valueEncoder(x)).join('');\n        const len = encoded.length / 2;\n        return `02${pad(len)}${encoded}`;\n    }\n    else if (isPrim(value)) {\n        return primEncoder(value);\n    }\n    else if (isBytes(value)) {\n        return bytesEncoder(value);\n    }\n    else if (isString(value)) {\n        return stringEncoder(value);\n    }\n    else if (isInt(value)) {\n        return intEncoder(value);\n    }\n    throw new UnexpectedMichelsonValueError(JSON.stringify(value));\n};\nconst valueDecoder = (value) => {\n    const preamble = value.consume(1);\n    switch (preamble[0]) {\n        case 0x0a:\n            return bytesDecoder(value);\n        case 0x01:\n            return stringDecoder(value);\n        case 0x00:\n            return intDecoder(value);\n        case 0x02: {\n            const val = new Uint8ArrayConsumer(extractRequiredLen(value));\n            const results = [];\n            while (val.length() > 0) {\n                results.push(valueDecoder(val));\n            }\n            return results;\n        }\n        default:\n            return primDecoder(value, preamble);\n    }\n};\nconst extractRequiredLen = (value, bytesLength = 4) => {\n    const len = value.consume(bytesLength);\n    const valueLen = parseInt(Buffer.from(len).toString('hex'), 16);\n    return value.consume(valueLen);\n};\n/**\n * @description parse bytes into multiple items of an array\n * @param value Uint8ArrayConsumer class of forged segment to parse\n * @param bytesLength default 4 bytes for length of variable bytes\n * @returns array of Uint8Array values for each array item\n */\nconst stripLengthPrefixFromBytes = (value, bytesLength = 4) => {\n    const ret = [];\n    let values = value;\n    while (values.length()) {\n        const len = values.consume(bytesLength);\n        const valueLen = parseInt(Buffer.from(len).toString('hex'), 16);\n        ret.push(values.consume(valueLen));\n        values = values.slice(valueLen + bytesLength);\n    }\n    return ret;\n};\nconst bytesEncoder = (value) => {\n    if (!/^([A-Fa-f0-9]{2})*$/.test(value.bytes)) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidHexStringError(value.bytes);\n    }\n    const len = value.bytes.length / 2;\n    return `0a${pad(len)}${value.bytes}`;\n};\nconst bytesDecoder = (value) => {\n    const bytes = extractRequiredLen(value);\n    return {\n        bytes: Buffer.from(bytes).toString('hex'),\n    };\n};\nconst stringEncoder = (value) => {\n    const str = Buffer.from(value.string, 'utf8').toString('hex');\n    const hexLength = str.length / 2;\n    return `01${pad(hexLength)}${str}`;\n};\nconst stringDecoder = (value) => {\n    const str = extractRequiredLen(value);\n    return {\n        string: Buffer.from(str).toString('utf8'),\n    };\n};\nconst intEncoder = ({ int }) => {\n    const num = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__.BigNumber(int, 10);\n    const positiveMark = num.toString(2)[0] === '-' ? '1' : '0';\n    const binary = num.toString(2).replace(/-/g, '');\n    const pad = binary.length <= 6\n        ? 6\n        : (binary.length - 6) % 7\n            ? binary.length + 7 - ((binary.length - 6) % 7)\n            : binary.length;\n    const splitted = binary.padStart(pad, '0').match(/\\d{6,7}/g);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const reversed = splitted.reverse();\n    reversed[0] = positiveMark + reversed[0];\n    const numHex = reversed.map((x, i) => \n    // Add one to the last chunk\n    parseInt((i === reversed.length - 1 ? '0' : '1') + x, 2)\n        .toString(16)\n        .padStart(2, '0'));\n    return `00${numHex.join('')}`;\n};\nconst intDecoder = (value) => {\n    let c = value.consume(1)[0];\n    const hexNumber = [];\n    const isNotLastChunkMask = 1 << 7;\n    while (c & isNotLastChunkMask) {\n        hexNumber.push(c);\n        c = value.consume(1)[0];\n    }\n    hexNumber.push(c);\n    const isNegative = !!((1 << 6) & hexNumber[0]);\n    hexNumber[0] = hexNumber[0] & 0b1111111;\n    const numBin = hexNumber\n        .map((x, i) => x\n        .toString(2)\n        .slice(i === 0 ? -6 : -7)\n        .padStart(i === 0 ? 6 : 7, '0'))\n        .reverse();\n    let num = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__.BigNumber(numBin.join(''), 2);\n    if (isNegative) {\n        num = num.times(-1);\n    }\n    return {\n        int: num.toFixed(),\n    };\n};\nconst primEncoder = (value) => {\n    const hasAnnot = +Array.isArray(value.annots);\n    const argsCount = Array.isArray(value.args) ? value.args.length : 0;\n    // Specify the number of args max is 3 without annotation\n    const preamble = pad(Math.min(2 * argsCount + hasAnnot + 0x03, 9), 2);\n    const op = opMappingReverse[value.prim];\n    let encodedArgs = (value.args || []).map((arg) => valueEncoder(arg)).join('');\n    const encodedAnnots = Array.isArray(value.annots) ? encodeAnnots(value.annots) : '';\n    if ((value.prim === 'LAMBDA' || value.prim === 'LAMBDA_REC') && argsCount) {\n        encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n    }\n    if ((value.prim === 'pair' || value.prim === 'Pair') && argsCount > 2) {\n        encodedArgs =\n            encodedAnnots === ''\n                ? pad(encodedArgs.length / 2) + encodedArgs + pad(0)\n                : pad(encodedArgs.length / 2) + encodedArgs;\n    }\n    if (value.prim === 'view' && value.args) {\n        encodedArgs = pad(encodedArgs.length / 2) + encodedArgs + pad(0);\n    }\n    return `${preamble}${op}${encodedArgs}${encodedAnnots}`;\n};\nconst primDecoder = (value, preamble) => {\n    const hasAnnot = (preamble[0] - 0x03) % 2 === 1;\n    let argsCount = Math.floor((preamble[0] - 0x03) / 2);\n    const op = value.consume(1)[0].toString(16).padStart(2, '0');\n    const result = {\n        prim: opMapping[op],\n    };\n    if (opMapping[op] === 'LAMBDA' || opMapping[op] === 'LAMBDA_REC') {\n        value.consume(4);\n    }\n    if (opMapping[op] === 'view') {\n        if (argsCount != 0) {\n            return primViewDecoder(value, result);\n        }\n        else {\n            return result;\n        }\n    }\n    let combPairArgs;\n    let combPairAnnots;\n    if ((opMapping[op] === 'pair' || opMapping[op] === 'Pair') && argsCount > 2) {\n        combPairArgs = decodeCombPair(value);\n        argsCount = 0;\n        combPairAnnots = decodeAnnots(value);\n    }\n    const args = new Array(argsCount).fill(0).map(() => valueDecoder(value));\n    if (opMapping[op] === 'LAMBDA' || opMapping[op] === 'LAMBDA_REC') {\n        value.consume(4);\n    }\n    if (combPairArgs) {\n        result['args'] = combPairArgs;\n    }\n    else if (args.length) {\n        result['args'] = args;\n    }\n    if (combPairAnnots && combPairAnnots[0] !== '') {\n        result['annots'] = combPairAnnots;\n    }\n    else if (hasAnnot) {\n        result['annots'] = decodeAnnots(value);\n    }\n    return result;\n};\nconst primViewDecoder = (value, result) => {\n    value.consume(4);\n    result['args'] = new Array(4).fill(0).map(() => valueDecoder(value));\n    value.consume(4);\n    return result;\n};\nconst decodeCombPair = (val) => {\n    const array = new Uint8ArrayConsumer(extractRequiredLen(val));\n    const args = [];\n    while (array.length() > 0) {\n        args.push(valueDecoder(array));\n    }\n    return args;\n};\nconst encodeAnnots = (value) => {\n    const mergedAnnot = value\n        .map((x) => {\n        return Buffer.from(x, 'utf8').toString('hex');\n    })\n        .join('20');\n    const len = mergedAnnot.length / 2;\n    return `${pad(len)}${mergedAnnot}`;\n};\nconst decodeAnnots = (val) => {\n    const len = val.consume(4);\n    const annotLen = parseInt(Buffer.from(len).toString('hex'), 16);\n    const restOfAnnot = val.consume(annotLen);\n    const restOfAnnotHex = Buffer.from(restOfAnnot).toString('hex');\n    return restOfAnnotHex.split('20').map((x) => Buffer.from(x, 'hex').toString('utf8'));\n};\n\n// https://tezos.gitlab.io/shell/p2p_api.html specifies data types and structure for forging\nconst prefixEncoder = (prefix$1) => (str) => {\n    return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.buf2hex)(Buffer.from((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.b58cdecode)(str, _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.prefix[prefix$1])));\n};\nconst prefixDecoder = (pre) => (str) => {\n    const val = str.consume(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.prefixLength[pre]);\n    return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.b58cencode)(val, _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.prefix[pre]);\n};\nconst tz1Decoder = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1);\nconst branchDecoder = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.B);\nconst pkhDecoder = (val) => {\n    const prefix = val.consume(1);\n    if (prefix[0] === 0x00) {\n        return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1)(val);\n    }\n    else if (prefix[0] === 0x01) {\n        return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2)(val);\n    }\n    else if (prefix[0] === 0x02) {\n        return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3)(val);\n    }\n};\nconst branchEncoder = prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.B);\nconst tz1Encoder = prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1);\nconst boolEncoder = (bool) => (bool ? 'ff' : '00');\nconst proposalEncoder = (proposal) => {\n    return prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P)(proposal);\n};\nconst proposalDecoder = (proposal) => {\n    return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P)(proposal);\n};\nconst proposalsDecoder = (proposal) => {\n    const proposals = [];\n    proposal.consume(4);\n    while (proposal.length() > 0) {\n        proposals.push(proposalDecoder(proposal));\n    }\n    return proposals;\n};\nconst proposalsEncoder = (proposals) => {\n    return pad(32 * proposals.length) + proposals.map((x) => proposalEncoder(x)).join('');\n};\nconst ballotEncoder = (ballot) => {\n    switch (ballot) {\n        case 'yay':\n            return '00';\n        case 'nay':\n            return '01';\n        case 'pass':\n            return '02';\n        default:\n            throw new InvalidBallotValueError(ballot);\n    }\n};\nconst ballotDecoder = (ballot) => {\n    const value = ballot.consume(1);\n    switch (value[0]) {\n        case 0x00:\n            return 'yay';\n        case 0x01:\n            return 'nay';\n        case 0x02:\n            return 'pass';\n        default:\n            throw new DecodeBallotValueError(value[0].toString());\n    }\n};\nconst pvmKindEncoder = (pvm) => {\n    switch (pvm) {\n        case 'arith':\n            return '00';\n        case 'wasm_2_0_0':\n            return '01';\n        default:\n            throw new UnsupportedPvmKindError(pvm);\n    }\n};\nconst pvmKindDecoder = (pvm) => {\n    const value = pvm.consume(1);\n    switch (value[0]) {\n        case 0x00:\n            return 'arith';\n        case 0x01:\n            return 'wasm_2_0_0';\n        default:\n            throw new DecodePvmKindError(value[0].toString());\n    }\n};\nconst delegateEncoder = (val) => {\n    if (val) {\n        return boolEncoder(true) + pkhEncoder(val);\n    }\n    else {\n        return boolEncoder(false);\n    }\n};\nconst int32Encoder = (val) => {\n    const num = parseInt(String(val), 10);\n    const byte = [];\n    for (let i = 0; i < 4; i++) {\n        const shiftBy = (4 - (i + 1)) * 8;\n        byte.push((num & (0xff << shiftBy)) >> shiftBy);\n    }\n    return Buffer.from(byte).toString('hex');\n};\nconst int32Decoder = (val) => {\n    const num = val.consume(4);\n    let finalNum = 0;\n    for (let i = 0; i < num.length; i++) {\n        finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));\n    }\n    return finalNum;\n};\nconst int16Encoder = (val) => {\n    const num = parseInt(String(val), 10);\n    const byte = [];\n    for (let i = 0; i < 2; i++) {\n        const shiftBy = (2 - (i + 1)) * 8;\n        byte.push((num & (0xff << shiftBy)) >> shiftBy);\n    }\n    return Buffer.from(byte).toString('hex');\n};\nconst int16Decoder = (val) => {\n    const num = val.consume(2);\n    let finalNum = 0;\n    for (let i = 0; i < num.length; i++) {\n        finalNum = finalNum | (num[i] << ((num.length - (i + 1)) * 8));\n    }\n    return finalNum;\n};\nconst boolDecoder = (val) => {\n    const bool = val.consume(1);\n    return bool[0] === 0xff;\n};\nconst delegateDecoder = (val) => {\n    const hasDelegate = boolDecoder(val);\n    if (hasDelegate) {\n        return pkhDecoder(val);\n    }\n};\nconst pkhEncoder = (val) => {\n    const pubkeyPrefix = val.substring(0, 3);\n    switch (pubkeyPrefix) {\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1:\n            return '00' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1)(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2:\n            return '01' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2)(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3:\n            return '02' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3)(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ4:\n            return '03' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ4)(val);\n        default:\n            throw new _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.InvalidKeyHashError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) +\n                ` expecting one for the following \"${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1}\", \"${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2}\", \"${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3}\" or \"${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ4}\".`);\n    }\n};\nconst publicKeyEncoder = (val) => {\n    const pubkeyPrefix = val.substring(0, 4);\n    switch (pubkeyPrefix) {\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.EDPK:\n            return '00' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.EDPK)(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SPPK:\n            return '01' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SPPK)(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P2PK:\n            return '02' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P2PK)(val);\n        default:\n            throw new _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.InvalidPublicKeyError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) +\n                ` expecting one of the following '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.EDPK}', '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SPPK}', '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P2PK}' or '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.BLPK}'.`);\n    }\n};\nconst addressEncoder = (val) => {\n    const pubkeyPrefix = val.substring(0, 3);\n    switch (pubkeyPrefix) {\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1:\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2:\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3:\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ4:\n            return '00' + pkhEncoder(val);\n        case _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1:\n            return '01' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1)(val) + '00';\n        default:\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidAddressError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) +\n                ` expecting one of the following prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ1}', ${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ2}', '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ3}', '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TZ4}' or '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1}'.`);\n    }\n};\nconst smartRollupAddressEncoder = (val) => {\n    if (val.substring(0, 3) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1) {\n        throw new InvalidSmartRollupAddressError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1}'.`);\n    }\n    return prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1)(val);\n};\nconst smartContractAddressEncoder = (val) => {\n    const prefix = val.substring(0, 3);\n    if (prefix === _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1) {\n        return '01' + prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1)(val) + '00';\n    }\n    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidContractAddressError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1}'.`);\n};\nconst publicKeyDecoder = (val) => {\n    const preamble = val.consume(1);\n    switch (preamble[0]) {\n        case 0x00:\n            return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.EDPK)(val);\n        case 0x01:\n            return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SPPK)(val);\n        case 0x02:\n            return prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.P2PK)(val);\n        default:\n            throw new _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.InvalidPublicKeyError(val.toString(), (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED));\n    }\n};\nconst smartRollupCommitmentHashEncoder = (val) => {\n    const prefix = val.substring(0, 4);\n    if (prefix === _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1) {\n        return prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1)(val);\n    }\n    throw new InvalidSmartRollupCommitmentHashError(val, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1}'`);\n};\nconst addressDecoder = (val) => {\n    const preamble = val.consume(1);\n    switch (preamble[0]) {\n        case 0x00:\n            return pkhDecoder(val);\n        case 0x01: {\n            const address = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1)(val);\n            val.consume(1);\n            return address;\n        }\n        default:\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidAddressError(val.toString(), ': Unable to decode.');\n    }\n};\nconst smartRollupAddressDecoder = (val) => {\n    const address = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1)(val);\n    if (address.substring(0, 3) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1) {\n        throw new InvalidSmartRollupAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SR1}'.`);\n    }\n    return address;\n};\nconst smartContractAddressDecoder = (val) => {\n    const preamble = val.consume(1);\n    if (preamble[0] === 0x01) {\n        const scAddress = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.KT1)(val);\n        val.consume(1);\n        return scAddress;\n    }\n    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidContractAddressError(val.toString(), (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED));\n};\nconst smartRollupCommitmentHashDecoder = (val) => {\n    const address = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1)(val);\n    if (address.substring(0, 4) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1) {\n        throw new InvalidSmartRollupCommitmentHashError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.NO_PREFIX_MATCHED) + ` expecting prefix '${_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.SRC1}'`);\n    }\n    return address;\n};\nconst zarithEncoder = (n) => {\n    const fn = [];\n    let nn = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](n, 10);\n    if (nn.isNaN()) {\n        throw new TypeError(`Invalid zarith number ${n}`);\n    }\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (nn.lt(128)) {\n            if (nn.lt(16))\n                fn.push('0');\n            fn.push(nn.toString(16));\n            break;\n        }\n        else {\n            let b = nn.mod(128);\n            nn = nn.minus(b);\n            nn = nn.dividedBy(128);\n            b = b.plus(128);\n            fn.push(b.toString(16));\n        }\n    }\n    return fn.join('');\n};\nconst zarithDecoder = (n) => {\n    let mostSignificantByte = 0;\n    while (mostSignificantByte < n.length() && (n.get(mostSignificantByte) & 128) !== 0) {\n        mostSignificantByte += 1;\n    }\n    let num = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0);\n    for (let i = mostSignificantByte; i >= 0; i -= 1) {\n        const tmp = n.get(i) & 0x7f;\n        num = num.multipliedBy(128);\n        num = num.plus(tmp);\n    }\n    n.consume(mostSignificantByte + 1);\n    return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](num).toString();\n};\nconst entrypointDecoder = (value) => {\n    const preamble = pad(value.consume(1)[0], 2);\n    if (preamble in entrypointMapping) {\n        return entrypointMapping[preamble];\n    }\n    else {\n        const entry = extractRequiredLen(value, 1);\n        const entrypoint = Buffer.from(entry).toString('utf8');\n        if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n            throw new OversizedEntryPointError(entrypoint);\n        }\n        return entrypoint;\n    }\n};\nconst parametersDecoder = (val) => {\n    const preamble = val.consume(1);\n    if (preamble[0] === 0x00) {\n        return;\n    }\n    else {\n        const encodedEntrypoint = entrypointDecoder(val);\n        const params = extractRequiredLen(val);\n        const parameters = valueDecoder(new Uint8ArrayConsumer(params));\n        return {\n            entrypoint: encodedEntrypoint,\n            value: parameters,\n        };\n    }\n};\nconst entrypointEncoder = (entrypoint) => {\n    if (entrypoint in entrypointMappingReverse) {\n        return `${entrypointMappingReverse[entrypoint]}`;\n    }\n    else {\n        if (entrypoint.length > ENTRYPOINT_MAX_LENGTH) {\n            throw new OversizedEntryPointError(entrypoint);\n        }\n        const value = { string: entrypoint };\n        return `ff${valueEncoder(value).slice(8)}`;\n    }\n};\nconst parametersEncoder = (val) => {\n    if (!val || (val.entrypoint === 'default' && 'prim' in val.value && val.value.prim === 'Unit')) {\n        return '00';\n    }\n    const encodedEntrypoint = entrypointEncoder(val.entrypoint);\n    const parameters = valueEncoder(val.value);\n    const length = (parameters.length / 2).toString(16).padStart(8, '0');\n    return `ff${encodedEntrypoint}${length}${parameters}`;\n};\nconst valueParameterEncoder = (value) => {\n    const valueEncoded = valueEncoder(value);\n    return `${pad(valueEncoded.length / 2)}${valueEncoded}`;\n};\nconst valueParameterDecoder = (val) => {\n    const value = extractRequiredLen(val);\n    return valueDecoder(new Uint8ArrayConsumer(value));\n};\nconst blockPayloadHashEncoder = prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.VH);\nconst blockPayloadHashDecoder = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.VH);\nconst entrypointNameEncoder = (entrypoint) => {\n    const value = { string: entrypoint };\n    return `${valueEncoder(value).slice(2)}`;\n};\nconst entrypointNameDecoder = (val) => {\n    const entry = extractRequiredLen(val);\n    return Buffer.from(entry).toString('utf8');\n};\nconst txRollupOriginationParamEncoder = (_value) => {\n    return '';\n};\nconst txRollupOriginationParamDecoder = (_val) => {\n    return {};\n};\nconst txRollupIdEncoder = prefixEncoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TXR1);\nconst txRollupIdDecoder = prefixDecoder(_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.Prefix.TXR1);\nconst txRollupBatchContentEncoder = (value) => {\n    return `${pad(value.length / 2)}${value}`;\n};\nconst txRollupBatchContentDecoder = (val) => {\n    const value = extractRequiredLen(val);\n    return Buffer.from(value).toString('hex');\n};\nconst burnLimitEncoder = (val) => {\n    return !val ? '00' : `ff${zarithEncoder(val)}`;\n};\nconst burnLimitDecoder = (value) => {\n    const prefix = value.consume(1);\n    if (Buffer.from(prefix).toString('hex') !== '00') {\n        return zarithDecoder(value);\n    }\n};\nconst depositsLimitEncoder = (val) => {\n    return !val ? '00' : `ff${zarithEncoder(val)}`;\n};\nconst depositsLimitDecoder = (value) => {\n    const prefix = value.consume(1);\n    if (Buffer.from(prefix).toString('hex') !== '00') {\n        return zarithDecoder(value);\n    }\n};\nconst paddedBytesEncoder = (val, paddingLength = 8) => {\n    return `${pad(val.length / 2, paddingLength)}${val}`;\n};\nconst paddedBytesDecoder = (val) => {\n    const value = extractRequiredLen(val);\n    return Buffer.from(value).toString('hex');\n};\nconst smartRollupMessageEncoder = (val) => {\n    const message = val.reduce((prev, curr) => {\n        return prev + `${pad(curr.length / 2)}${curr}`;\n    }, '');\n    return `${pad(message.length / 2)}${message}`;\n};\nconst smartRollupMessageDecoder = (val) => {\n    const valueArray = extractRequiredLen(val);\n    const ret = stripLengthPrefixFromBytes(new Uint8ArrayConsumer(valueArray));\n    return ret.map((value) => Buffer.from(value).toString('hex'));\n};\n\nconst ManagerOperationSchema = {\n    branch: CODEC.BRANCH,\n    contents: [CODEC.OPERATION],\n};\nconst ActivationSchema = {\n    pkh: CODEC.TZ1,\n    secret: CODEC.SECRET,\n};\nconst RevealSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    public_key: CODEC.PUBLIC_KEY,\n};\nconst DelegationSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    delegate: CODEC.DELEGATE,\n};\nconst TransactionSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    amount: CODEC.ZARITH,\n    destination: CODEC.ADDRESS,\n    parameters: CODEC.PARAMETERS,\n};\nconst OriginationSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    balance: CODEC.ZARITH,\n    delegate: CODEC.DELEGATE,\n    script: CODEC.SCRIPT,\n};\nconst BallotSchema = {\n    source: CODEC.PKH,\n    period: CODEC.INT32,\n    proposal: CODEC.PROPOSAL,\n    ballot: CODEC.BALLOT_STATEMENT,\n};\nconst EndorsementSchema = {\n    slot: CODEC.INT16,\n    level: CODEC.INT32,\n    round: CODEC.INT32,\n    block_payload_hash: CODEC.BLOCK_PAYLOAD_HASH,\n};\nconst SeedNonceRevelationSchema = {\n    level: CODEC.INT32,\n    nonce: CODEC.RAW,\n};\nconst ProposalsSchema = {\n    source: CODEC.PKH,\n    period: CODEC.INT32,\n    proposals: CODEC.PROPOSAL_ARR,\n};\nconst RegisterGlobalConstantSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    value: CODEC.VALUE,\n};\nconst TransferTicketSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    ticket_contents: CODEC.VALUE,\n    ticket_ty: CODEC.VALUE,\n    ticket_ticketer: CODEC.ADDRESS,\n    ticket_amount: CODEC.ZARITH,\n    destination: CODEC.ADDRESS,\n    entrypoint: CODEC.ENTRYPOINT,\n};\nconst TxRollupOriginationSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    tx_rollup_origination: CODEC.TX_ROLLUP_ORIGINATION_PARAM,\n};\nconst TxRollupSubmitBatchSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    rollup: CODEC.TX_ROLLUP_ID,\n    content: CODEC.TX_ROLLUP_BATCH_CONTENT,\n    burn_limit: CODEC.BURN_LIMIT,\n};\nconst IncreasePaidStorageSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    amount: CODEC.ZARITH,\n    destination: CODEC.SMART_CONTRACT_ADDRESS,\n};\nconst UpdateConsensusKeySchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    pk: CODEC.PUBLIC_KEY,\n};\nconst DrainDelegateSchema = {\n    consensus_key: CODEC.PKH,\n    delegate: CODEC.PKH,\n    destination: CODEC.PKH,\n};\nconst SetDepositsLimitSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    limit: CODEC.DEPOSITS_LIMIT,\n};\nconst SmartRollupOriginateSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    pvm_kind: CODEC.PVM_KIND,\n    kernel: CODEC.PADDED_BYTES,\n    origination_proof: CODEC.PADDED_BYTES,\n    parameters_ty: CODEC.VALUE,\n};\nconst SmartRollupAddMessagesSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    message: CODEC.SMART_ROLLUP_MESSAGE,\n};\nconst SmartRollupExecuteOutboxMessageSchema = {\n    source: CODEC.PKH,\n    fee: CODEC.ZARITH,\n    counter: CODEC.ZARITH,\n    gas_limit: CODEC.ZARITH,\n    storage_limit: CODEC.ZARITH,\n    rollup: CODEC.SMART_ROLLUP_ADDRESS,\n    cemented_commitment: CODEC.SMART_ROLLUP_COMMITMENT_HASH,\n    output_proof: CODEC.PADDED_BYTES,\n};\nconst FailingNoopSchema = {\n    arbitrary: CODEC.PADDED_BYTES,\n};\nconst operationEncoder = (encoders) => (operation) => {\n    if (!(operation.kind in encoders) || !(operation.kind in kindMappingReverse)) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidOperationKindError(operation.kind);\n    }\n    return kindMappingReverse[operation.kind] + encoders[operation.kind](operation);\n};\nconst operationDecoder = (decoders) => (value) => {\n    const op = value.consume(1);\n    const operationName = kindMapping[op[0]];\n    if (operationName === undefined) {\n        throw new UnsupportedOperationError(op[0].toString());\n    }\n    const decodedObj = decoders[operationName](value);\n    if (typeof decodedObj !== 'object') {\n        throw new OperationDecodingError('Invalid operation, cannot be decoded.');\n    }\n    return Object.assign({ kind: operationName }, decodedObj);\n};\nconst schemaEncoder = (encoders) => (schema) => (value) => {\n    const keys = Object.keys(schema);\n    return keys.reduce((prev, key) => {\n        const valueToEncode = schema[key];\n        if (value && Array.isArray(valueToEncode)) {\n            const encoder = encoders[valueToEncode[0]];\n            const values = value[key];\n            if (!Array.isArray(values)) {\n                throw new OperationEncodingError(`Invalid operation value \"${JSON.stringify(values)}\" of key \"${key}, expected value to be Array.`);\n            }\n            return (prev + values.reduce((prevBytes, current) => prevBytes + encoder(current), ''));\n        }\n        else {\n            const encoder = encoders[valueToEncode];\n            return prev + encoder(value[key]);\n        }\n    }, '');\n};\nconst schemaDecoder = (decoders) => (schema) => (value) => {\n    const keys = Object.keys(schema);\n    return keys.reduce((prev, key) => {\n        const valueToEncode = schema[key];\n        if (Array.isArray(valueToEncode)) {\n            const decoder = decoders[valueToEncode[0]];\n            const decoded = [];\n            const lastLength = value.length();\n            while (value.length() > 0) {\n                decoded.push(decoder(value));\n                if (lastLength === value.length()) {\n                    throw new OperationDecodingError('Unable to decode value');\n                }\n            }\n            return Object.assign(Object.assign({}, prev), { [key]: decoded });\n        }\n        else {\n            const decoder = decoders[valueToEncode];\n            const result = decoder(value);\n            if (typeof result !== 'undefined') {\n                return Object.assign(Object.assign({}, prev), { [key]: result });\n            }\n            else {\n                return Object.assign({}, prev);\n            }\n        }\n    }, {});\n};\n\nconst decoders = {\n    [CODEC.SECRET]: (val) => toHexString(val.consume(20)),\n    [CODEC.RAW]: (val) => toHexString(val.consume(32)),\n    [CODEC.TZ1]: tz1Decoder,\n    [CODEC.BRANCH]: branchDecoder,\n    [CODEC.ZARITH]: zarithDecoder,\n    [CODEC.PUBLIC_KEY]: publicKeyDecoder,\n    [CODEC.PKH]: pkhDecoder,\n    [CODEC.DELEGATE]: delegateDecoder,\n    [CODEC.INT32]: int32Decoder,\n    [CODEC.SCRIPT]: scriptDecoder,\n    [CODEC.BALLOT_STATEMENT]: ballotDecoder,\n    [CODEC.PROPOSAL]: proposalDecoder,\n    [CODEC.PROPOSAL_ARR]: proposalsDecoder,\n    [CODEC.PARAMETERS]: parametersDecoder,\n    [CODEC.ADDRESS]: addressDecoder,\n    [CODEC.SMART_ROLLUP_ADDRESS]: smartRollupAddressDecoder,\n    [CODEC.SMART_CONTRACT_ADDRESS]: smartContractAddressDecoder,\n    [CODEC.SMART_ROLLUP_COMMITMENT_HASH]: smartRollupCommitmentHashDecoder,\n    [CODEC.VALUE]: valueParameterDecoder,\n    [CODEC.INT16]: int16Decoder,\n    [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashDecoder,\n    [CODEC.ENTRYPOINT]: entrypointNameDecoder,\n    [CODEC.TX_ROLLUP_ORIGINATION_PARAM]: txRollupOriginationParamDecoder,\n    [CODEC.TX_ROLLUP_ID]: txRollupIdDecoder,\n    [CODEC.TX_ROLLUP_BATCH_CONTENT]: txRollupBatchContentDecoder,\n    [CODEC.BURN_LIMIT]: burnLimitDecoder,\n    [CODEC.DEPOSITS_LIMIT]: depositsLimitDecoder,\n    [CODEC.PVM_KIND]: pvmKindDecoder,\n    [CODEC.PADDED_BYTES]: paddedBytesDecoder,\n    [CODEC.SMART_ROLLUP_MESSAGE]: smartRollupMessageDecoder,\n};\ndecoders[CODEC.OPERATION] = operationDecoder(decoders);\ndecoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val) => schemaDecoder(decoders)(ActivationSchema)(val);\ndecoders[CODEC.OP_FAILING_NOOP] = (val) => schemaDecoder(decoders)(FailingNoopSchema)(val);\ndecoders[CODEC.OP_DELEGATION] = (val) => schemaDecoder(decoders)(DelegationSchema)(val);\ndecoders[CODEC.OP_TRANSACTION] = (val) => schemaDecoder(decoders)(TransactionSchema)(val);\ndecoders[CODEC.OP_ORIGINATION] = (val) => schemaDecoder(decoders)(OriginationSchema)(val);\ndecoders[CODEC.OP_BALLOT] = (val) => schemaDecoder(decoders)(BallotSchema)(val);\ndecoders[CODEC.OP_ENDORSEMENT] = (val) => schemaDecoder(decoders)(EndorsementSchema)(val);\ndecoders[CODEC.OP_SEED_NONCE_REVELATION] = (val) => schemaDecoder(decoders)(SeedNonceRevelationSchema)(val);\ndecoders[CODEC.OP_PROPOSALS] = (val) => schemaDecoder(decoders)(ProposalsSchema)(val);\ndecoders[CODEC.OP_REVEAL] = (val) => schemaDecoder(decoders)(RevealSchema)(val);\ndecoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => schemaDecoder(decoders)(RegisterGlobalConstantSchema)(val);\ndecoders[CODEC.OP_TRANSFER_TICKET] = (val) => schemaDecoder(decoders)(TransferTicketSchema)(val);\ndecoders[CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => schemaDecoder(decoders)(TxRollupOriginationSchema)(val);\ndecoders[CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => schemaDecoder(decoders)(TxRollupSubmitBatchSchema)(val);\ndecoders[CODEC.OP_INCREASE_PAID_STORAGE] = (val) => schemaDecoder(decoders)(IncreasePaidStorageSchema)(val);\ndecoders[CODEC.OP_UPDATE_CONSENSUS_KEY] = (val) => schemaDecoder(decoders)(UpdateConsensusKeySchema)(val);\ndecoders[CODEC.OP_DRAIN_DELEGATE] = (val) => schemaDecoder(decoders)(DrainDelegateSchema)(val);\ndecoders[CODEC.OP_SMART_ROLLUP_ORIGINATE] = (val) => schemaDecoder(decoders)(SmartRollupOriginateSchema)(val);\ndecoders[CODEC.OP_SMART_ROLLUP_ADD_MESSAGES] = (val) => schemaDecoder(decoders)(SmartRollupAddMessagesSchema)(val);\ndecoders[CODEC.OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE] = (val) => schemaDecoder(decoders)(SmartRollupExecuteOutboxMessageSchema)(val);\ndecoders[CODEC.MANAGER] = schemaDecoder(decoders)(ManagerOperationSchema);\ndecoders[CODEC.OP_SET_DEPOSITS_LIMIT] = (val) => schemaDecoder(decoders)(SetDepositsLimitSchema)(val);\n\nconst encoders = {\n    [CODEC.SECRET]: (val) => val,\n    [CODEC.RAW]: (val) => val,\n    [CODEC.TZ1]: tz1Encoder,\n    [CODEC.BRANCH]: branchEncoder,\n    [CODEC.ZARITH]: zarithEncoder,\n    [CODEC.PUBLIC_KEY]: publicKeyEncoder,\n    [CODEC.PKH]: pkhEncoder,\n    [CODEC.DELEGATE]: delegateEncoder,\n    [CODEC.SCRIPT]: scriptEncoder,\n    [CODEC.BALLOT_STATEMENT]: ballotEncoder,\n    [CODEC.PROPOSAL]: proposalEncoder,\n    [CODEC.PROPOSAL_ARR]: proposalsEncoder,\n    [CODEC.INT32]: int32Encoder,\n    [CODEC.PARAMETERS]: parametersEncoder,\n    [CODEC.ADDRESS]: addressEncoder,\n    [CODEC.SMART_ROLLUP_ADDRESS]: smartRollupAddressEncoder,\n    [CODEC.SMART_CONTRACT_ADDRESS]: smartContractAddressEncoder,\n    [CODEC.SMART_ROLLUP_COMMITMENT_HASH]: smartRollupCommitmentHashEncoder,\n    [CODEC.VALUE]: valueParameterEncoder,\n    [CODEC.INT16]: int16Encoder,\n    [CODEC.BLOCK_PAYLOAD_HASH]: blockPayloadHashEncoder,\n    [CODEC.ENTRYPOINT]: entrypointNameEncoder,\n    [CODEC.TX_ROLLUP_ORIGINATION_PARAM]: txRollupOriginationParamEncoder,\n    [CODEC.TX_ROLLUP_ID]: txRollupIdEncoder,\n    [CODEC.TX_ROLLUP_BATCH_CONTENT]: txRollupBatchContentEncoder,\n    [CODEC.BURN_LIMIT]: burnLimitEncoder,\n    [CODEC.DEPOSITS_LIMIT]: depositsLimitEncoder,\n    [CODEC.PVM_KIND]: pvmKindEncoder,\n    [CODEC.PADDED_BYTES]: paddedBytesEncoder,\n    [CODEC.SMART_ROLLUP_MESSAGE]: smartRollupMessageEncoder,\n};\nencoders[CODEC.OPERATION] = operationEncoder(encoders);\nencoders[CODEC.OP_ACTIVATE_ACCOUNT] = (val) => schemaEncoder(encoders)(ActivationSchema)(val);\nencoders[CODEC.OP_DELEGATION] = (val) => schemaEncoder(encoders)(DelegationSchema)(val);\nencoders[CODEC.OP_TRANSACTION] = (val) => schemaEncoder(encoders)(TransactionSchema)(val);\nencoders[CODEC.OP_ORIGINATION] = (val) => schemaEncoder(encoders)(OriginationSchema)(val);\nencoders[CODEC.OP_BALLOT] = (val) => schemaEncoder(encoders)(BallotSchema)(val);\nencoders[CODEC.OP_ENDORSEMENT] = (val) => schemaEncoder(encoders)(EndorsementSchema)(val);\nencoders[CODEC.OP_SEED_NONCE_REVELATION] = (val) => schemaEncoder(encoders)(SeedNonceRevelationSchema)(val);\nencoders[CODEC.OP_PROPOSALS] = (val) => schemaEncoder(encoders)(ProposalsSchema)(val);\nencoders[CODEC.OP_REVEAL] = (val) => schemaEncoder(encoders)(RevealSchema)(val);\nencoders[CODEC.OP_REGISTER_GLOBAL_CONSTANT] = (val) => schemaEncoder(encoders)(RegisterGlobalConstantSchema)(val);\nencoders[CODEC.OP_TRANSFER_TICKET] = (val) => schemaEncoder(encoders)(TransferTicketSchema)(val);\nencoders[CODEC.OP_TX_ROLLUP_ORIGINATION] = (val) => schemaEncoder(encoders)(TxRollupOriginationSchema)(val);\nencoders[CODEC.OP_TX_ROLLUP_SUBMIT_BATCH] = (val) => schemaEncoder(encoders)(TxRollupSubmitBatchSchema)(val);\nencoders[CODEC.OP_INCREASE_PAID_STORAGE] = (val) => schemaEncoder(encoders)(IncreasePaidStorageSchema)(val);\nencoders[CODEC.OP_UPDATE_CONSENSUS_KEY] = (val) => schemaEncoder(encoders)(UpdateConsensusKeySchema)(val);\nencoders[CODEC.OP_DRAIN_DELEGATE] = (val) => schemaEncoder(encoders)(DrainDelegateSchema)(val);\nencoders[CODEC.OP_SMART_ROLLUP_ORIGINATE] = (val) => schemaEncoder(encoders)(SmartRollupOriginateSchema)(val);\nencoders[CODEC.OP_SMART_ROLLUP_ADD_MESSAGES] = (val) => schemaEncoder(encoders)(SmartRollupAddMessagesSchema)(val);\nencoders[CODEC.OP_SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE] = (val) => schemaEncoder(encoders)(SmartRollupExecuteOutboxMessageSchema)(val);\nencoders[CODEC.MANAGER] = schemaEncoder(encoders)(ManagerOperationSchema);\nencoders[CODEC.OP_SET_DEPOSITS_LIMIT] = (val) => schemaEncoder(encoders)(SetDepositsLimitSchema)(val);\nencoders[CODEC.OP_FAILING_NOOP] = (val) => schemaEncoder(encoders)(FailingNoopSchema)(val);\n\nconst OperationKindMapping = {\n    activate_account: ActivationSchema,\n    reveal: RevealSchema,\n    delegation: DelegationSchema,\n    transaction: TransactionSchema,\n    origination: OriginationSchema,\n    ballot: BallotSchema,\n    endorsement: EndorsementSchema,\n    seed_nonce_revelation: SeedNonceRevelationSchema,\n    proposals: ProposalsSchema,\n    register_global_constant: RegisterGlobalConstantSchema,\n    transfer_ticket: TransferTicketSchema,\n    tx_rollup_origination: TxRollupOriginationSchema,\n    tx_rollup_submit_batch: TxRollupSubmitBatchSchema,\n    increase_paid_storage: IncreasePaidStorageSchema,\n    update_consensus_key: UpdateConsensusKeySchema,\n    drain_delegate: DrainDelegateSchema,\n    set_deposits_limit: SetDepositsLimitSchema,\n    smart_rollup_originate: SmartRollupOriginateSchema,\n    smart_rollup_add_messages: SmartRollupAddMessagesSchema,\n    smart_rollup_execute_outbox_message: SmartRollupExecuteOutboxMessageSchema,\n    failing_noop: FailingNoopSchema,\n};\n// Asymmetric difference: only account for things in arr2 that are not present in arr1, not vice versa\nconst getArrayDifference = (arr1, arr2) => {\n    return arr2.filter((x) => !arr1.includes(x));\n};\nconst deleteArrayElementByValue = (array, item) => {\n    return array.filter((e) => e !== item);\n};\n/**\n * @returns A boolean value to indicate whether the operation kind is valid or not\n */\nconst validateOperationKind = (opKind) => {\n    const opKindList = Object.keys(OperationKindMapping);\n    return opKindList.includes(opKind);\n};\n/**\n *  returns 0 when the two array of properties are identical or the passed property\n *  does not have any missing parameters from the corresponding schema\n *\n *  @returns array element differences if there are missing required property keys\n */\nconst validateMissingProperty = (operationContent) => {\n    const kind = operationContent.kind;\n    const keys = Object.keys(operationContent);\n    const cleanKeys = deleteArrayElementByValue(keys, 'kind');\n    const schemaKeys = Object.keys(OperationKindMapping[kind]);\n    return getArrayDifference(cleanKeys, schemaKeys);\n};\n\nvar ProtocolsHash;\n(function (ProtocolsHash) {\n    ProtocolsHash[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n    ProtocolsHash[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n    ProtocolsHash[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n    ProtocolsHash[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n    ProtocolsHash[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n    ProtocolsHash[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n    ProtocolsHash[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n    ProtocolsHash[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n    ProtocolsHash[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n    ProtocolsHash[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n    ProtocolsHash[\"PtJakart2\"] = \"PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY\";\n    ProtocolsHash[\"PtKathman\"] = \"PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg\";\n    ProtocolsHash[\"PtLimaPtL\"] = \"PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW\";\n    ProtocolsHash[\"PtMumbaii\"] = \"PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc\";\n    ProtocolsHash[\"PtMumbai2\"] = \"PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1\";\n    ProtocolsHash[\"PtNairobi\"] = \"PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf\";\n    ProtocolsHash[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(ProtocolsHash || (ProtocolsHash = {}));\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n/**\n * @packageDocumentation\n * @module @taquito/local-forging\n */\nconst PROTOCOL_CURRENT = ProtocolsHash.PtMumbai2;\nfunction getCodec(codec, _proto) {\n    return {\n        encoder: encoders[codec],\n        decoder: (hex) => {\n            const consumer = Uint8ArrayConsumer.fromHexString(hex);\n            return decoders[codec](consumer);\n        },\n    };\n}\nclass LocalForger {\n    constructor(protocolHash = PROTOCOL_CURRENT) {\n        this.protocolHash = protocolHash;\n        this.codec = getCodec(CODEC.MANAGER, this.protocolHash);\n    }\n    forge(params) {\n        const branchValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.validateBlock)(params.branch);\n        if (branchValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_0__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidBlockHashError(params.branch, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_0__.invalidDetail)(branchValidation));\n        }\n        for (const content of params.contents) {\n            if (!validateOperationKind(content.kind)) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidOperationKindError(content.kind);\n            }\n            const diff = validateMissingProperty(content);\n            if (diff.length === 1) {\n                if (content.kind === 'delegation' && diff[0] === 'delegate') {\n                    continue;\n                }\n                else if (content.kind === 'origination' && diff[0] === 'delegate') {\n                    continue;\n                }\n                else if (content.kind === 'transaction' && diff[0] === 'parameters') {\n                    continue;\n                }\n                else if (content.kind === 'set_deposits_limit' && diff[0] === 'limit') {\n                    continue;\n                }\n                else if (content.kind === 'tx_rollup_submit_batch' &&\n                    diff[0] === 'burn_limit') {\n                    continue;\n                }\n                else {\n                    throw new InvalidOperationSchemaError(content, `missing properties \"${diff.join(', ')}\"`);\n                }\n            }\n            else if (diff.length > 1) {\n                throw new InvalidOperationSchemaError(content, `missing properties \"${diff.join(', ')}\"`);\n            }\n        }\n        const forged = this.codec.encoder(params).toLowerCase();\n        return Promise.resolve(forged);\n    }\n    parse(hex) {\n        return Promise.resolve(this.codec.decoder(hex));\n    }\n}\nconst localForger = new LocalForger();\n\n\n//# sourceMappingURL=taquito-local-forging.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/local-forging/dist/taquito-local-forging.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/michel-codec/dist/taquito-michel-codec.es6.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@taquito/michel-codec/dist/taquito-michel-codec.es6.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   DefaultProtocol: () => (/* binding */ DefaultProtocol),\n/* harmony export */   JSONParseError: () => (/* binding */ JSONParseError),\n/* harmony export */   MacroError: () => (/* binding */ MacroError),\n/* harmony export */   MichelineParseError: () => (/* binding */ MichelineParseError),\n/* harmony export */   MichelsonError: () => (/* binding */ MichelsonError),\n/* harmony export */   MichelsonInstructionError: () => (/* binding */ MichelsonInstructionError),\n/* harmony export */   MichelsonTypeError: () => (/* binding */ MichelsonTypeError),\n/* harmony export */   MichelsonValidationError: () => (/* binding */ MichelsonValidationError),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   ProtoGreaterOrEqual: () => (/* binding */ ProtoGreaterOrEqual),\n/* harmony export */   ProtoInferiorTo: () => (/* binding */ ProtoInferiorTo),\n/* harmony export */   Protocol: () => (/* binding */ Protocol),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   assertContractValid: () => (/* binding */ assertContractValid),\n/* harmony export */   assertDataListIfAny: () => (/* binding */ assertDataListIfAny),\n/* harmony export */   assertDataValid: () => (/* binding */ assertDataValid),\n/* harmony export */   assertMichelsonBigMapStorableType: () => (/* binding */ assertMichelsonBigMapStorableType),\n/* harmony export */   assertMichelsonComparableType: () => (/* binding */ assertMichelsonComparableType),\n/* harmony export */   assertMichelsonContract: () => (/* binding */ assertMichelsonContract),\n/* harmony export */   assertMichelsonData: () => (/* binding */ assertMichelsonData),\n/* harmony export */   assertMichelsonInstruction: () => (/* binding */ assertMichelsonInstruction),\n/* harmony export */   assertMichelsonPackableType: () => (/* binding */ assertMichelsonPackableType),\n/* harmony export */   assertMichelsonPassableType: () => (/* binding */ assertMichelsonPassableType),\n/* harmony export */   assertMichelsonPushableType: () => (/* binding */ assertMichelsonPushableType),\n/* harmony export */   assertMichelsonStorableType: () => (/* binding */ assertMichelsonStorableType),\n/* harmony export */   assertMichelsonType: () => (/* binding */ assertMichelsonType),\n/* harmony export */   assertTypeAnnotationsValid: () => (/* binding */ assertTypeAnnotationsValid),\n/* harmony export */   assertTypesEqual: () => (/* binding */ assertTypesEqual),\n/* harmony export */   assertViewNameValid: () => (/* binding */ assertViewNameValid),\n/* harmony export */   contractEntryPoint: () => (/* binding */ contractEntryPoint),\n/* harmony export */   contractEntryPoints: () => (/* binding */ contractEntryPoints),\n/* harmony export */   contractSection: () => (/* binding */ contractSection),\n/* harmony export */   contractViews: () => (/* binding */ contractViews),\n/* harmony export */   decodeAddressBytes: () => (/* binding */ decodeAddressBytes),\n/* harmony export */   decodePublicKeyBytes: () => (/* binding */ decodePublicKeyBytes),\n/* harmony export */   decodePublicKeyHashBytes: () => (/* binding */ decodePublicKeyHashBytes),\n/* harmony export */   dummyContract: () => (/* binding */ dummyContract),\n/* harmony export */   emitMicheline: () => (/* binding */ emitMicheline),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   formatStack: () => (/* binding */ formatStack),\n/* harmony export */   functionType: () => (/* binding */ functionType),\n/* harmony export */   instructionIDs: () => (/* binding */ instructionIDs),\n/* harmony export */   isContractValid: () => (/* binding */ isContractValid),\n/* harmony export */   isDataValid: () => (/* binding */ isDataValid),\n/* harmony export */   isInstruction: () => (/* binding */ isInstruction),\n/* harmony export */   isMichelsonCode: () => (/* binding */ isMichelsonCode),\n/* harmony export */   isMichelsonData: () => (/* binding */ isMichelsonData),\n/* harmony export */   isMichelsonError: () => (/* binding */ isMichelsonError),\n/* harmony export */   isMichelsonScript: () => (/* binding */ isMichelsonScript),\n/* harmony export */   isMichelsonType: () => (/* binding */ isMichelsonType),\n/* harmony export */   isTypeAnnotationsValid: () => (/* binding */ isTypeAnnotationsValid),\n/* harmony export */   isTypeEqual: () => (/* binding */ isTypeEqual),\n/* harmony export */   packData: () => (/* binding */ packData),\n/* harmony export */   packDataBytes: () => (/* binding */ packDataBytes),\n/* harmony export */   refContract: () => (/* binding */ refContract),\n/* harmony export */   sourceReference: () => (/* binding */ sourceReference),\n/* harmony export */   traceDumpFunc: () => (/* binding */ traceDumpFunc),\n/* harmony export */   unpackData: () => (/* binding */ unpackData),\n/* harmony export */   unpackDataBytes: () => (/* binding */ unpackDataBytes)\n/* harmony export */ });\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n\n\n// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\nconst sourceReference = Symbol('source_reference');\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when performing the scan step when parsing Michelson\n */\nclass ScanError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    constructor(src, idx, message) {\n        super();\n        this.src = src;\n        this.idx = idx;\n        this.message = message;\n        this.name = 'ScanError';\n    }\n}\nvar Literal;\n(function (Literal) {\n    Literal[Literal[\"Comment\"] = 0] = \"Comment\";\n    Literal[Literal[\"Number\"] = 1] = \"Number\";\n    Literal[Literal[\"String\"] = 2] = \"String\";\n    Literal[Literal[\"Bytes\"] = 3] = \"Bytes\";\n    Literal[Literal[\"Ident\"] = 4] = \"Ident\";\n})(Literal || (Literal = {}));\nconst isSpace = new RegExp('\\\\s');\nconst isIdentStart = new RegExp('[:@%_A-Za-z]');\nconst isIdent = new RegExp('[@%_\\\\.A-Za-z0-9]');\nconst isDigit = new RegExp('[0-9]');\nconst isHex = new RegExp('[0-9a-fA-F]');\nfunction* scan(src, scanComments = false) {\n    let i = 0;\n    while (i < src.length) {\n        // Skip space\n        while (i < src.length && isSpace.test(src[i])) {\n            i++;\n        }\n        if (i === src.length) {\n            return;\n        }\n        const s = src[i];\n        const start = i;\n        if (isIdentStart.test(s)) {\n            // Identifier\n            i++;\n            while (i < src.length && isIdent.test(src[i])) {\n                i++;\n            }\n            yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n        }\n        else if (src.length - i > 1 && src.substring(i, i + 2) === '0x') {\n            // Bytes\n            i += 2;\n            while (i < src.length && isHex.test(src[i])) {\n                i++;\n            }\n            if (((i - start) & 1) !== 0) {\n                throw new ScanError(src, i, 'Bytes literal length is expected to be power of two');\n            }\n            yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n        }\n        else if (isDigit.test(s) || s === '-') {\n            // Number\n            if (s === '-') {\n                i++;\n            }\n            const ii = i;\n            while (i < src.length && isDigit.test(src[i])) {\n                i++;\n            }\n            if (ii === i) {\n                throw new ScanError(src, i, 'Number literal is too short');\n            }\n            yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n        }\n        else if (s === '\"') {\n            // String\n            i++;\n            let esc = false;\n            for (; i < src.length && (esc || src[i] !== '\"'); i++) {\n                if (!esc && src[i] === '\\\\') {\n                    esc = true;\n                }\n                else {\n                    esc = false;\n                }\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, 'Unterminated string literal');\n            }\n            i++;\n            yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n        }\n        else if (s === '#') {\n            // Comment\n            i++;\n            while (i < src.length && src[i] !== '\\n') {\n                i++;\n            }\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        }\n        else if (src.length - i > 1 && src.substring(i, i + 2) === '/*') {\n            // C style comment\n            i += 2;\n            while (i < src.length && !(src.length - i > 1 && src.substring(i, i + 2) === '*/')) {\n                i++;\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, 'Unterminated C style comment');\n            }\n            i += 2;\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        }\n        else if (s === '(' || s === ')' || s === '{' || s === '}' || s === ';') {\n            i++;\n            yield { t: s, v: s, first: start, last: i };\n        }\n        else {\n            throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n        }\n    }\n}\n\n// Michelson types\nconst refContract = Symbol('ref_contract');\nvar Protocol;\n(function (Protocol) {\n    Protocol[\"Ps9mPmXa\"] = \"Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P\";\n    Protocol[\"PtCJ7pwo\"] = \"PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY\";\n    Protocol[\"PsYLVpVv\"] = \"PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt\";\n    Protocol[\"PsddFKi3\"] = \"PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP\";\n    Protocol[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n    Protocol[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n    Protocol[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n    Protocol[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n    Protocol[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n    Protocol[\"PtEdoTez\"] = \"PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq\";\n    Protocol[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n    Protocol[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n    Protocol[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n    Protocol[\"PtHangzH\"] = \"PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r\";\n    Protocol[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n    Protocol[\"PsiThaCa\"] = \"PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP\";\n    Protocol[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n    Protocol[\"PtJakarta\"] = \"PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw\";\n    Protocol[\"PtJakart2\"] = \"PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY\";\n    Protocol[\"PtKathman\"] = \"PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg\";\n    Protocol[\"PtLimaPtL\"] = \"PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW\";\n    Protocol[\"PtMumbaii\"] = \"PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc\";\n    Protocol[\"PtMumbai2\"] = \"PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1\";\n    Protocol[\"PtNairobi\"] = \"PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf\";\n    Protocol[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(Protocol || (Protocol = {}));\nconst DefaultProtocol = Protocol.Psithaca2;\nconst protoLevel = {\n    Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P: 0,\n    PtCJ7pwoxe8JasnHY8YonnLYjcVHmhiARPJvqcC6VfHT5s8k8sY: 1,\n    PsYLVpVvgbLhAhoqAkMFUo6gudkJ9weNXhUYCiLDzcUpFpkk8Wt: 2,\n    PsddFKi32cMJ2qPjf43Qv5GDWLDPZb3T3bF6fLKiF5HtvHNU7aP: 3,\n    Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd: 4,\n    PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU: 5,\n    PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS: 5,\n    PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb: 6,\n    PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo: 7,\n    PtEdoTezd3RHSC31mpxxo1npxFjoWWcFgQtxapi51Z8TLu6v6Uq: 8,\n    PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA: 8,\n    PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i: 9,\n    PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV: 10,\n    PtHangzHogokSuiMHemCuowEavgYTP8J5qQ9fQS793MHYFpCY3r: 11,\n    PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx: 11,\n    PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP: 12,\n    Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A: 12,\n    PtJakartaiDz69SfDDLXJSiuZqTSeSKRDbKVZC8MNzJnvRjvnGw: 13,\n    PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY: 13,\n    PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg: 14,\n    PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW: 15,\n    PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc: 16,\n    PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1: 16,\n    PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf: 17,\n    ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK: 18,\n};\nfunction ProtoGreaterOrEqual(a, b) {\n    return protoLevel[a] >= protoLevel[b];\n}\nfunction ProtoInferiorTo(a, b) {\n    return protoLevel[a] < protoLevel[b];\n}\n\n/**\n *  @category Error\n *  @description Error that indicates macros failed to be expanded\n */\nclass MacroError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    constructor(prim, message) {\n        super();\n        this.prim = prim;\n        this.message = message;\n        this.name = 'MacroError';\n    }\n}\nfunction assertArgs$1(ex, n) {\n    var _a, _b;\n    if ((n === 0 && ex.args === undefined) || ((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === n) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${(_b = ex.args) === null || _b === void 0 ? void 0 : _b.length}`);\n}\nfunction assertNoAnnots(ex) {\n    if (ex.annots === undefined) {\n        return true;\n    }\n    throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\nfunction assertIntArg(ex, arg) {\n    if ('int' in arg) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\nfunction parsePairUnpairExpr(p, expr, annotations, agg) {\n    let i = 0;\n    let ai = 0;\n    const ann = [null, null];\n    // Left expression\n    let lexpr;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    let c = expr[i++];\n    switch (c) {\n        case 'P': {\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            lexpr = r;\n            i += n;\n            ai += an;\n            break;\n        }\n        case 'A':\n            if (ai !== annotations.length) {\n                ann[0] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n    // Right expression\n    let rexpr;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    c = expr[i++];\n    switch (c) {\n        case 'P': {\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            rexpr = r.map(([v, a]) => [v + 1, a]);\n            i += n;\n            ai += an;\n            break;\n        }\n        case 'I':\n            if (ai !== annotations.length) {\n                ann[1] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n    return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\nfunction parseSetMapCadr(p, expr, vann, term) {\n    const c = expr[0];\n    switch (c) {\n        case 'A':\n            return expr.length > 1\n                ? [\n                    { prim: 'DUP' },\n                    {\n                        prim: 'DIP',\n                        args: [\n                            [{ prim: 'CAR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n                        ],\n                    },\n                    { prim: 'CDR', annots: ['@%%'] },\n                    { prim: 'SWAP' },\n                    { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n                ]\n                : term.a;\n        case 'D':\n            return expr.length > 1\n                ? [\n                    { prim: 'DUP' },\n                    {\n                        prim: 'DIP',\n                        args: [\n                            [{ prim: 'CDR', annots: ['@%%'] }, parseSetMapCadr(p, expr.slice(1), [], term)],\n                        ],\n                    },\n                    { prim: 'CAR', annots: ['@%%'] },\n                    { prim: 'PAIR', annots: ['%@', '%@', ...vann] },\n                ]\n                : term.d;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n}\nfunction trimLast(a, v) {\n    let l = a.length;\n    while (l > 0 && a[l - 1] === v) {\n        l--;\n    }\n    return a.slice(0, l);\n}\nfunction filterAnnotations(a) {\n    const fields = [];\n    const rest = [];\n    if (a !== undefined) {\n        for (const v of a) {\n            (v.length !== 0 && v[0] === '%' ? fields : rest).push(v);\n        }\n    }\n    return { fields, rest };\n}\nfunction mkPrim({ prim, annots, args }) {\n    return Object.assign(Object.assign({ prim }, (annots && { annots })), (args && { args }));\n}\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\nfunction expandMacros(ex, opt) {\n    const proto = (opt === null || opt === void 0 ? void 0 : opt.protocol) || DefaultProtocol;\n    function mayRename(annots) {\n        return annots !== undefined ? [{ prim: 'RENAME', annots }] : [];\n    }\n    switch (ex.prim) {\n        // Compare\n        case 'CMPEQ':\n        case 'CMPNEQ':\n        case 'CMPLT':\n        case 'CMPGT':\n        case 'CMPLE':\n        case 'CMPGE':\n            if (assertArgs$1(ex, 0)) {\n                return [{ prim: 'COMPARE' }, mkPrim({ prim: ex.prim.slice(3), annots: ex.annots })];\n            }\n            break;\n        case 'IFEQ':\n        case 'IFNEQ':\n        case 'IFLT':\n        case 'IFGT':\n        case 'IFLE':\n        case 'IFGE':\n            if (assertArgs$1(ex, 2)) {\n                return [\n                    { prim: ex.prim.slice(2) },\n                    mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n        case 'IFCMPEQ':\n        case 'IFCMPNEQ':\n        case 'IFCMPLT':\n        case 'IFCMPGT':\n        case 'IFCMPLE':\n        case 'IFCMPGE':\n            if (assertArgs$1(ex, 2)) {\n                return [\n                    { prim: 'COMPARE' },\n                    { prim: ex.prim.slice(5) },\n                    mkPrim({ prim: 'IF', annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n        // Fail\n        case 'FAIL':\n            if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n                return [{ prim: 'UNIT' }, { prim: 'FAILWITH' }];\n            }\n            break;\n        // Assertion macros\n        case 'ASSERT':\n            if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    {\n                        prim: 'IF',\n                        args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_EQ':\n        case 'ASSERT_NEQ':\n        case 'ASSERT_LT':\n        case 'ASSERT_GT':\n        case 'ASSERT_LE':\n        case 'ASSERT_GE':\n            if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    { prim: ex.prim.slice(7) },\n                    {\n                        prim: 'IF',\n                        args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_CMPEQ':\n        case 'ASSERT_CMPNEQ':\n        case 'ASSERT_CMPLT':\n        case 'ASSERT_CMPGT':\n        case 'ASSERT_CMPLE':\n        case 'ASSERT_CMPGE':\n            if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    [{ prim: 'COMPARE' }, { prim: ex.prim.slice(10) }],\n                    {\n                        prim: 'IF',\n                        args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_NONE':\n            if (assertArgs$1(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    {\n                        prim: 'IF_NONE',\n                        args: [[], [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_SOME':\n            if (assertArgs$1(ex, 0)) {\n                return [\n                    {\n                        prim: 'IF_NONE',\n                        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_LEFT':\n            if (assertArgs$1(ex, 0)) {\n                return [\n                    {\n                        prim: 'IF_LEFT',\n                        args: [mayRename(ex.annots), [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]]],\n                    },\n                ];\n            }\n            break;\n        case 'ASSERT_RIGHT':\n            if (assertArgs$1(ex, 0)) {\n                return [\n                    {\n                        prim: 'IF_LEFT',\n                        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], mayRename(ex.annots)],\n                    },\n                ];\n            }\n            break;\n        // Syntactic conveniences\n        case 'IF_SOME':\n            if (assertArgs$1(ex, 2)) {\n                return [mkPrim({ prim: 'IF_NONE', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n            break;\n        case 'IF_RIGHT':\n            if (assertArgs$1(ex, 2)) {\n                return [mkPrim({ prim: 'IF_LEFT', annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n            break;\n        // CAR/CDR n\n        case 'CAR':\n        case 'CDR':\n            if (ex.args !== undefined) {\n                if (assertArgs$1(ex, 1) && assertIntArg(ex, ex.args[0])) {\n                    const n = parseInt(ex.args[0].int, 10);\n                    return mkPrim({\n                        prim: 'GET',\n                        args: [{ int: ex.prim === 'CAR' ? String(n * 2 + 1) : String(n * 2) }],\n                        annots: ex.annots,\n                    });\n                }\n            }\n            else {\n                return ex;\n            }\n    }\n    // More syntactic conveniences\n    // PAPPAIIR macro\n    if (pairRe.test(ex.prim)) {\n        if (assertArgs$1(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [\n                ...(l || []),\n                ...(r || []),\n                top,\n            ]);\n            return r.map(([v, a], i) => {\n                const ann = [\n                    ...trimLast(a, null).map((v) => (v === null ? '%' : v)),\n                    ...(v === 0 && i === r.length - 1 ? rest : []),\n                ];\n                const leaf = mkPrim({ prim: 'PAIR', annots: ann.length !== 0 ? ann : undefined });\n                return v === 0\n                    ? leaf\n                    : {\n                        prim: 'DIP',\n                        args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                    };\n            });\n        }\n    }\n    // UNPAPPAIIR macro\n    if (unpairRe.test(ex.prim)) {\n        if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk) && assertArgs$1(ex, 0)) {\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [\n                top,\n                ...(r || []),\n                ...(l || []),\n            ]);\n            return r.map(([v, a]) => {\n                const leaf = [\n                    { prim: 'DUP' },\n                    mkPrim({ prim: 'CAR', annots: a[0] !== null ? [a[0]] : undefined }),\n                    {\n                        prim: 'DIP',\n                        args: [[mkPrim({ prim: 'CDR', annots: a[1] !== null ? [a[1]] : undefined })]],\n                    },\n                ];\n                return v === 0\n                    ? leaf\n                    : {\n                        prim: 'DIP',\n                        args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                    };\n            });\n        }\n        else {\n            if (ex.prim === 'UNPAIR') {\n                return ex;\n            }\n            if (assertArgs$1(ex, 0)) {\n                // 008_edo: annotations are deprecated\n                const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), [], (l, r, top) => [\n                    top,\n                    ...(r || []),\n                    ...(l || []),\n                ]);\n                return r.map(([v]) => {\n                    const leaf = mkPrim({\n                        prim: 'UNPAIR',\n                    });\n                    return v === 0\n                        ? leaf\n                        : {\n                            prim: 'DIP',\n                            args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                        };\n                });\n            }\n        }\n    }\n    // C[AD]+R macro\n    if (cadrRe.test(ex.prim)) {\n        if (assertArgs$1(ex, 0)) {\n            const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n            return ch.map((c, i) => {\n                const ann = i === ch.length - 1 ? ex.annots : undefined;\n                switch (c) {\n                    case 'A':\n                        return mkPrim({ prim: 'CAR', annots: ann });\n                    case 'D':\n                        return mkPrim({ prim: 'CDR', annots: ann });\n                    default:\n                        throw new MacroError(ex, `unexpected character: ${c}`);\n                }\n            });\n        }\n    }\n    // SET_C[AD]+R macro\n    if (setCadrRe.test(ex.prim)) {\n        if (assertArgs$1(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n            const term = fields.length !== 0\n                ? {\n                    a: [\n                        { prim: 'DUP' },\n                        { prim: 'CAR', annots: fields },\n                        { prim: 'DROP' },\n                        { prim: 'CDR', annots: ['@%%'] },\n                        { prim: 'SWAP' },\n                        { prim: 'PAIR', annots: [fields[0], '%@'] },\n                    ],\n                    d: [\n                        { prim: 'DUP' },\n                        { prim: 'CDR', annots: fields },\n                        { prim: 'DROP' },\n                        { prim: 'CAR', annots: ['@%%'] },\n                        { prim: 'PAIR', annots: ['%@', fields[0]] },\n                    ],\n                }\n                : {\n                    a: [\n                        { prim: 'CDR', annots: ['@%%'] },\n                        { prim: 'SWAP' },\n                        { prim: 'PAIR', annots: ['%', '%@'] },\n                    ],\n                    d: [\n                        { prim: 'CAR', annots: ['@%%'] },\n                        { prim: 'PAIR', annots: ['%@', '%'] },\n                    ],\n                };\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n        }\n    }\n    // MAP_C[AD]+R macro\n    if (mapCadrRe.test(ex.prim)) {\n        if (assertArgs$1(ex, 1)) {\n            const { fields } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n            const term = {\n                a: [\n                    { prim: 'DUP' },\n                    { prim: 'CDR', annots: ['@%%'] },\n                    {\n                        prim: 'DIP',\n                        args: [\n                            [\n                                mkPrim({\n                                    prim: 'CAR',\n                                    annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n                                }),\n                                ex.args[0],\n                            ],\n                        ],\n                    },\n                    { prim: 'SWAP' },\n                    { prim: 'PAIR', annots: [fields.length !== 0 ? fields[0] : '%', '%@'] },\n                ],\n                d: [\n                    { prim: 'DUP' },\n                    mkPrim({\n                        prim: 'CDR',\n                        annots: fields.length !== 0 ? ['@' + fields[0].slice(1)] : undefined,\n                    }),\n                    ex.args[0],\n                    { prim: 'SWAP' },\n                    { prim: 'CAR', annots: ['@%%'] },\n                    { prim: 'PAIR', annots: ['%@', fields.length !== 0 ? fields[0] : '%'] },\n                ],\n            };\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n        }\n    }\n    // Expand deprecated DI...IP to [DIP n]\n    if (diipRe.test(ex.prim)) {\n        if (assertArgs$1(ex, 1)) {\n            let n = 0;\n            while (ex.prim[1 + n] === 'I') {\n                n++;\n            }\n            return mkPrim({ prim: 'DIP', args: [{ int: String(n) }, ex.args[0]] });\n        }\n    }\n    // Expand DU...UP and DUP n\n    if (duupRe.test(ex.prim)) {\n        let n = 0;\n        while (ex.prim[1 + n] === 'U') {\n            n++;\n        }\n        if (ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n            if (n === 1) {\n                if (ex.args === undefined) {\n                    return ex; // skip\n                }\n                if (assertArgs$1(ex, 1) && assertIntArg(ex, ex.args[0])) {\n                    n = parseInt(ex.args[0].int, 10);\n                }\n            }\n            else {\n                assertArgs$1(ex, 0);\n            }\n            if (n === 1) {\n                return [mkPrim({ prim: 'DUP', annots: ex.annots })];\n            }\n            else if (n === 2) {\n                return [\n                    {\n                        prim: 'DIP',\n                        args: [[mkPrim({ prim: 'DUP', annots: ex.annots })]],\n                    },\n                    { prim: 'SWAP' },\n                ];\n            }\n            else {\n                return [\n                    {\n                        prim: 'DIP',\n                        args: [{ int: String(n - 1) }, [mkPrim({ prim: 'DUP', annots: ex.annots })]],\n                    },\n                    {\n                        prim: 'DIG',\n                        args: [{ int: String(n) }],\n                    },\n                ];\n            }\n        }\n        else {\n            if (n === 1) {\n                return ex;\n            }\n            if (assertArgs$1(ex, 0)) {\n                return mkPrim({ prim: 'DUP', args: [{ int: String(n) }], annots: ex.annots });\n            }\n        }\n    }\n    return ex;\n}\n\nfunction expandGlobalConstants(ex, hashAndValue) {\n    if (ex.args !== undefined &&\n        ex.args.length === 1 &&\n        'string' in ex.args[0] &&\n        ex.args[0].string in hashAndValue) {\n        return hashAndValue[ex.args[0].string];\n    }\n    return ex;\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when parsing Micheline expressions\n */\nclass MichelineParseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    /**\n     * @param token A token caused the error\n     * @param message An error message\n     */\n    constructor(token, message) {\n        super();\n        this.token = token;\n        this.message = message;\n        this.name = 'MichelineParseError';\n    }\n}\n/**\n *  @category Error\n *  @description Error indicates a failure when parsing Micheline JSON\n */\nclass JSONParseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    /**\n     * @param node A node caused the error\n     * @param message An error message\n     */\n    constructor(node, message) {\n        super();\n        this.node = node;\n        this.message = message;\n        this.name = 'JSONParseError';\n    }\n}\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\nfunction isAnnotation(tok) {\n    return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for initial storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nclass Parser {\n    constructor(opt) {\n        this.opt = opt;\n    }\n    expand(ex) {\n        var _a, _b, _c;\n        if (((_a = this.opt) === null || _a === void 0 ? void 0 : _a.expandGlobalConstant) !== undefined && ex.prim === 'constant') {\n            const ret = expandGlobalConstants(ex, this.opt.expandGlobalConstant);\n            if (ret !== ex) {\n                ret[sourceReference] = Object.assign(Object.assign({}, (ex[sourceReference] || { first: 0, last: 0 })), { globalConstant: ex });\n            }\n            return ret;\n        }\n        if (((_b = this.opt) === null || _b === void 0 ? void 0 : _b.expandMacros) !== undefined ? (_c = this.opt) === null || _c === void 0 ? void 0 : _c.expandMacros : true) {\n            const ret = expandMacros(ex, this.opt);\n            if (ret !== ex) {\n                ret[sourceReference] = Object.assign(Object.assign({}, (ex[sourceReference] || { first: 0, last: 0 })), { macro: ex });\n            }\n            return ret;\n        }\n        else {\n            return ex;\n        }\n    }\n    parseListExpr(scanner, start) {\n        var _a;\n        const ref = {\n            first: start.first,\n            last: start.last,\n        };\n        const expectBracket = start.t === '(';\n        let tok;\n        if (expectBracket) {\n            tok = scanner.next();\n            if (tok.done) {\n                throw errEOF;\n            }\n            ref.last = tok.value.last;\n        }\n        else {\n            tok = { value: start };\n        }\n        if (tok.value.t !== Literal.Ident) {\n            throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n        }\n        const ret = {\n            prim: tok.value.v,\n            [sourceReference]: ref,\n        };\n        for (;;) {\n            const tok = scanner.next();\n            if (tok.done) {\n                if (expectBracket) {\n                    throw errEOF;\n                }\n                break;\n            }\n            else if (tok.value.t === ')') {\n                if (!expectBracket) {\n                    throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n                }\n                ref.last = tok.value.last;\n                break;\n            }\n            else if (isAnnotation(tok.value)) {\n                ret.annots = ret.annots || [];\n                ret.annots.push(tok.value.v);\n                ref.last = tok.value.last;\n            }\n            else {\n                ret.args = ret.args || [];\n                const arg = this.parseExpr(scanner, tok.value);\n                ref.last = ((_a = arg[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n                ret.args.push(arg);\n            }\n        }\n        return this.expand(ret);\n    }\n    parseArgs(scanner, start) {\n        var _a;\n        // Identifier with arguments\n        const ref = {\n            first: start.first,\n            last: start.last,\n        };\n        const p = {\n            prim: start.v,\n            [sourceReference]: ref,\n        };\n        for (;;) {\n            const t = scanner.next();\n            if (t.done || t.value.t === '}' || t.value.t === ';') {\n                return [p, t];\n            }\n            if (isAnnotation(t.value)) {\n                ref.last = t.value.last;\n                p.annots = p.annots || [];\n                p.annots.push(t.value.v);\n            }\n            else {\n                const arg = this.parseExpr(scanner, t.value);\n                ref.last = ((_a = arg[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n                p.args = p.args || [];\n                p.args.push(arg);\n            }\n        }\n    }\n    parseSequenceExpr(scanner, start) {\n        var _a, _b;\n        const ref = {\n            first: start.first,\n            last: start.last,\n        };\n        const seq = [];\n        seq[sourceReference] = ref;\n        const expectBracket = start.t === '{';\n        let tok = start.t === '{' ? null : { value: start };\n        for (;;) {\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (tok.done) {\n                if (expectBracket) {\n                    throw errEOF;\n                }\n                else {\n                    return seq;\n                }\n            }\n            if (tok.value.t === '}') {\n                if (!expectBracket) {\n                    throw new MichelineParseError(tok.value, 'unexpected closing bracket');\n                }\n                else {\n                    return seq;\n                }\n            }\n            else if (tok.value.t === Literal.Ident) {\n                // Identifier with arguments\n                const [itm, n] = this.parseArgs(scanner, tok.value);\n                ref.last = ((_a = itm[sourceReference]) === null || _a === void 0 ? void 0 : _a.last) || ref.last;\n                seq.push(this.expand(itm));\n                tok = n;\n            }\n            else {\n                // Other\n                const ex = this.parseExpr(scanner, tok.value);\n                ref.last = ((_b = ex[sourceReference]) === null || _b === void 0 ? void 0 : _b.last) || ref.last;\n                seq.push(ex);\n                tok = null;\n            }\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (!tok.done && tok.value.t === ';') {\n                tok = null;\n            }\n        }\n    }\n    parseExpr(scanner, tok) {\n        switch (tok.t) {\n            case Literal.Ident:\n                return this.expand({\n                    prim: tok.v,\n                    [sourceReference]: { first: tok.first, last: tok.last },\n                });\n            case Literal.Number:\n                return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n            case Literal.String:\n                return {\n                    string: JSON.parse(tok.v),\n                    [sourceReference]: { first: tok.first, last: tok.last },\n                };\n            case Literal.Bytes:\n                return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n            case '{':\n                return this.parseSequenceExpr(scanner, tok);\n            default:\n                return this.parseListExpr(scanner, tok);\n        }\n    }\n    /**\n     * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n     * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n     */\n    parseSequence(src) {\n        if (typeof src !== 'string') {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseSequenceExpr(scanner, tok.value);\n    }\n    /**\n     * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n     * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n     * @returns An AST node or null for empty document.\n     */\n    parseList(src) {\n        if (typeof src !== 'string') {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseListExpr(scanner, tok.value);\n    }\n    /**\n     * Parse any Michelson expression\n     * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n     * @returns An AST node or null for empty document.\n     */\n    parseMichelineExpression(src) {\n        if (typeof src !== 'string') {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseExpr(scanner, tok.value);\n    }\n    /**\n     * Parse a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n     * An alias for `parseSequence`\n     * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n     */\n    parseScript(src) {\n        return this.parseSequence(src);\n    }\n    /**\n     * Parse a Micheline sequence expression. Enclosing curly brackets may be omitted.\n     * An alias for `parseList`\n     * @param src A Michelson list expression such as `(Pair {Elt \"0\" 0} 0)` or `Pair {Elt \"0\" 0} 0`\n     * @returns An AST node or null for empty document.\n     */\n    parseData(src) {\n        return this.parseList(src);\n    }\n    /**\n     * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n     * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n     */\n    parseJSON(src) {\n        if (typeof src !== 'object') {\n            throw new TypeError(`object type was expected, got ${typeof src} instead`);\n        }\n        if (Array.isArray(src)) {\n            const ret = [];\n            for (const n of src) {\n                if (n === null || typeof n !== 'object') {\n                    throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n                }\n                ret.push(this.parseJSON(n));\n            }\n            return ret;\n        }\n        else if ('prim' in src) {\n            const p = src;\n            if (typeof p.prim === 'string' &&\n                (p.annots === undefined || Array.isArray(p.annots)) &&\n                (p.args === undefined || Array.isArray(p.args))) {\n                const ret = {\n                    prim: p.prim,\n                };\n                if (p.annots !== undefined) {\n                    for (const a of p.annots) {\n                        if (typeof a !== 'string') {\n                            throw new JSONParseError(a, `string expected: ${a}`);\n                        }\n                    }\n                    ret.annots = p.annots;\n                }\n                if (p.args !== undefined) {\n                    ret.args = [];\n                    for (const a of p.args) {\n                        if (a === null || typeof a !== 'object') {\n                            throw new JSONParseError(a, `unexpected argument: ${a}`);\n                        }\n                        ret.args.push(this.parseJSON(a));\n                    }\n                }\n                return this.expand(ret);\n            }\n            throw new JSONParseError(src, `malformed prim expression: ${src}`);\n        }\n        else if ('string' in src) {\n            if (typeof src.string === 'string') {\n                return { string: src.string };\n            }\n            throw new JSONParseError(src, `malformed string literal: ${src}`);\n        }\n        else if ('int' in src) {\n            if (typeof src.int === 'string' && intRe.test(src.int)) {\n                return { int: src.int };\n            }\n            throw new JSONParseError(src, `malformed int literal: ${src}`);\n        }\n        else if ('bytes' in src) {\n            if (typeof src.bytes === 'string' &&\n                bytesRe.test(src.bytes)) {\n                return { bytes: src.bytes };\n            }\n            throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n        }\n        else {\n            throw new JSONParseError(src, `unexpected object: ${src}`);\n        }\n    }\n}\n\nclass Formatter {\n    constructor(opt, lev = 0) {\n        this.opt = opt;\n        this.lev = lev;\n    }\n    indent(n = 0) {\n        var _a;\n        let ret = '';\n        if (((_a = this.opt) === null || _a === void 0 ? void 0 : _a.indent) !== undefined) {\n            for (let i = this.lev + n; i > 0; i--) {\n                ret += this.opt.indent;\n            }\n        }\n        return ret;\n    }\n    get lf() {\n        var _a;\n        return ((_a = this.opt) === null || _a === void 0 ? void 0 : _a.newline) || '';\n    }\n    get lfsp() {\n        var _a;\n        return ((_a = this.opt) === null || _a === void 0 ? void 0 : _a.newline) || ' ';\n    }\n    down(n) {\n        return new Formatter(this.opt, this.lev + n);\n    }\n}\nfunction hasArgs(node) {\n    return ('prim' in node &&\n        ((node.annots !== undefined && node.annots.length !== 0) ||\n            (node.args !== undefined && node.args.length !== 0)));\n}\nfunction isMultiline(node) {\n    if (node.args !== undefined) {\n        for (const a of node.args) {\n            if (Array.isArray(a) || hasArgs(a)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction emitExpr(node, f, foldMacros) {\n    var _a;\n    const macro = (_a = node[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n    if (foldMacros && macro) {\n        return emitExpr(macro, f, foldMacros);\n    }\n    if (Array.isArray(node)) {\n        return emitSeq(node, f, foldMacros);\n    }\n    else if ('string' in node) {\n        return JSON.stringify(node.string);\n    }\n    else if ('int' in node) {\n        return node.int;\n    }\n    else if ('bytes' in node) {\n        return '0x' + node.bytes;\n    }\n    else {\n        if ((node.annots === undefined || node.annots.length === 0) &&\n            (node.args === undefined || node.args.length === 0)) {\n            return node.prim;\n        }\n        let ret = '(' + node.prim;\n        if (node.annots !== undefined) {\n            for (const a of node.annots) {\n                ret += ' ' + a;\n            }\n        }\n        if (node.args !== undefined) {\n            const multiline = isMultiline(node);\n            for (const a of node.args) {\n                if (multiline) {\n                    ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n                }\n                else {\n                    ret += ' ' + emitExpr(a, f, foldMacros);\n                }\n            }\n        }\n        return ret + ')';\n    }\n}\nfunction emitSeq(node, f, foldMacros) {\n    let ret = '{' + f.lf;\n    let i = node.length;\n    for (const el of node) {\n        ret += f.indent(1);\n        if ('prim' in el) {\n            ret += el.prim;\n            if (el.annots !== undefined) {\n                for (const a of el.annots) {\n                    ret += ' ' + a;\n                }\n            }\n            if (el.args !== undefined) {\n                const multiline = isMultiline(el);\n                for (const a of el.args) {\n                    if (multiline) {\n                        ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n                    }\n                    else {\n                        ret += ' ' + emitExpr(a, f, foldMacros);\n                    }\n                }\n            }\n        }\n        else {\n            ret += emitExpr(el, f.down(1), foldMacros);\n        }\n        ret += i > 1 ? ';' + f.lfsp : f.lf;\n        i--;\n    }\n    return ret + f.indent() + '}';\n}\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nfunction emitMicheline(expr, opt, foldMacros = false) {\n    if (typeof expr !== 'object') {\n        throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n    }\n    return emitExpr(expr, new Formatter(opt), foldMacros);\n}\n\nconst H = [\n    0x6a09e667 | 0,\n    0xbb67ae85 | 0,\n    0x3c6ef372 | 0,\n    0xa54ff53a | 0,\n    0x510e527f | 0,\n    0x9b05688c | 0,\n    0x1f83d9ab | 0,\n    0x5be0cd19 | 0,\n];\nconst K = [\n    0x428a2f98 | 0,\n    0x71374491 | 0,\n    0xb5c0fbcf | 0,\n    0xe9b5dba5 | 0,\n    0x3956c25b | 0,\n    0x59f111f1 | 0,\n    0x923f82a4 | 0,\n    0xab1c5ed5 | 0,\n    0xd807aa98 | 0,\n    0x12835b01 | 0,\n    0x243185be | 0,\n    0x550c7dc3 | 0,\n    0x72be5d74 | 0,\n    0x80deb1fe | 0,\n    0x9bdc06a7 | 0,\n    0xc19bf174 | 0,\n    0xe49b69c1 | 0,\n    0xefbe4786 | 0,\n    0x0fc19dc6 | 0,\n    0x240ca1cc | 0,\n    0x2de92c6f | 0,\n    0x4a7484aa | 0,\n    0x5cb0a9dc | 0,\n    0x76f988da | 0,\n    0x983e5152 | 0,\n    0xa831c66d | 0,\n    0xb00327c8 | 0,\n    0xbf597fc7 | 0,\n    0xc6e00bf3 | 0,\n    0xd5a79147 | 0,\n    0x06ca6351 | 0,\n    0x14292967 | 0,\n    0x27b70a85 | 0,\n    0x2e1b2138 | 0,\n    0x4d2c6dfc | 0,\n    0x53380d13 | 0,\n    0x650a7354 | 0,\n    0x766a0abb | 0,\n    0x81c2c92e | 0,\n    0x92722c85 | 0,\n    0xa2bfe8a1 | 0,\n    0xa81a664b | 0,\n    0xc24b8b70 | 0,\n    0xc76c51a3 | 0,\n    0xd192e819 | 0,\n    0xd6990624 | 0,\n    0xf40e3585 | 0,\n    0x106aa070 | 0,\n    0x19a4c116 | 0,\n    0x1e376c08 | 0,\n    0x2748774c | 0,\n    0x34b0bcb5 | 0,\n    0x391c0cb3 | 0,\n    0x4ed8aa4a | 0,\n    0x5b9cca4f | 0,\n    0x682e6ff3 | 0,\n    0x748f82ee | 0,\n    0x78a5636f | 0,\n    0x84c87814 | 0,\n    0x8cc70208 | 0,\n    0x90befffa | 0,\n    0xa4506ceb | 0,\n    0xbef9a3f7 | 0,\n    0xc67178f2 | 0,\n];\n/**\n *  @category Error\n *  @description Error that indicates a failure when decoding a base58 encoding\n */\nclass Base58DecodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'Base58DecodingError';\n    }\n}\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg) {\n    // pad the message\n    const r = (msg.length + 9) % 64;\n    const pad = r === 0 ? 0 : 64 - r;\n    if (msg.length > 268435455) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_0__.InvalidMessageError('', `: Invalid length ${msg.length} is too big -- SHA-256.`);\n    }\n    const l = msg.length << 3;\n    const buffer = [\n        ...msg,\n        0x80,\n        ...new Array(pad).fill(0),\n        0,\n        0,\n        0,\n        0,\n        (l >> 24) & 0xff,\n        (l >> 16) & 0xff,\n        (l >> 8) & 0xff,\n        l & 0xff,\n    ];\n    function ror(x, n) {\n        return (x >>> n) | (x << (32 - n));\n    }\n    const h = [...H];\n    const w = new Array(64);\n    const v = new Array(8);\n    for (let offset = 0; offset < buffer.length; offset += 64) {\n        let q = offset;\n        let i = 0;\n        while (i < 16) {\n            w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n            q += 4;\n            i++;\n        }\n        while (i < 64) {\n            const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n            const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n            w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n            i++;\n        }\n        for (let i = 0; i < 8; i++) {\n            v[i] = h[i];\n        }\n        for (let i = 0; i < 64; i++) {\n            const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n            const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n            const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ (~v[4] & v[6])) + K[i] + w[i]) | 0;\n            const t2 = (b0 + ((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2]))) | 0;\n            v[7] = v[6];\n            v[6] = v[5];\n            v[5] = v[4];\n            v[4] = (v[3] + t1) | 0;\n            v[3] = v[2];\n            v[2] = v[1];\n            v[1] = v[0];\n            v[0] = (t1 + t2) | 0;\n        }\n        for (let i = 0; i < 8; i++) {\n            h[i] = (h[i] + v[i]) | 0;\n        }\n    }\n    const digest = [];\n    for (const v of h) {\n        digest.push((v >> 24) & 0xff);\n        digest.push((v >> 16) & 0xff);\n        digest.push((v >> 8) & 0xff);\n        digest.push(v & 0xff);\n    }\n    return digest;\n}\nconst base58alphabetFwd = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, -1, -1, -1, -1, 9, 10, 11, 12, 13, 14, 15, 16, -1, 17, 18,\n    19, 20, 21, -1, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, -1, -1, -1, -1, -1, -1, 33, 34, 35,\n    36, 37, 38, 39, 40, 41, 42, 43, -1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n];\nconst base58alphabetBwd = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35,\n    36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66,\n    67, 68, 69, 70, 71, 72, 73,\n];\nfunction byteAt(src, i) {\n    const c = src.charCodeAt(i) - 49;\n    if (c >= base58alphabetFwd.length || base58alphabetFwd[c] === -1) {\n        throw new Base58DecodingError(`Unexpected character at position ${i}: ${src[i]}`);\n    }\n    return base58alphabetFwd[c];\n}\nfunction decodeBase58(src) {\n    const acc = [];\n    let i = 0;\n    // count and skip leading zeros\n    while (i < src.length && byteAt(src, i) === 0) {\n        i++;\n    }\n    let zeros = i;\n    while (i < src.length) {\n        let carry = byteAt(src, i++);\n        /*\n            for every symbol x\n            acc = acc * 58 + x\n            where acc is a little endian arbitrary length integer\n            */\n        let ii = 0;\n        while (carry !== 0 || ii < acc.length) {\n            const m = (acc[ii] || 0) * 58 + carry;\n            acc[ii++] = m % 256;\n            carry = Math.floor(m / 256);\n        }\n    }\n    while (zeros-- > 0) {\n        acc.push(0);\n    }\n    return acc.reverse();\n}\nfunction encodeBase58(src) {\n    const acc = [];\n    let i = 0;\n    // count and skip leading zeros\n    while (i < src.length && src[i] === 0) {\n        i++;\n    }\n    let zeros = i;\n    while (i < src.length) {\n        let carry = src[i++];\n        let ii = 0;\n        while (carry !== 0 || ii < acc.length) {\n            const m = (acc[ii] || 0) * 256 + carry;\n            acc[ii++] = m % 58;\n            carry = Math.floor(m / 58);\n        }\n    }\n    while (zeros-- > 0) {\n        acc.push(0);\n    }\n    acc.reverse();\n    return String.fromCharCode(...acc.map((v) => base58alphabetBwd[v] + 49));\n}\nfunction decodeBase58Check(src) {\n    const buffer = decodeBase58(src);\n    if (buffer.length < 4) {\n        throw new Base58DecodingError(`Data is too short ${buffer.length}`);\n    }\n    const data = buffer.slice(0, buffer.length - 4);\n    const sum = buffer.slice(buffer.length - 4);\n    const computed = sha256(sha256(data));\n    if (sum[0] !== computed[0] ||\n        sum[1] !== computed[1] ||\n        sum[2] !== computed[2] ||\n        sum[3] !== computed[3]) {\n        throw new Base58DecodingError('Invalid checksum');\n    }\n    return data;\n}\nfunction encodeBase58Check(src) {\n    const sum = sha256(sha256(src));\n    return encodeBase58([...src, ...sum.slice(0, 4)]);\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an invalid Michelson being passed or used\n */\nclass InvalidMichelsonError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'InvalidMichelsonError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid type expression being passed or used\n */\nclass InvalidTypeExpressionError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'InvalidTypeExpressionError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid data expression being passed or used\n */\nclass InvalidDataExpressionError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'InvalidDataExpressionError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid contract entrypoint being referenced or passed\n */\nclass InvalidEntrypointError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.ParameterValidationError {\n    constructor(entrypoint) {\n        super();\n        this.entrypoint = entrypoint;\n        this.name = 'InvalidEntrypointError';\n        this.message = `Contract has no entrypoint named: \"${entrypoint}\"`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when trying to encode Tezos ID\n */\nclass TezosIdEncodeError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'TezosIdEncodeError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a general error happening when trying to create a LongInteger\n */\nclass LongIntegerError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'LongIntegerError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when trying to parse a hex byte\n */\nclass HexParseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    constructor(hexByte) {\n        super();\n        this.hexByte = hexByte;\n        this.name = 'HexParseError';\n        this.message = `Unable to parse hex byte \"${hexByte}\"`;\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a Michelson failure occurring\n */\nclass MichelsonError extends _taquito_core__WEBPACK_IMPORTED_MODULE_0__.TaquitoError {\n    /**\n     * @param val Value of a AST node caused the error\n     * @param path Path to a node caused the error\n     * @param message An error message\n     */\n    constructor(val, message) {\n        super();\n        this.val = val;\n        this.message = message;\n        this.name = 'MichelsonError';\n    }\n}\nfunction isMichelsonError(err) {\n    return err instanceof MichelsonError;\n}\nclass MichelsonTypeError extends MichelsonError {\n    /**\n     * @param val Value of a type node caused the error\n     * @param data Value of a data node caused the error\n     * @param message An error message\n     */\n    constructor(val, message, data) {\n        super(val, message);\n        this.val = val;\n        this.message = message;\n        this.name = 'MichelsonTypeError';\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n}\n// Ad hoc big integer parser\nclass LongInteger {\n    append(c) {\n        let i = 0;\n        while (c !== 0 || i < this.buf.length) {\n            const m = (this.buf[i] || 0) * 10 + c;\n            this.buf[i++] = m % 256;\n            c = Math.floor(m / 256);\n        }\n    }\n    constructor(arg) {\n        this.neg = false;\n        this.buf = [];\n        if (arg === undefined) {\n            return;\n        }\n        if (typeof arg === 'string') {\n            for (let i = 0; i < arg.length; i++) {\n                const c = arg.charCodeAt(i);\n                if (i === 0 && c === 0x2d) {\n                    this.neg = true;\n                }\n                else {\n                    if (c < 0x30 || c > 0x39) {\n                        throw new LongIntegerError(`unexpected character in integer constant \"${arg[i]}\"`);\n                    }\n                    this.append(c - 0x30);\n                }\n            }\n        }\n        else if (arg < 0) {\n            this.neg = true;\n            this.append(-arg);\n        }\n        else {\n            this.append(arg);\n        }\n    }\n    cmp(arg) {\n        if (this.neg !== arg.neg) {\n            return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n        }\n        else {\n            let ret = 0;\n            if (this.buf.length !== arg.buf.length) {\n                ret = this.buf.length < arg.buf.length ? -1 : 1;\n            }\n            else if (this.buf.length !== 0) {\n                let i = arg.buf.length - 1;\n                while (i >= 0 && this.buf[i] === arg.buf[i]) {\n                    i--;\n                }\n                ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n            }\n            return !this.neg ? ret : ret === 0 ? 0 : -ret;\n        }\n    }\n    get sign() {\n        return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n    }\n}\nfunction parseBytes(s) {\n    const ret = [];\n    for (let i = 0; i < s.length; i += 2) {\n        const x = parseInt(s.slice(i, i + 2), 16);\n        if (Number.isNaN(x)) {\n            return null;\n        }\n        ret.push(x);\n    }\n    return ret;\n}\nfunction isDecimal(x) {\n    try {\n        new LongInteger(x);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isNatural(x) {\n    try {\n        return new LongInteger(x).sign >= 0;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z.%@]*)?)$/;\nfunction unpackAnnotations(p, opt) {\n    if (Array.isArray(p)) {\n        return {};\n    }\n    let field;\n    let type;\n    let vars;\n    if (p.annots !== undefined) {\n        for (const v of p.annots) {\n            if (v.length !== 0) {\n                if (!annRe.test(v) ||\n                    (!(opt === null || opt === void 0 ? void 0 : opt.specialVar) && (v === '@%' || v === '@%%')) ||\n                    (!(opt === null || opt === void 0 ? void 0 : opt.specialFields) && v === '%@')) {\n                    throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n                }\n                switch (v[0]) {\n                    case '%':\n                        if ((opt === null || opt === void 0 ? void 0 : opt.emptyFields) || v.length > 1) {\n                            field = field || [];\n                            field.push(v);\n                        }\n                        break;\n                    case ':':\n                        if (v.length > 1) {\n                            type = type || [];\n                            type.push(v);\n                        }\n                        break;\n                    case '@':\n                        if ((opt === null || opt === void 0 ? void 0 : opt.emptyVar) || v.length > 1) {\n                            vars = vars || [];\n                            vars.push(v);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    return { f: field, t: type, v: vars };\n}\nconst tezosPrefix = {\n    BlockHash: [32, [1, 52]],\n    OperationHash: [32, [5, 116]],\n    OperationListHash: [32, [133, 233]],\n    OperationListListHash: [32, [29, 159, 109]],\n    ProtocolHash: [32, [2, 170]],\n    ContextHash: [32, [79, 199]],\n    ED25519PublicKeyHash: [20, [6, 161, 159]],\n    SECP256K1PublicKeyHash: [20, [6, 161, 161]],\n    P256PublicKeyHash: [20, [6, 161, 164]],\n    ContractHash: [20, [2, 90, 121]],\n    CryptoboxPublicKeyHash: [16, [153, 103]],\n    ED25519Seed: [32, [13, 15, 58, 7]],\n    ED25519PublicKey: [32, [13, 15, 37, 217]],\n    SECP256K1SecretKey: [32, [17, 162, 224, 201]],\n    P256SecretKey: [32, [16, 81, 238, 189]],\n    ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]],\n    SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]],\n    P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]],\n    SECP256K1PublicKey: [33, [3, 254, 226, 86]],\n    P256PublicKey: [33, [3, 178, 139, 127]],\n    SECP256K1Scalar: [33, [38, 248, 136]],\n    SECP256K1Element: [33, [5, 92, 0]],\n    ED25519SecretKey: [64, [43, 246, 78, 7]],\n    ED25519Signature: [64, [9, 245, 205, 134, 18]],\n    SECP256K1Signature: [64, [13, 115, 101, 19, 63]],\n    P256Signature: [64, [54, 240, 44, 52]],\n    GenericSignature: [64, [4, 130, 43]],\n    ChainID: [4, [87, 82, 0]],\n    RollupAddress: [20, [1, 128, 120, 31]],\n    TxRollupL2Address: [20, [6, 161, 166]],\n};\nfunction checkDecodeTezosID(id, ...types) {\n    const buf = decodeBase58Check(id);\n    for (const t of types) {\n        const [plen, p] = tezosPrefix[t];\n        if (buf.length === plen + p.length) {\n            let i = 0;\n            while (i < p.length && buf[i] === p[i]) {\n                i++;\n            }\n            if (i === p.length) {\n                return [t, buf.slice(p.length)];\n            }\n        }\n    }\n    return null;\n}\nfunction encodeTezosID(id, data) {\n    const [plen, p] = tezosPrefix[id];\n    if (data.length !== plen) {\n        throw new TezosIdEncodeError(`Incorrect data length for ${id}: ${data.length}`);\n    }\n    return encodeBase58Check([...p, ...data]);\n}\nfunction unpackComb(id, v) {\n    const vv = v;\n    const args = Array.isArray(vv) ? vv : vv.args;\n    if (args.length === 2) {\n        // it's a way to make a union of two interfaces not an interface with two independent properties of union types\n        const ret = id === 'pair'\n            ? {\n                prim: 'pair',\n                args,\n            }\n            : {\n                prim: 'Pair',\n                args,\n            };\n        return ret;\n    }\n    return Object.assign(Object.assign({}, (Array.isArray(vv) ? { prim: id } : vv)), { args: [\n            args[0],\n            {\n                prim: id,\n                args: args.slice(1),\n            },\n        ] });\n}\nfunction isPairType(t) {\n    return Array.isArray(t) || t.prim === 'pair';\n}\nfunction isPairData(d) {\n    return Array.isArray(d) || ('prim' in d && d.prim === 'Pair');\n}\nconst rfc3339Re = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\nfunction parseDate(a) {\n    if ('string' in a) {\n        if (isNatural(a.string)) {\n            return new Date(parseInt(a.string, 10));\n        }\n        else if (rfc3339Re.test(a.string)) {\n            const x = new Date(a.string);\n            if (!Number.isNaN(x.valueOf)) {\n                return x;\n            }\n        }\n    }\n    else if (isDecimal(a.int)) {\n        return new Date(parseInt(a.int, 10));\n    }\n    return null;\n}\nfunction parseHex(s) {\n    const res = [];\n    for (let i = 0; i < s.length; i += 2) {\n        const ss = s.slice(i, i + 2);\n        const x = parseInt(ss, 16);\n        if (Number.isNaN(x)) {\n            throw new HexParseError(ss);\n        }\n        res.push(x);\n    }\n    return res;\n}\nfunction hexBytes(bytes) {\n    return bytes.map((x) => ((x >> 4) & 0xf).toString(16) + (x & 0xf).toString(16)).join('');\n}\n\n// Michelson validator\nconst maxViewNameLength = 31;\nconst noArgInstructionIDs = {\n    ABS: true,\n    ADD: true,\n    ADDRESS: true,\n    AMOUNT: true,\n    AND: true,\n    APPLY: true,\n    BALANCE: true,\n    BLAKE2B: true,\n    CAR: true,\n    CDR: true,\n    CHAIN_ID: true,\n    CHECK_SIGNATURE: true,\n    COMPARE: true,\n    CONCAT: true,\n    CONS: true,\n    EDIV: true,\n    EQ: true,\n    EXEC: true,\n    FAILWITH: true,\n    GE: true,\n    GET_AND_UPDATE: true,\n    GT: true,\n    HASH_KEY: true,\n    IMPLICIT_ACCOUNT: true,\n    INT: true,\n    ISNAT: true,\n    JOIN_TICKETS: true,\n    KECCAK: true,\n    LE: true,\n    LEVEL: true,\n    LSL: true,\n    LSR: true,\n    LT: true,\n    MEM: true,\n    MUL: true,\n    NEG: true,\n    NEQ: true,\n    NEVER: true,\n    NOT: true,\n    NOW: true,\n    OR: true,\n    PACK: true,\n    PAIRING_CHECK: true,\n    READ_TICKET: true,\n    SAPLING_VERIFY_UPDATE: true,\n    SELF: true,\n    SELF_ADDRESS: true,\n    SENDER: true,\n    SET_DELEGATE: true,\n    SHA256: true,\n    SHA3: true,\n    SHA512: true,\n    SIZE: true,\n    SLICE: true,\n    SOME: true,\n    SOURCE: true,\n    SPLIT_TICKET: true,\n    SUB: true,\n    SWAP: true,\n    TICKET: true,\n    TICKET_DEPRECATED: true,\n    TOTAL_VOTING_POWER: true,\n    TRANSFER_TOKENS: true,\n    UNIT: true,\n    VOTING_POWER: true,\n    XOR: true,\n    RENAME: true,\n    OPEN_CHEST: true,\n    SUB_MUTEZ: true,\n    MIN_BLOCK_TIME: true,\n    BYTES: true,\n    NAT: true,\n};\nconst instructionIDs = Object.assign({}, noArgInstructionIDs, {\n    CONTRACT: true,\n    CREATE_CONTRACT: true,\n    DIG: true,\n    DIP: true,\n    DROP: true,\n    DUG: true,\n    DUP: true,\n    EMIT: true,\n    EMPTY_BIG_MAP: true,\n    EMPTY_MAP: true,\n    EMPTY_SET: true,\n    GET: true,\n    IF: true,\n    IF_CONS: true,\n    IF_LEFT: true,\n    IF_NONE: true,\n    ITER: true,\n    LAMBDA: true,\n    LAMBDA_REC: true,\n    LEFT: true,\n    LOOP: true,\n    LOOP_LEFT: true,\n    MAP: true,\n    NIL: true,\n    NONE: true,\n    PAIR: true,\n    PUSH: true,\n    RIGHT: true,\n    SAPLING_EMPTY_STATE: true,\n    UNPACK: true,\n    UNPAIR: true,\n    UPDATE: true,\n    CAST: true,\n    VIEW: true,\n});\nconst simpleComparableTypeIDs = {\n    unit: true,\n    never: true,\n    bool: true,\n    int: true,\n    nat: true,\n    string: true,\n    chain_id: true,\n    bytes: true,\n    mutez: true,\n    key_hash: true,\n    key: true,\n    signature: true,\n    timestamp: true,\n    address: true,\n    tx_rollup_l2_address: true,\n};\nconst typeIDs = Object.assign({}, simpleComparableTypeIDs, {\n    or: true,\n    pair: true,\n    set: true,\n    big_map: true,\n    contract: true,\n    lambda: true,\n    list: true,\n    map: true,\n    operation: true,\n    option: true,\n    bls12_381_g1: true,\n    bls12_381_g2: true,\n    bls12_381_fr: true,\n    sapling_transaction: true,\n    sapling_transaction_deprecated: true,\n    sapling_state: true,\n    ticket: true,\n    chest_key: true,\n    chest: true,\n});\nclass MichelsonValidationError extends MichelsonError {\n    /**\n     * @param val Value of a node caused the error\n     * @param message An error message\n     */\n    constructor(val, message) {\n        super(val, message);\n        this.val = val;\n        this.message = message;\n        this.name = 'MichelsonValidationError';\n    }\n}\nfunction isPrim(ex) {\n    return 'prim' in ex;\n}\nfunction isPrimOrSeq(ex) {\n    return Array.isArray(ex) || 'prim' in ex;\n}\nfunction assertPrim(ex) {\n    if (isPrim(ex)) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, 'prim expression expected');\n}\nfunction assertSeq(ex) {\n    if (Array.isArray(ex)) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, 'sequence expression expected');\n}\nfunction assertPrimOrSeq(ex) {\n    if (isPrimOrSeq(ex)) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, 'prim or sequence expression expected');\n}\nfunction assertNatural(i) {\n    if (i.int[0] === '-') {\n        throw new MichelsonValidationError(i, 'natural number expected');\n    }\n}\nfunction assertIntLiteral(ex) {\n    if ('int' in ex) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, 'int literal expected');\n}\nfunction assertStringLiteral(ex) {\n    if ('string' in ex) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, 'string literal expected');\n}\nfunction assertArgs(ex, n) {\n    var _a;\n    if ((n === 0 && ex.args === undefined) || ((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === n) {\n        return true;\n    }\n    throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nfunction assertMichelsonInstruction(ex) {\n    var _a, _b;\n    if (Array.isArray(ex)) {\n        for (const n of ex) {\n            if (!Array.isArray(n) && !isPrim(n)) {\n                throw new MichelsonValidationError(ex, 'sequence or prim expected');\n            }\n            assertMichelsonInstruction(n);\n        }\n        return true;\n    }\n    if (assertPrim(ex)) {\n        if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n            assertArgs(ex, 0);\n            return true;\n        }\n        switch (ex.prim) {\n            case 'DROP':\n            case 'PAIR':\n            case 'UNPAIR':\n            case 'DUP':\n            case 'UPDATE':\n            case 'GET':\n                if (ex.args !== undefined && assertArgs(ex, 1)) {\n                    /* istanbul ignore else */\n                    if (assertIntLiteral(ex.args[0])) {\n                        assertNatural(ex.args[0]);\n                    }\n                }\n                break;\n            case 'DIG':\n            case 'DUG':\n            case 'SAPLING_EMPTY_STATE':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    /* istanbul ignore else */\n                    if (assertIntLiteral(ex.args[0])) {\n                        assertNatural(ex.args[0]);\n                    }\n                }\n                break;\n            case 'NONE':\n            case 'LEFT':\n            case 'RIGHT':\n            case 'NIL':\n            case 'CAST':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonType(ex.args[0]);\n                }\n                break;\n            case 'UNPACK':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonPackableType(ex.args[0]);\n                }\n                break;\n            case 'CONTRACT':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonPassableType(ex.args[0]);\n                }\n                break;\n            case 'IF_NONE':\n            case 'IF_LEFT':\n            case 'IF_CONS':\n            case 'IF':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 2)) {\n                    /* istanbul ignore else */\n                    if (assertSeq(ex.args[0])) {\n                        assertMichelsonInstruction(ex.args[0]);\n                    }\n                    /* istanbul ignore else */\n                    if (assertSeq(ex.args[1])) {\n                        assertMichelsonInstruction(ex.args[1]);\n                    }\n                }\n                break;\n            case 'MAP':\n            case 'ITER':\n            case 'LOOP':\n            case 'LOOP_LEFT':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonInstruction(ex.args[0]);\n                }\n                break;\n            case 'CREATE_CONTRACT':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonContract(ex.args[0]);\n                }\n                break;\n            case 'DIP':\n                if (((_a = ex.args) === null || _a === void 0 ? void 0 : _a.length) === 2) {\n                    /* istanbul ignore else */\n                    if (assertIntLiteral(ex.args[0])) {\n                        assertNatural(ex.args[0]);\n                    }\n                    /* istanbul ignore else */\n                    if (assertSeq(ex.args[1])) {\n                        assertMichelsonInstruction(ex.args[1]);\n                    }\n                }\n                else if (((_b = ex.args) === null || _b === void 0 ? void 0 : _b.length) === 1) {\n                    /* istanbul ignore else */\n                    if (assertSeq(ex.args[0])) {\n                        assertMichelsonInstruction(ex.args[0]);\n                    }\n                }\n                else {\n                    throw new MichelsonValidationError(ex, '1 or 2 arguments expected');\n                }\n                break;\n            case 'PUSH':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 2)) {\n                    assertMichelsonPushableType(ex.args[0]);\n                    assertMichelsonData(ex.args[1]);\n                }\n                break;\n            case 'EMPTY_SET':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonComparableType(ex.args[0]);\n                }\n                break;\n            case 'EMPTY_MAP':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 2)) {\n                    assertMichelsonComparableType(ex.args[0]);\n                    assertMichelsonType(ex.args[1]);\n                }\n                break;\n            case 'EMPTY_BIG_MAP':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 2)) {\n                    assertMichelsonComparableType(ex.args[0]);\n                    assertMichelsonBigMapStorableType(ex.args[1]);\n                }\n                break;\n            case 'LAMBDA_REC':\n            case 'LAMBDA':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 3)) {\n                    assertMichelsonType(ex.args[0]);\n                    assertMichelsonType(ex.args[1]);\n                    /* istanbul ignore else */\n                    if (assertSeq(ex.args[2])) {\n                        assertMichelsonInstruction(ex.args[2]);\n                    }\n                }\n                break;\n            case 'VIEW':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 2)) {\n                    if (assertStringLiteral(ex.args[0])) {\n                        assertViewNameValid(ex.args[0]);\n                    }\n                    if (assertMichelsonType(ex.args[1])) {\n                        assertMichelsonPushableType(ex.args[1]);\n                    }\n                }\n                break;\n            case 'EMIT':\n                if (ex.args && ex.args.length > 0) {\n                    assertArgs(ex, 1);\n                }\n                else {\n                    assertArgs(ex, 0);\n                }\n                break;\n            default:\n                throw new MichelsonValidationError(ex, 'instruction expected');\n        }\n    }\n    return true;\n}\nfunction assertMichelsonComparableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (Array.isArray(ex) || ex.prim === 'pair' || ex.prim === 'or' || ex.prim === 'option') {\n            traverseType(ex, (ex) => assertMichelsonComparableType(ex));\n        }\n        else if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n            throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n        }\n    }\n    return true;\n}\nfunction assertMichelsonPackableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n                ex.prim === 'big_map' ||\n                ex.prim === 'operation' ||\n                ex.prim === 'sapling_state' ||\n                ex.prim === 'ticket') {\n                throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside PACK/UNPACK instructions`);\n            }\n            traverseType(ex, (ex) => assertMichelsonPackableType(ex));\n        }\n    }\n    return true;\n}\nfunction assertMichelsonPushableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n                ex.prim === 'big_map' ||\n                ex.prim === 'operation' ||\n                ex.prim === 'sapling_state' ||\n                ex.prim === 'ticket' ||\n                ex.prim === 'contract') {\n                throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n            }\n            traverseType(ex, (ex) => assertMichelsonPushableType(ex));\n        }\n    }\n    return true;\n}\nfunction assertMichelsonStorableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n                ex.prim === 'operation' ||\n                ex.prim === 'contract') {\n                throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a storage`);\n            }\n            traverseType(ex, (ex) => assertMichelsonStorableType(ex));\n        }\n    }\n    return true;\n}\nfunction assertMichelsonPassableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) || ex.prim === 'operation') {\n                throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a parameter`);\n            }\n            traverseType(ex, (ex) => assertMichelsonPassableType(ex));\n        }\n    }\n    return true;\n}\nfunction assertMichelsonBigMapStorableType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n                ex.prim === 'big_map' ||\n                ex.prim === 'operation' ||\n                ex.prim === 'sapling_state') {\n                throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside a big_map`);\n            }\n            traverseType(ex, (ex) => assertMichelsonBigMapStorableType(ex));\n        }\n    }\n    return true;\n}\nconst viewRe = new RegExp('^[a-zA-Z0-9_.%@]*$');\nfunction assertViewNameValid(name) {\n    if (name.string.length > maxViewNameLength) {\n        throw new MichelsonValidationError(name, `view name too long: ${name.string}`);\n    }\n    if (!viewRe.test(name.string)) {\n        throw new MichelsonValidationError(name, `invalid character(s) in view name: ${name.string}`);\n    }\n}\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nfunction assertMichelsonType(ex) {\n    /* istanbul ignore else */\n    if (assertPrimOrSeq(ex)) {\n        if (isPrim(ex)) {\n            if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n                throw new MichelsonValidationError(ex, 'type expected');\n            }\n            traverseType(ex, (ex) => assertMichelsonType(ex));\n        }\n    }\n    return true;\n}\nfunction traverseType(ex, cb) {\n    if (Array.isArray(ex) || ex.prim === 'pair') {\n        const args = Array.isArray(ex) ? ex : ex.args;\n        if (args === undefined || args.length < 2) {\n            throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n        }\n        args.forEach((a) => {\n            if (assertPrimOrSeq(a)) {\n                cb(a);\n            }\n        });\n        return true;\n    }\n    switch (ex.prim) {\n        case 'option':\n        case 'list':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n                cb(ex.args[0]);\n            }\n            break;\n        case 'contract':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n                assertMichelsonPassableType(ex.args[0]);\n            }\n            break;\n        case 'or':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n                cb(ex.args[0]);\n                cb(ex.args[1]);\n            }\n            break;\n        case 'lambda':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n                assertMichelsonType(ex.args[0]);\n                assertMichelsonType(ex.args[1]);\n            }\n            break;\n        case 'set':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n                assertMichelsonComparableType(ex.args[0]);\n            }\n            break;\n        case 'map':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n                assertMichelsonComparableType(ex.args[0]);\n                cb(ex.args[1]);\n            }\n            break;\n        case 'big_map':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2) && assertPrimOrSeq(ex.args[0]) && assertPrimOrSeq(ex.args[1])) {\n                assertMichelsonComparableType(ex.args[0]);\n                assertMichelsonBigMapStorableType(ex.args[1]);\n                cb(ex.args[1]);\n            }\n            break;\n        case 'ticket':\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1) && assertPrimOrSeq(ex.args[0])) {\n                assertMichelsonComparableType(ex.args[0]);\n            }\n            break;\n        case 'sapling_state':\n        case 'sapling_transaction':\n            if (assertArgs(ex, 1)) {\n                assertIntLiteral(ex.args[0]);\n            }\n            break;\n        default:\n            assertArgs(ex, 0);\n    }\n    return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nfunction assertMichelsonData(ex) {\n    if ('int' in ex || 'string' in ex || 'bytes' in ex) {\n        return true;\n    }\n    if (Array.isArray(ex)) {\n        let mapElts = 0;\n        for (const n of ex) {\n            if (isPrim(n) && n.prim === 'Elt') {\n                /* istanbul ignore else */\n                if (assertArgs(n, 2)) {\n                    assertMichelsonData(n.args[0]);\n                    assertMichelsonData(n.args[1]);\n                }\n                mapElts++;\n            }\n            else {\n                assertMichelsonData(n);\n            }\n        }\n        if (mapElts !== 0 && mapElts !== ex.length) {\n            throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n        }\n        return true;\n    }\n    if (isPrim(ex)) {\n        switch (ex.prim) {\n            case 'Unit':\n            case 'True':\n            case 'False':\n            case 'None':\n                assertArgs(ex, 0);\n                break;\n            case 'Pair':\n                /* istanbul ignore else */\n                if (ex.args === undefined || ex.args.length < 2) {\n                    throw new MichelsonValidationError(ex, 'at least 2 arguments expected');\n                }\n                for (const a of ex.args) {\n                    assertMichelsonData(a);\n                }\n                break;\n            case 'Left':\n            case 'Right':\n            case 'Some':\n                /* istanbul ignore else */\n                if (assertArgs(ex, 1)) {\n                    assertMichelsonData(ex.args[0]);\n                }\n                break;\n            case 'Lambda_rec':\n                if (ex.args) {\n                    assertMichelsonInstruction(ex.args);\n                }\n                break;\n            default:\n                if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n                    assertMichelsonInstruction(ex);\n                }\n                else {\n                    throw new MichelsonValidationError(ex, 'data entry or instruction expected');\n                }\n        }\n    }\n    else {\n        throw new MichelsonValidationError(ex, 'data entry expected');\n    }\n    return true;\n}\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nfunction assertMichelsonContract(ex) {\n    /* istanbul ignore else */\n    if (assertSeq(ex)) {\n        const toplevelSec = {};\n        const views = {};\n        for (const sec of ex) {\n            if (assertPrim(sec)) {\n                if (sec.prim !== 'view') {\n                    if (sec.prim in toplevelSec) {\n                        throw new MichelsonValidationError(ex, `duplicate contract section: ${sec.prim}`);\n                    }\n                    toplevelSec[sec.prim] = true;\n                }\n                /* istanbul ignore else */\n                switch (sec.prim) {\n                    case 'code':\n                        if (assertArgs(sec, 1)) {\n                            /* istanbul ignore else */\n                            if (assertSeq(sec.args[0])) {\n                                assertMichelsonInstruction(sec.args[0]);\n                            }\n                        }\n                        break;\n                    case 'parameter':\n                        if (assertArgs(sec, 1)) {\n                            assertMichelsonPassableType(sec.args[0]);\n                        }\n                        if (sec.annots) {\n                            throw new MichelsonValidationError(sec, 'Annotation must be part of the parameter type');\n                        }\n                        break;\n                    case 'storage':\n                        if (assertArgs(sec, 1)) {\n                            assertMichelsonStorableType(sec.args[0]);\n                        }\n                        break;\n                    case 'view':\n                        if (assertArgs(sec, 4)) {\n                            if (assertStringLiteral(sec.args[0])) {\n                                const name = sec.args[0];\n                                if (name.string in views) {\n                                    throw new MichelsonValidationError(ex, `duplicate view name: ${name.string}`);\n                                }\n                                views[name.string] = true;\n                                assertViewNameValid(name);\n                            }\n                            assertMichelsonPushableType(sec.args[1]);\n                            assertMichelsonPushableType(sec.args[2]);\n                            if (assertSeq(sec.args[3])) {\n                                assertMichelsonInstruction(sec.args[3]);\n                            }\n                        }\n                        break;\n                    default:\n                        throw new MichelsonValidationError(ex, `unexpected contract section: ${sec.prim}`);\n                }\n            }\n        }\n    }\n    return true;\n}\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nfunction isMichelsonScript(ex) {\n    try {\n        assertMichelsonContract(ex);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nfunction isMichelsonData(ex) {\n    try {\n        assertMichelsonData(ex);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nfunction isMichelsonCode(ex) {\n    try {\n        assertMichelsonInstruction(ex);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nfunction isMichelsonType(ex) {\n    try {\n        assertMichelsonType(ex);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isInstruction(p) {\n    return Object.prototype.hasOwnProperty.call(instructionIDs, p.prim);\n}\nfunction assertDataListIfAny(d) {\n    if (!Array.isArray(d)) {\n        return false;\n    }\n    for (const v of d) {\n        if ('prim' in v) {\n            if (isInstruction(v)) {\n                throw new MichelsonError(d, `Instruction outside of a lambda: ${JSON.stringify(d)}`);\n            }\n            else if (v.prim === 'Elt') {\n                throw new MichelsonError(d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n            }\n        }\n    }\n    return true;\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n// The order is important!\n// The position represent the encoding value.\nconst primitives = [\n    'parameter',\n    'storage',\n    'code',\n    'False',\n    'Elt',\n    'Left',\n    'None',\n    'Pair',\n    'Right',\n    'Some',\n    'True',\n    'Unit',\n    'PACK',\n    'UNPACK',\n    'BLAKE2B',\n    'SHA256',\n    'SHA512',\n    'ABS',\n    'ADD',\n    'AMOUNT',\n    'AND',\n    'BALANCE',\n    'CAR',\n    'CDR',\n    'CHECK_SIGNATURE',\n    'COMPARE',\n    'CONCAT',\n    'CONS',\n    'CREATE_ACCOUNT',\n    'CREATE_CONTRACT',\n    'IMPLICIT_ACCOUNT',\n    'DIP',\n    'DROP',\n    'DUP',\n    'EDIV',\n    'EMPTY_MAP',\n    'EMPTY_SET',\n    'EQ',\n    'EXEC',\n    'FAILWITH',\n    'GE',\n    'GET',\n    'GT',\n    'HASH_KEY',\n    'IF',\n    'IF_CONS',\n    'IF_LEFT',\n    'IF_NONE',\n    'INT',\n    'LAMBDA',\n    'LE',\n    'LEFT',\n    'LOOP',\n    'LSL',\n    'LSR',\n    'LT',\n    'MAP',\n    'MEM',\n    'MUL',\n    'NEG',\n    'NEQ',\n    'NIL',\n    'NONE',\n    'NOT',\n    'NOW',\n    'OR',\n    'PAIR',\n    'PUSH',\n    'RIGHT',\n    'SIZE',\n    'SOME',\n    'SOURCE',\n    'SENDER',\n    'SELF',\n    'STEPS_TO_QUOTA',\n    'SUB',\n    'SWAP',\n    'TRANSFER_TOKENS',\n    'SET_DELEGATE',\n    'UNIT',\n    'UPDATE',\n    'XOR',\n    'ITER',\n    'LOOP_LEFT',\n    'ADDRESS',\n    'CONTRACT',\n    'ISNAT',\n    'CAST',\n    'RENAME',\n    'bool',\n    'contract',\n    'int',\n    'key',\n    'key_hash',\n    'lambda',\n    'list',\n    'map',\n    'big_map',\n    'nat',\n    'option',\n    'or',\n    'pair',\n    'set',\n    'signature',\n    'string',\n    'bytes',\n    'mutez',\n    'timestamp',\n    'unit',\n    'operation',\n    'address',\n    'SLICE',\n    'DIG',\n    'DUG',\n    'EMPTY_BIG_MAP',\n    'APPLY',\n    'chain_id',\n    'CHAIN_ID',\n    'LEVEL',\n    'SELF_ADDRESS',\n    'never',\n    'NEVER',\n    'UNPAIR',\n    'VOTING_POWER',\n    'TOTAL_VOTING_POWER',\n    'KECCAK',\n    'SHA3',\n    'PAIRING_CHECK',\n    'bls12_381_g1',\n    'bls12_381_g2',\n    'bls12_381_fr',\n    'sapling_state',\n    'sapling_transaction_deprecated',\n    'SAPLING_EMPTY_STATE',\n    'SAPLING_VERIFY_UPDATE',\n    'ticket',\n    'TICKET_DEPRECATED',\n    'READ_TICKET',\n    'SPLIT_TICKET',\n    'JOIN_TICKETS',\n    'GET_AND_UPDATE',\n    'chest',\n    'chest_key',\n    'OPEN_CHEST',\n    'VIEW',\n    'view',\n    'constant',\n    'SUB_MUTEZ',\n    'tx_rollup_l2_address',\n    'MIN_BLOCK_TIME',\n    'sapling_transaction',\n    'EMIT',\n    'Lambda_rec',\n    'LAMBDA_REC',\n    'TICKET',\n    'BYTES',\n    'NAT',\n];\nconst primTags = Object.assign({}, ...primitives.map((v, i) => ({ [v]: i })));\nvar Tag;\n(function (Tag) {\n    Tag[Tag[\"Int\"] = 0] = \"Int\";\n    Tag[Tag[\"String\"] = 1] = \"String\";\n    Tag[Tag[\"Sequence\"] = 2] = \"Sequence\";\n    Tag[Tag[\"Prim0\"] = 3] = \"Prim0\";\n    Tag[Tag[\"Prim0Annot\"] = 4] = \"Prim0Annot\";\n    Tag[Tag[\"Prim1\"] = 5] = \"Prim1\";\n    Tag[Tag[\"Prim1Annot\"] = 6] = \"Prim1Annot\";\n    Tag[Tag[\"Prim2\"] = 7] = \"Prim2\";\n    Tag[Tag[\"Prim2Annot\"] = 8] = \"Prim2Annot\";\n    Tag[Tag[\"Prim\"] = 9] = \"Prim\";\n    Tag[Tag[\"Bytes\"] = 10] = \"Bytes\";\n})(Tag || (Tag = {}));\nclass Writer {\n    constructor() {\n        this.buffer = [];\n    }\n    get length() {\n        return this.buffer.length;\n    }\n    writeBytes(val) {\n        this.buffer.push(...val.map((v) => v & 0xff));\n    }\n    writeUint8(val) {\n        const v = val | 0;\n        this.buffer.push(v & 0xff);\n    }\n    writeUint16(val) {\n        const v = val | 0;\n        this.buffer.push((v >> 8) & 0xff);\n        this.buffer.push(v & 0xff);\n    }\n    writeUint32(val) {\n        const v = val | 0;\n        this.buffer.push((v >> 24) & 0xff);\n        this.buffer.push((v >> 16) & 0xff);\n        this.buffer.push((v >> 8) & 0xff);\n        this.buffer.push(v & 0xff);\n    }\n    writeInt8(val) {\n        this.writeUint8(val);\n    }\n    writeInt16(val) {\n        this.writeUint16(val);\n    }\n    writeInt32(val) {\n        this.writeUint32(val);\n    }\n}\nconst boundsErr = new Error('bounds out of range');\nclass Reader {\n    constructor(buffer, idx = 0, cap = buffer.length) {\n        this.buffer = buffer;\n        this.idx = idx;\n        this.cap = cap;\n    }\n    /** Remaining length */\n    get length() {\n        return this.cap - this.idx;\n    }\n    readBytes(len) {\n        if (this.cap - this.idx < len) {\n            throw boundsErr;\n        }\n        const ret = this.buffer.slice(this.idx, this.idx + len);\n        this.idx += len;\n        return ret;\n    }\n    reader(len) {\n        if (this.cap - this.idx < len) {\n            throw boundsErr;\n        }\n        const ret = new Reader(this.buffer, this.idx, this.idx + len);\n        this.idx += len;\n        return ret;\n    }\n    copy() {\n        return new Reader(this.buffer, this.idx, this.cap);\n    }\n    readUint8() {\n        if (this.cap - this.idx < 1) {\n            throw boundsErr;\n        }\n        return this.buffer[this.idx++] >>> 0;\n    }\n    readUint16() {\n        if (this.cap - this.idx < 2) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        return ((x0 << 8) | x1) >>> 0;\n    }\n    readUint32() {\n        if (this.cap - this.idx < 4) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        const x2 = this.buffer[this.idx++];\n        const x3 = this.buffer[this.idx++];\n        return ((x0 << 24) | (x1 << 16) | (x2 << 8) | x3) >>> 0;\n    }\n    readInt8() {\n        if (this.cap - this.idx < 1) {\n            throw boundsErr;\n        }\n        const x = this.buffer[this.idx++];\n        return (x << 24) >> 24;\n    }\n    readInt16() {\n        if (this.cap - this.idx < 2) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        return (((x0 << 8) | x1) << 16) >> 16;\n    }\n    readInt32() {\n        if (this.cap - this.idx < 4) {\n            throw boundsErr;\n        }\n        const x0 = this.buffer[this.idx++];\n        const x1 = this.buffer[this.idx++];\n        const x2 = this.buffer[this.idx++];\n        const x3 = this.buffer[this.idx++];\n        return (x0 << 24) | (x1 << 16) | (x2 << 8) | x3;\n    }\n}\nvar ContractID;\n(function (ContractID) {\n    ContractID[ContractID[\"Implicit\"] = 0] = \"Implicit\";\n    ContractID[ContractID[\"Originated\"] = 1] = \"Originated\";\n})(ContractID || (ContractID = {}));\nvar PublicKeyHashID;\n(function (PublicKeyHashID) {\n    PublicKeyHashID[PublicKeyHashID[\"ED25519\"] = 0] = \"ED25519\";\n    PublicKeyHashID[PublicKeyHashID[\"SECP256K1\"] = 1] = \"SECP256K1\";\n    PublicKeyHashID[PublicKeyHashID[\"P256\"] = 2] = \"P256\";\n})(PublicKeyHashID || (PublicKeyHashID = {}));\nfunction readPublicKeyHash(rd) {\n    let type;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case PublicKeyHashID.ED25519:\n            type = 'ED25519PublicKeyHash';\n            break;\n        case PublicKeyHashID.SECP256K1:\n            type = 'SECP256K1PublicKeyHash';\n            break;\n        case PublicKeyHashID.P256:\n            type = 'P256PublicKeyHash';\n            break;\n        default:\n            throw new Error(`unknown public key hash tag: ${tag}`);\n    }\n    return { type, hash: rd.readBytes(20) };\n}\nfunction readAddress(rd) {\n    let address;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case ContractID.Implicit:\n            address = readPublicKeyHash(rd);\n            break;\n        case ContractID.Originated:\n            address = {\n                type: 'ContractHash',\n                hash: rd.readBytes(20),\n            };\n            rd.readBytes(1);\n            break;\n        default:\n            throw new Error(`unknown address tag: ${tag}`);\n    }\n    if (rd.length !== 0) {\n        // entry point\n        const dec = new TextDecoder();\n        address.entryPoint = dec.decode(new Uint8Array(rd.readBytes(rd.length)));\n    }\n    return address;\n}\nfunction writePublicKeyHash(a, w) {\n    let tag;\n    switch (a.type) {\n        case 'ED25519PublicKeyHash':\n            tag = PublicKeyHashID.ED25519;\n            break;\n        case 'SECP256K1PublicKeyHash':\n            tag = PublicKeyHashID.SECP256K1;\n            break;\n        case 'P256PublicKeyHash':\n            tag = PublicKeyHashID.P256;\n            break;\n        default:\n            throw new Error(`unexpected address type: ${a.type}`);\n    }\n    w.writeUint8(tag);\n    w.writeBytes(Array.from(a.hash));\n}\nfunction writeAddress(a, w) {\n    if (a.type === 'ContractHash') {\n        w.writeUint8(ContractID.Originated);\n        w.writeBytes(Array.from(a.hash));\n        w.writeUint8(0);\n    }\n    else {\n        w.writeUint8(ContractID.Implicit);\n        writePublicKeyHash(a, w);\n    }\n    if (a.entryPoint !== undefined && a.entryPoint !== '' && a.entryPoint !== 'default') {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(a.entryPoint);\n        w.writeBytes(Array.from(bytes));\n    }\n}\nvar PublicKeyID;\n(function (PublicKeyID) {\n    PublicKeyID[PublicKeyID[\"ED25519\"] = 0] = \"ED25519\";\n    PublicKeyID[PublicKeyID[\"SECP256K1\"] = 1] = \"SECP256K1\";\n    PublicKeyID[PublicKeyID[\"P256\"] = 2] = \"P256\";\n})(PublicKeyID || (PublicKeyID = {}));\nfunction readPublicKey(rd) {\n    let ln;\n    let type;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case PublicKeyID.ED25519:\n            type = 'ED25519PublicKey';\n            ln = 32;\n            break;\n        case PublicKeyID.SECP256K1:\n            type = 'SECP256K1PublicKey';\n            ln = 33;\n            break;\n        case PublicKeyID.P256:\n            type = 'P256PublicKey';\n            ln = 33;\n            break;\n        default:\n            throw new Error(`unknown public key tag: ${tag}`);\n    }\n    return { type, publicKey: rd.readBytes(ln) };\n}\nfunction writePublicKey(pk, w) {\n    let tag;\n    switch (pk.type) {\n        case 'ED25519PublicKey':\n            tag = PublicKeyID.ED25519;\n            break;\n        case 'SECP256K1PublicKey':\n            tag = PublicKeyID.SECP256K1;\n            break;\n        case 'P256PublicKey':\n            tag = PublicKeyID.P256;\n            break;\n        default:\n            throw new Error(`unexpected public key type: ${pk.type}`);\n    }\n    w.writeUint8(tag);\n    w.writeBytes(Array.from(pk.publicKey));\n}\nfunction writeExpr(expr, wr, tf) {\n    var _a, _b;\n    const [e, args] = tf(expr);\n    if (Array.isArray(e)) {\n        const w = new Writer();\n        for (const v of e) {\n            const a = args.next();\n            if (a.done) {\n                throw new Error('REPORT ME: iterator is done');\n            }\n            writeExpr(v, w, a.value);\n        }\n        wr.writeUint8(Tag.Sequence);\n        wr.writeUint32(w.length);\n        wr.writeBytes(w.buffer);\n        return;\n    }\n    if ('string' in e) {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(e.string);\n        wr.writeUint8(Tag.String);\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(Array.from(bytes));\n        return;\n    }\n    if ('int' in e) {\n        wr.writeUint8(Tag.Int);\n        let val = BigInt(e.int);\n        const sign = val < 0;\n        if (sign) {\n            val = -val;\n        }\n        let i = 0;\n        do {\n            const bits = i === 0 ? BigInt(6) : BigInt(7);\n            let byte = val & ((BigInt(1) << bits) - BigInt(1));\n            val >>= bits;\n            if (val) {\n                byte |= BigInt(0x80);\n            }\n            if (i === 0 && sign) {\n                byte |= BigInt(0x40);\n            }\n            wr.writeUint8(Number(byte));\n            i++;\n        } while (val);\n        return;\n    }\n    if ('bytes' in e) {\n        const bytes = parseHex(e.bytes);\n        wr.writeUint8(Tag.Bytes);\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(bytes);\n        return;\n    }\n    const prim = primTags[e.prim];\n    if (prim === undefined) {\n        throw new TypeError(`Can't encode primary: ${e.prim}`);\n    }\n    const tag = (((_a = e.args) === null || _a === void 0 ? void 0 : _a.length) || 0) < 3\n        ? Tag.Prim0 +\n            (((_b = e.args) === null || _b === void 0 ? void 0 : _b.length) || 0) * 2 +\n            (e.annots === undefined || e.annots.length === 0 ? 0 : 1)\n        : Tag.Prim;\n    wr.writeUint8(tag);\n    wr.writeUint8(prim);\n    if (e.args !== undefined) {\n        if (e.args.length < 3) {\n            for (const v of e.args) {\n                const a = args.next();\n                if (a.done) {\n                    throw new Error('REPORT ME: iterator is done');\n                }\n                writeExpr(v, wr, a.value);\n            }\n        }\n        else {\n            const w = new Writer();\n            for (const v of e.args) {\n                const a = args.next();\n                if (a.done) {\n                    throw new Error('REPORT ME: iterator is done');\n                }\n                writeExpr(v, w, a.value);\n            }\n            wr.writeUint32(w.length);\n            wr.writeBytes(w.buffer);\n        }\n    }\n    if (e.annots !== undefined && e.annots.length !== 0) {\n        const enc = new TextEncoder();\n        const bytes = enc.encode(e.annots.join(' '));\n        wr.writeUint32(bytes.length);\n        wr.writeBytes(Array.from(bytes));\n    }\n    else if (e.args !== undefined && e.args.length >= 3) {\n        wr.writeUint32(0);\n    }\n}\nfunction readExpr(rd, tf) {\n    function* passThrough() {\n        while (true) {\n            yield readPassThrough;\n        }\n    }\n    const [args, tr] = tf;\n    const tag = rd.readUint8();\n    switch (tag) {\n        case Tag.Int: {\n            const buf = [];\n            let byte;\n            do {\n                byte = rd.readInt8();\n                buf.push(byte);\n            } while ((byte & 0x80) !== 0);\n            let val = BigInt(0);\n            let sign = false;\n            for (let i = buf.length - 1; i >= 0; i--) {\n                const bits = i === 0 ? BigInt(6) : BigInt(7);\n                const byte = BigInt(buf[i]);\n                val <<= bits;\n                val |= byte & ((BigInt(1) << bits) - BigInt(1));\n                if (i === 0) {\n                    sign = !!(byte & BigInt(0x40));\n                }\n            }\n            if (sign) {\n                val = -val;\n            }\n            return tr({ int: String(val) });\n        }\n        case Tag.String: {\n            const length = rd.readUint32();\n            const bytes = rd.readBytes(length);\n            const dec = new TextDecoder();\n            return tr({ string: dec.decode(new Uint8Array(bytes)) });\n        }\n        case Tag.Bytes: {\n            const length = rd.readUint32();\n            const bytes = rd.readBytes(length);\n            const hex = hexBytes(Array.from(bytes));\n            return tr({ bytes: hex });\n        }\n        case Tag.Sequence: {\n            const length = rd.readUint32();\n            let res = [];\n            let savedrd = rd.copy();\n            // make two passes\n            let it = passThrough();\n            for (let n = 0; n < 2; n++) {\n                const r = savedrd.reader(length);\n                res = [];\n                while (r.length > 0) {\n                    const a = it.next();\n                    if (a.done) {\n                        throw new Error('REPORT ME: iterator is done');\n                    }\n                    res.push(readExpr(r, a.value));\n                }\n                // make a second pass with injected side effects\n                it = args(res);\n                savedrd = rd;\n            }\n            return tr(res);\n        }\n        default: {\n            if (tag > 9) {\n                throw new Error(`Unknown tag: ${tag}`);\n            }\n            const p = rd.readUint8();\n            if (p >= primitives.length) {\n                throw new Error(`Unknown primitive tag: ${p}`);\n            }\n            const prim = primitives[p];\n            const argn = (tag - 3) >> 1;\n            let res = { prim };\n            // make two passes\n            let it = passThrough();\n            let savedrd = rd.copy();\n            for (let n = 0; n < 2; n++) {\n                res = { prim };\n                if (argn < 3) {\n                    for (let i = 0; i < argn; i++) {\n                        const a = it.next();\n                        if (a.done) {\n                            throw new Error('REPORT ME: iterator is done');\n                        }\n                        res.args = res.args || [];\n                        res.args.push(readExpr(savedrd, a.value));\n                    }\n                }\n                else {\n                    res.args = res.args || [];\n                    const length = savedrd.readUint32();\n                    const r = savedrd.reader(length);\n                    while (r.length > 0) {\n                        const a = it.next();\n                        if (a.done) {\n                            throw new Error('REPORT ME: iterator is done');\n                        }\n                        res.args.push(readExpr(r, a.value));\n                    }\n                }\n                // make a second pass with injected side effects\n                it = args(res);\n                savedrd = rd;\n            }\n            if (((tag - 3) & 1) === 1 || argn === 3) {\n                // read annotations\n                const length = rd.readUint32();\n                if (length !== 0) {\n                    const bytes = rd.readBytes(length);\n                    const dec = new TextDecoder();\n                    res.annots = dec.decode(new Uint8Array(bytes)).split(' ');\n                }\n            }\n            return tr(res);\n        }\n    }\n}\nconst isOrData = (e) => 'prim' in e && (e.prim === 'Left' || e.prim === 'Right');\nconst isOptionData = (e) => 'prim' in e && (e.prim === 'Some' || e.prim === 'None');\nconst getWriteTransformFunc = (t) => {\n    if (isPairType(t)) {\n        return (d) => {\n            if (!isPairData(d)) {\n                throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n            }\n            assertDataListIfAny(d);\n            // combs aren't used in pack format\n            const tc = unpackComb('pair', t);\n            const dc = unpackComb('Pair', d);\n            return [\n                dc,\n                (function* () {\n                    for (const a of tc.args) {\n                        yield getWriteTransformFunc(a);\n                    }\n                })(),\n            ];\n        };\n    }\n    switch (t.prim) {\n        case 'or':\n            return (d) => {\n                if (!isOrData(d)) {\n                    throw new MichelsonTypeError(t, `or expected: ${JSON.stringify(d)}`, d);\n                }\n                return [\n                    d,\n                    (function* () {\n                        yield getWriteTransformFunc(t.args[d.prim === 'Left' ? 0 : 1]);\n                    })(),\n                ];\n            };\n        case 'option':\n            return (d) => {\n                if (!isOptionData(d)) {\n                    throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n                }\n                return [\n                    d,\n                    (function* () {\n                        const dd = d;\n                        // TODO: refactor and remove ts-ignore\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        if (dd.prim === 'Some') {\n                            yield getWriteTransformFunc(t.args[0]);\n                        }\n                    })(),\n                ];\n            };\n        case 'list':\n        case 'set':\n            return (d) => {\n                if (!Array.isArray(d)) {\n                    throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n                }\n                return [\n                    d,\n                    (function* () {\n                        for (const _v of d) {\n                            yield getWriteTransformFunc(t.args[0]);\n                        }\n                    })(),\n                ];\n            };\n        case 'map':\n            return (d) => {\n                if (!Array.isArray(d)) {\n                    throw new MichelsonTypeError(t, `map expected: ${JSON.stringify(d)}`, d);\n                }\n                return [\n                    d,\n                    (function* () {\n                        for (const _elt of d) {\n                            yield (elt) => {\n                                if (!('prim' in elt) || elt.prim !== 'Elt') {\n                                    throw new MichelsonTypeError(t, `map element expected: ${JSON.stringify(elt)}`, elt);\n                                }\n                                return [\n                                    elt,\n                                    (function* () {\n                                        for (const a of t.args) {\n                                            yield getWriteTransformFunc(a);\n                                        }\n                                    })(),\n                                ];\n                            };\n                        }\n                    })(),\n                ];\n            };\n        case 'chain_id':\n            return (d) => {\n                if (!('bytes' in d) && !('string' in d)) {\n                    throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n                }\n                let bytes;\n                if ('string' in d) {\n                    const id = checkDecodeTezosID(d.string, 'ChainID');\n                    if (id === null) {\n                        throw new MichelsonTypeError(t, `chain id base58 expected: ${d.string}`, d);\n                    }\n                    bytes = { bytes: hexBytes(id[1]) };\n                }\n                else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n        case 'signature':\n            return (d) => {\n                if (!('bytes' in d) && !('string' in d)) {\n                    throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n                }\n                let bytes;\n                if ('string' in d) {\n                    const sig = checkDecodeTezosID(d.string, 'ED25519Signature', 'SECP256K1Signature', 'P256Signature', 'GenericSignature');\n                    if (sig === null) {\n                        throw new MichelsonTypeError(t, `signature base58 expected: ${d.string}`, d);\n                    }\n                    bytes = { bytes: hexBytes(sig[1]) };\n                }\n                else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n        case 'key_hash':\n            return (d) => {\n                if (!('bytes' in d) && !('string' in d)) {\n                    throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n                }\n                let bytes;\n                if ('string' in d) {\n                    const pkh = checkDecodeTezosID(d.string, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash');\n                    if (pkh === null) {\n                        throw new MichelsonTypeError(t, `key hash base58 expected: ${d.string}`, d);\n                    }\n                    const w = new Writer();\n                    writePublicKeyHash({ type: pkh[0], hash: pkh[1] }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                }\n                else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n        case 'key':\n            return (d) => {\n                if (!('bytes' in d) && !('string' in d)) {\n                    throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n                }\n                let bytes;\n                if ('string' in d) {\n                    const key = checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey');\n                    if (key === null) {\n                        throw new MichelsonTypeError(t, `public key base58 expected: ${d.string}`, d);\n                    }\n                    const w = new Writer();\n                    writePublicKey({ type: key[0], publicKey: key[1] }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                }\n                else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n        case 'address':\n            return (d) => {\n                if (!('bytes' in d) && !('string' in d)) {\n                    throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n                }\n                let bytes;\n                if ('string' in d) {\n                    const s = d.string.split('%');\n                    const address = checkDecodeTezosID(s[0], 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash', 'ContractHash');\n                    if (address === null) {\n                        throw new MichelsonTypeError(t, `address base58 expected: ${d.string}`, d);\n                    }\n                    const w = new Writer();\n                    writeAddress({ type: address[0], hash: address[1], entryPoint: s.length > 1 ? s[1] : undefined }, w);\n                    bytes = { bytes: hexBytes(w.buffer) };\n                }\n                else {\n                    bytes = d;\n                }\n                return [bytes, [][Symbol.iterator]()];\n            };\n        case 'timestamp':\n            return (d) => {\n                if (!('string' in d) && !('int' in d)) {\n                    throw new MichelsonTypeError(t, `timestamp expected: ${JSON.stringify(d)}`, d);\n                }\n                let int;\n                if ('string' in d) {\n                    const p = parseDate(d);\n                    if (p === null) {\n                        throw new MichelsonTypeError(t, `can't parse date: ${d.string}`, d);\n                    }\n                    int = { int: String(Math.floor(p.getTime() / 1000)) };\n                }\n                else {\n                    int = d;\n                }\n                return [int, [][Symbol.iterator]()];\n            };\n        default:\n            return writePassThrough;\n    }\n};\nconst isPushInstruction = (e) => 'prim' in e && e.prim === 'PUSH';\nconst writePassThrough = (e) => {\n    if (isPushInstruction(e)) {\n        assertMichelsonInstruction(e);\n        // capture inlined type definition\n        return [\n            e,\n            (function* () {\n                yield writePassThrough;\n                yield getWriteTransformFunc(e.args[0]);\n            })(),\n        ];\n    }\n    return [\n        e,\n        (function* () {\n            while (true) {\n                yield writePassThrough;\n            }\n        })(),\n    ];\n};\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Without a type definition (not recommended) the data will be encoded as a binary form of a generic Michelson expression.\n * Type definition allows some types like `timestamp` and `address` and other base58 representable types to be encoded to\n * corresponding optimized binary forms borrowed from the Tezos protocol\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"address\"\n * };\n *\n * const packed = packData(data, typ);\n *\n * // 050a0000001901be41ee922ddd2cf33201e49d32da0afec571dce300666f6f\n * ```\n *\n * Without a type definition the base58 encoded address will be treated as a string\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"KT1RvkwF4F7pz1gCoxkyZrG1RkrxQy3gmFTv%foo\"\n * };\n *\n * const packed = packData(data);\n *\n * // 0501000000284b543152766b7746344637707a3167436f786b795a724731526b7278517933676d46547625666f6f\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as numeric array\n */\nfunction packData(d, t) {\n    const w = new Writer();\n    w.writeUint8(5);\n    writeExpr(d, w, t !== undefined ? getWriteTransformFunc(t) : writePassThrough);\n    return w.buffer;\n}\n/**\n * Serializes any value of packable type to its optimized binary representation\n * identical to the one used by PACK and UNPACK Michelson instructions.\n * Same as {@link packData} but returns a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const data: MichelsonData = {\n *     string: \"2019-09-26T10:59:51Z\"\n * };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const packed = packDataBytes(data, typ);\n *\n * // { bytes: \"0500a7e8e4d80b\" }\n * ```\n * @param d Data object\n * @param t Optional type definition\n * @returns Binary representation as a bytes literal\n */\nfunction packDataBytes(d, t) {\n    return { bytes: hexBytes(packData(d, t)) };\n}\nconst getReadTransformFuncs = (t) => {\n    if (isPairType(t)) {\n        return [\n            (d) => {\n                if (!isPairData(d)) {\n                    throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n                }\n                const tc = unpackComb('pair', t);\n                return (function* () {\n                    for (const a of tc.args) {\n                        yield getReadTransformFuncs(a);\n                    }\n                })();\n            },\n            (d) => d,\n        ];\n    }\n    switch (t.prim) {\n        case 'or':\n            return [\n                (d) => {\n                    if (!isOrData(d)) {\n                        throw new MichelsonTypeError(t, `or expected: ${JSON.stringify(d)}`, d);\n                    }\n                    return (function* () {\n                        yield getReadTransformFuncs(t.args[d.prim === 'Left' ? 0 : 1]);\n                    })();\n                },\n                (d) => d,\n            ];\n        case 'option':\n            return [\n                (d) => {\n                    if (!isOptionData(d)) {\n                        throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n                    }\n                    return (function* () {\n                        // TODO: refactor and remove ts-ignore\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        if (d.prim === 'Some') {\n                            yield getReadTransformFuncs(t.args[0]);\n                        }\n                    })();\n                },\n                (d) => d,\n            ];\n        case 'list':\n        case 'set':\n            return [\n                (d) => {\n                    if (!Array.isArray(d)) {\n                        throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n                    }\n                    return (function* () {\n                        while (true) {\n                            yield getReadTransformFuncs(t.args[0]);\n                        }\n                    })();\n                },\n                (d) => d,\n            ];\n        case 'map':\n            return [\n                (d) => {\n                    if (!Array.isArray(d)) {\n                        throw new MichelsonTypeError(t, `map expected: ${JSON.stringify(d)}`, d);\n                    }\n                    return (function* () {\n                        while (true) {\n                            yield [\n                                (elt) => {\n                                    if (!('prim' in elt) || elt.prim !== 'Elt') {\n                                        throw new MichelsonTypeError(t, `map element expected: ${JSON.stringify(elt)}`, elt);\n                                    }\n                                    return (function* () {\n                                        for (const a of t.args) {\n                                            yield getReadTransformFuncs(a);\n                                        }\n                                    })();\n                                },\n                                (elt) => elt,\n                            ];\n                        }\n                    })();\n                },\n                (d) => d,\n            ];\n        case 'chain_id':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('bytes' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n                    }\n                    return { string: encodeTezosID('ChainID', bytes) };\n                },\n            ];\n        case 'signature':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('bytes' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n                    }\n                    return { string: encodeTezosID('GenericSignature', bytes) };\n                },\n            ];\n        case 'key_hash':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('bytes' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const addr = readPublicKeyHash(rd);\n                    return {\n                        string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n                    };\n                },\n            ];\n        case 'key':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('bytes' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const pk = readPublicKey(rd);\n                    return { string: encodeTezosID(pk.type, pk.publicKey) };\n                },\n            ];\n        case 'address':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('bytes' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const bytes = parseBytes(d.bytes);\n                    if (bytes === null) {\n                        throw new MichelsonTypeError(t, `can't parse bytes: ${d.bytes}`, d);\n                    }\n                    const rd = new Reader(new Uint8Array(bytes));\n                    const addr = readAddress(rd);\n                    return {\n                        string: encodeTezosID(addr.type, addr.hash) + (addr.entryPoint ? '%' + addr.entryPoint : ''),\n                    };\n                },\n            ];\n        case 'timestamp':\n            return [\n                () => [][Symbol.iterator](),\n                (d) => {\n                    if (!('int' in d) && !('string' in d)) {\n                        throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n                    }\n                    if ('string' in d) {\n                        return d;\n                    }\n                    const date = new Date(parseInt(d.int, 10) * 1000);\n                    return { string: date.toISOString().slice(0, 19) + 'Z' };\n                },\n            ];\n        default:\n            return readPassThrough;\n    }\n};\nconst readPassThrough = [\n    (e) => {\n        if (isPushInstruction(e)) {\n            assertMichelsonInstruction(e);\n            // capture inlined type definition\n            return (function* () {\n                yield readPassThrough;\n                yield getReadTransformFuncs(e.args[0]);\n            })();\n        }\n        return (function* () {\n            while (true) {\n                yield readPassThrough;\n            }\n        })();\n    },\n    (e) => e,\n];\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Without a type definition (not recommended) the binary data will be treated as a binary form of a generic Michelson expression and returned as is.\n * Type definition allows some types like `timestamp` and `address` and other types usually encoded in optimized binary forms to be transformed\n * back to their string representations like base58 and ISO timestamps.\n *\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackData(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n *\n * Same binary data without a type definition\n * ```typescript\n * const src = [0x05, 0x00, 0xa7, 0xe8, 0xe4, 0xd8, 0x0b];\n *\n * const data = unpackData(src);\n *\n * // { int: \"1569495591\" }\n * ```\n * @param src Byte array\n * @param t Optional type definition\n * @returns Deserialized data\n */\nfunction unpackData(src, t) {\n    const r = new Reader(src);\n    if (r.readUint8() !== 5) {\n        throw new Error('incorrect packed data magic number');\n    }\n    const ex = readExpr(r, t !== undefined ? getReadTransformFuncs(t) : readPassThrough);\n    if (assertMichelsonData(ex)) {\n        return ex;\n    }\n    throw new Error(); // never\n}\n/**\n * Deserialize a byte array into the corresponding Michelson value.\n * Same as {@link unpackData} but takes a `bytes` Michelson data literal instead of an array\n *\n * ```typescript\n * const src = { bytes: \"0500a7e8e4d80b\" };\n *\n * const typ: MichelsonType = {\n *     prim: \"timestamp\"\n * };\n *\n * const data = unpackDataBytes(src, typ);\n *\n * // { string: \"2019-09-26T10:59:51Z\" }\n * ```\n * @param src Bytes object\n * @param t Optional type definition\n * @returns Deserialized data\n */\nfunction unpackDataBytes(src, t) {\n    const bytes = parseBytes(src.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${src.bytes}\"`);\n    }\n    return unpackData(bytes, t);\n}\n// helper functions also used by validator\nfunction decodeAddressBytes(b) {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readAddress(rd);\n}\nfunction decodePublicKeyHashBytes(b) {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readPublicKeyHash(rd);\n}\nfunction decodePublicKeyBytes(b) {\n    const bytes = parseBytes(b.bytes);\n    if (bytes === null) {\n        throw new Error(`can't parse bytes: \"${b.bytes}\"`);\n    }\n    const rd = new Reader(new Uint8Array(bytes));\n    return readPublicKey(rd);\n}\n\nclass MichelsonInstructionError extends MichelsonError {\n    /**\n     * @param val Value of a type node caused the error\n     * @param stackState Current stack state\n     * @param message An error message\n     */\n    constructor(val, stackState, message) {\n        super(val, message);\n        this.val = val;\n        this.stackState = stackState;\n        this.message = message;\n        this.name = 'MichelsonInstructionError';\n    }\n}\n// 'sequence as a pair' edo syntax helpers\nfunction typeID(t) {\n    return Array.isArray(t) ? 'pair' : t.prim;\n}\nfunction typeArgs(t) {\n    return ('prim' in t ? t.args : t);\n}\nfunction assertScalarTypesEqual(a, b, field = false) {\n    if (typeID(a) !== typeID(b)) {\n        throw new MichelsonTypeError(a, `types mismatch: ${typeID(a)} != ${typeID(b)}`, undefined);\n    }\n    const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n    if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n        throw new MichelsonTypeError(a, `${typeID(a)}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`, undefined);\n    }\n    if (field && ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0]) {\n        throw new MichelsonTypeError(a, `${typeID(a)}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`, undefined);\n    }\n    if (isPairType(a)) {\n        const aArgs = unpackComb('pair', a);\n        const bArgs = unpackComb('pair', b);\n        assertScalarTypesEqual(aArgs.args[0], bArgs.args[0], true);\n        assertScalarTypesEqual(aArgs.args[1], bArgs.args[1], true);\n        return;\n    }\n    switch (a.prim) {\n        case 'option':\n        case 'list':\n        case 'contract':\n        case 'set':\n        case 'ticket':\n            assertScalarTypesEqual(a.args[0], b.args[0]);\n            break;\n        case 'or':\n            assertScalarTypesEqual(a.args[0], b.args[0], true);\n            assertScalarTypesEqual(a.args[1], b.args[1], true);\n            break;\n        case 'lambda':\n        case 'map':\n        case 'big_map':\n            assertScalarTypesEqual(a.args[0], b.args[0]);\n            assertScalarTypesEqual(a.args[1], b.args[1]);\n            break;\n        case 'sapling_state':\n        case 'sapling_transaction':\n            if (parseInt(a.args[0].int, 10) !== parseInt(b.args[0].int, 10)) {\n                throw new MichelsonTypeError(a, `${typeID(a)}: type argument mismatch: ${a.args[0].int} != ${b.args[0].int}`, undefined);\n            }\n    }\n}\nfunction assertStacksEqual(a, b) {\n    if (a.length !== b.length) {\n        throw new MichelsonTypeError(a, `stack length mismatch: ${a.length} != ${b.length}`, undefined);\n    }\n    for (let i = 0; i < a.length; i++) {\n        assertScalarTypesEqual(a[i], b[i]);\n    }\n}\nfunction assertTypeAnnotationsValid(t, field = false) {\n    var _a, _b, _c;\n    if (!Array.isArray(t)) {\n        const ann = unpackAnnotations(t);\n        if ((((_a = ann.t) === null || _a === void 0 ? void 0 : _a.length) || 0) > 1) {\n            throw new MichelsonTypeError(t, `${t.prim}: at most one type annotation allowed: ${t.annots}`, undefined);\n        }\n        if (field) {\n            if ((((_b = ann.f) === null || _b === void 0 ? void 0 : _b.length) || 0) > 1) {\n                throw new MichelsonTypeError(t, `${t.prim}: at most one field annotation allowed: ${t.annots}`, undefined);\n            }\n        }\n        else {\n            if ((((_c = ann.f) === null || _c === void 0 ? void 0 : _c.length) || 0) > 0) {\n                throw new MichelsonTypeError(t, `${t.prim}: field annotations aren't allowed: ${t.annots}`, undefined);\n            }\n        }\n    }\n    if (isPairType(t)) {\n        const args = typeArgs(t);\n        for (const a of args) {\n            assertTypeAnnotationsValid(a, true);\n        }\n        return;\n    }\n    switch (t.prim) {\n        case 'option':\n        case 'list':\n        case 'contract':\n        case 'set':\n            assertTypeAnnotationsValid(t.args[0]);\n            break;\n        case 'or':\n            for (const a of t.args) {\n                assertTypeAnnotationsValid(a, true);\n            }\n            break;\n        case 'lambda':\n        case 'map':\n        case 'big_map':\n            assertTypeAnnotationsValid(t.args[0]);\n            assertTypeAnnotationsValid(t.args[1]);\n    }\n}\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d) {\n    if (!Array.isArray(d)) {\n        return false;\n    }\n    for (const v of d) {\n        if (!((Array.isArray(v) && isFunction(v)) || ('prim' in v && isInstruction(v)))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction assertDataValidInternal(d, t, ctx) {\n    if (isPairType(t)) {\n        if (isPairData(d)) {\n            assertDataListIfAny(d);\n            const dc = unpackComb('Pair', d);\n            const tc = unpackComb('pair', t);\n            assertDataValidInternal(dc.args[0], tc.args[0], ctx);\n            assertDataValidInternal(dc.args[1], tc.args[1], ctx);\n            return;\n        }\n        throw new MichelsonTypeError(t, `pair expected: ${JSON.stringify(d)}`, d);\n    }\n    switch (t.prim) {\n        // Atomic literals\n        case 'int':\n            if ('int' in d && isDecimal(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `integer value expected: ${JSON.stringify(d)}`, d);\n        case 'nat':\n        case 'mutez':\n            if ('int' in d && isNatural(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `natural value expected: ${JSON.stringify(d)}`, d);\n        case 'string':\n            if ('string' in d) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `string value expected: ${JSON.stringify(d)}`, d);\n        case 'bytes':\n        case 'bls12_381_g1':\n        case 'bls12_381_g2':\n            if ('bytes' in d && parseBytes(d.bytes) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `bytes value expected: ${JSON.stringify(d)}`, d);\n        case 'bool':\n            if ('prim' in d && (d.prim === 'True' || d.prim === 'False')) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `boolean value expected: ${JSON.stringify(d)}`, d);\n        case 'key_hash':\n            if ('string' in d &&\n                checkDecodeTezosID(d.string, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash') !== null) {\n                return;\n            }\n            else if ('bytes' in d) {\n                try {\n                    decodePublicKeyHashBytes(d);\n                    return;\n                }\n                catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, `key hash expected: ${JSON.stringify(d)}`, d);\n        case 'timestamp':\n            if (('string' in d || 'int' in d) && parseDate(d) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `timestamp expected: ${JSON.stringify(d)}`, d);\n        case 'address':\n            if ('string' in d) {\n                let address = d.string;\n                const ep = d.string.indexOf('%');\n                if (ep >= 0) {\n                    // trim entry point\n                    address = d.string.slice(0, ep);\n                }\n                if (checkDecodeTezosID(address, 'ED25519PublicKeyHash', 'SECP256K1PublicKeyHash', 'P256PublicKeyHash', 'ContractHash', 'TxRollupL2Address', 'RollupAddress') !== null) {\n                    return;\n                }\n            }\n            else if ('bytes' in d) {\n                try {\n                    decodeAddressBytes(d);\n                    return;\n                }\n                catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, `address expected: ${JSON.stringify(d)}`, d);\n        case 'key':\n            if ('string' in d &&\n                checkDecodeTezosID(d.string, 'ED25519PublicKey', 'SECP256K1PublicKey', 'P256PublicKey') !==\n                    null) {\n                return;\n            }\n            else if ('bytes' in d) {\n                try {\n                    decodePublicKeyBytes(d);\n                    return;\n                }\n                catch (err) {\n                    // ignore message\n                }\n            }\n            throw new MichelsonTypeError(t, `public key expected: ${JSON.stringify(d)}`, d);\n        case 'unit':\n            if ('prim' in d && d.prim === 'Unit') {\n                return;\n            }\n            throw new MichelsonTypeError(t, `unit value expected: ${JSON.stringify(d)}`, d);\n        case 'signature':\n            if ('bytes' in d ||\n                ('string' in d &&\n                    checkDecodeTezosID(d.string, 'ED25519Signature', 'SECP256K1Signature', 'P256Signature', 'GenericSignature') !== null)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `signature expected: ${JSON.stringify(d)}`, d);\n        case 'chain_id':\n            if ('bytes' in d || 'string' in d) {\n                const x = 'string' in d ? decodeBase58Check(d.string) : parseBytes(d.bytes);\n                if (x !== null) {\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, `chain id expected: ${JSON.stringify(d)}`, d);\n        // Complex types\n        case 'option':\n            if ('prim' in d) {\n                if (d.prim === 'None') {\n                    return;\n                }\n                else if (d.prim === 'Some') {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, `option expected: ${JSON.stringify(d)}`, d);\n        case 'list':\n        case 'set':\n            if (assertDataListIfAny(d)) {\n                //let prev: MichelsonData | undefined;\n                for (const v of d) {\n                    assertDataValidInternal(v, t.args[0], ctx);\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n        case 'or':\n            if ('prim' in d) {\n                if (d.prim === 'Left') {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                }\n                else if (d.prim === 'Right') {\n                    assertDataValidInternal(d.args[0], t.args[1], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, `union (or) expected: ${JSON.stringify(d)}`, d);\n        case 'lambda':\n            if (isFunction(d)) {\n                const ret = functionTypeInternal(d, [t.args[0]], ctx);\n                if ('failed' in ret) {\n                    throw new MichelsonTypeError(t, `function is failed with error type: ${ret.failed}`, d);\n                }\n                if (ret.length !== 1) {\n                    throw new MichelsonTypeError(t, 'function must return a value', d);\n                }\n                assertScalarTypesEqual(t.args[1], ret[0]);\n                return;\n            }\n            throw new MichelsonTypeError(t, `function expected: ${JSON.stringify(d)}`, d);\n        case 'map':\n        case 'big_map':\n            if (Array.isArray(d)) {\n                //let prev: MichelsonMapElt | undefined;\n                for (const v of d) {\n                    if (!('prim' in v) || v.prim !== 'Elt') {\n                        throw new MichelsonTypeError(t, `map elements expected: ${JSON.stringify(d)}`, d);\n                    }\n                    assertDataValidInternal(v.args[0], t.args[0], ctx);\n                    assertDataValidInternal(v.args[1], t.args[1], ctx);\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, `${t.prim} expected: ${JSON.stringify(d)}`, d);\n        case 'bls12_381_fr':\n            if (('int' in d && isDecimal(d.int)) || ('bytes' in d && parseBytes(d.bytes) !== null)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `BLS12-381 element expected: ${JSON.stringify(d)}`, d);\n        case 'sapling_state':\n            if (Array.isArray(d)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, `sapling state expected: ${JSON.stringify(d)}`, d);\n        case 'ticket':\n            assertDataValidInternal(d, {\n                prim: 'pair',\n                args: [{ prim: 'address' }, t.args[0], { prim: 'nat' }],\n            }, ctx);\n            return;\n        default:\n            throw new MichelsonTypeError(t, `type ${typeID(t)} don't have Michelson literal representation`, d);\n    }\n}\nfunction instructionListType(inst, stack, ctx) {\n    let ret = stack;\n    let s = stack;\n    let i = 0;\n    for (const op of inst) {\n        const ft = functionTypeInternal(op, s, ctx);\n        ret = ft;\n        if ('failed' in ft) {\n            break;\n        }\n        s = ft;\n        i++;\n    }\n    if ('failed' in ret &&\n        ret.level == 0 &&\n        (!('prim' in ret.failed) || ret.failed.prim !== 'never') &&\n        i !== inst.length - 1) {\n        throw new MichelsonInstructionError(inst, ret, 'FAIL must appear in a tail position');\n    }\n    if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {\n        const trace = {\n            op: inst,\n            in: stack,\n            out: ret,\n        };\n        ctx.traceCallback(trace);\n    }\n    return 'failed' in ret ? { failed: ret.failed, level: ret.level + 1 } : ret;\n}\nfunction functionTypeInternal(inst, stack, ctx) {\n    const proto = (ctx === null || ctx === void 0 ? void 0 : ctx.protocol) || DefaultProtocol;\n    if (Array.isArray(inst)) {\n        return instructionListType(inst, stack, ctx);\n    }\n    const instruction = inst; // Make it const for type guarding\n    // make sure the stack has enough number of arguments of specific types\n    function args(n, ...typeIds) {\n        if (stack.length < typeIds.length + n) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`);\n        }\n        let i = n;\n        for (const ids of typeIds) {\n            if (ids !== null && ids.length !== 0) {\n                let ii = 0;\n                while (ii < ids.length && ids[ii] !== typeID(stack[i])) {\n                    ii++;\n                }\n                if (ii === ids.length) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${typeID(stack[i])} instead`);\n                }\n            }\n            i++;\n        }\n        return stack.slice(n, typeIds.length + n);\n    }\n    function rethrow(fn) {\n        return (...args) => {\n            try {\n                return fn(...args);\n            }\n            catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                }\n                else {\n                    throw err;\n                }\n            }\n        };\n    }\n    function rethrowTypeGuard(fn) {\n        return (arg) => {\n            try {\n                return fn(arg);\n            }\n            catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                }\n                else {\n                    throw err;\n                }\n            }\n        };\n    }\n    const argAnn = rethrow(unpackAnnotations);\n    const ensureStacksEqual = rethrow(assertStacksEqual);\n    const ensureTypesEqual = rethrow(assertScalarTypesEqual);\n    const ensureComparableType = rethrowTypeGuard(assertMichelsonComparableType);\n    const ensurePackableType = rethrowTypeGuard(assertMichelsonPackableType);\n    const ensureStorableType = rethrowTypeGuard(assertMichelsonStorableType);\n    const ensurePushableType = rethrowTypeGuard(assertMichelsonPushableType);\n    const ensureBigMapStorableType = rethrowTypeGuard(assertMichelsonBigMapStorableType);\n    // unpack instruction annotations and assert their maximum number\n    function instructionAnn(num, opt) {\n        const a = argAnn(instruction, Object.assign(Object.assign({}, opt), { emptyFields: num.f !== undefined && num.f > 1, emptyVar: num.v !== undefined && num.v > 1 }));\n        const assertNum = (a, n, type) => {\n            if (a && a.length > (n || 0)) {\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`);\n            }\n        };\n        assertNum(a.f, num.f, 'field');\n        assertNum(a.t, num.t, 'type');\n        assertNum(a.v, num.v, 'variable');\n        return a;\n    }\n    // also keeps annotation class if null is provided\n    function annotate(tt, a) {\n        const tx = tt;\n        const t = Array.isArray(tx) ? { prim: 'pair', args: tx } : tx;\n        const src = argAnn(t);\n        const ann = a.v !== undefined || a.t !== undefined || a.f !== undefined\n            ? [\n                ...((a.v === null ? src.v : a.v) || []),\n                ...((a.t === null ? src.t : a.t) || []),\n                ...((a.f === null ? src.f : a.f) || []),\n            ]\n            : undefined;\n        const rest = __rest(t, [\"annots\"]);\n        return Object.assign(Object.assign({}, rest), (ann && ann.length !== 0 && { annots: ann }));\n    }\n    // shortcut to copy at most one variable annotation from the instruction to the type\n    function annotateVar(t, def) {\n        const ia = instructionAnn({ v: 1 });\n        return annotate(t, {\n            v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null,\n            t: null,\n        });\n    }\n    // annotate CAR/CDR/UNPAIR/GET\n    function annotateField(arg, field, insAnn, n, defField) {\n        var _a, _b, _c, _d;\n        const fieldAnn = (_a = argAnn(field).f) === null || _a === void 0 ? void 0 : _a[0]; // field's field annotation\n        const insFieldAnn = (_b = insAnn.f) === null || _b === void 0 ? void 0 : _b[n];\n        if (insFieldAnn !== undefined &&\n            insFieldAnn !== '%' &&\n            fieldAnn !== undefined &&\n            insFieldAnn !== fieldAnn) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: field names doesn't match: ${insFieldAnn} !== ${fieldAnn}`);\n        }\n        const insVarAnn = (_c = insAnn.v) === null || _c === void 0 ? void 0 : _c[n]; // nth instruction's variable annotation\n        const varAnn = (_d = argAnn(arg).v) === null || _d === void 0 ? void 0 : _d[0]; // instruction argument's variable annotation\n        return annotate(field, {\n            t: null,\n            v: insVarAnn\n                ? insVarAnn === '@%'\n                    ? fieldAnn\n                        ? ['@' + fieldAnn.slice(1)]\n                        : undefined\n                    : insVarAnn === '@%%'\n                        ? varAnn\n                            ? ['@' + varAnn.slice(1) + '.' + (fieldAnn ? fieldAnn.slice(1) : defField)]\n                            : fieldAnn\n                                ? ['@' + fieldAnn.slice(1)]\n                                : undefined\n                        : [insVarAnn]\n                : null,\n        });\n    }\n    // comb helper functions\n    function getN(src, n, i = n) {\n        const p = unpackComb('pair', src);\n        if (i === 1) {\n            return [p.args[0]];\n        }\n        else if (i === 2) {\n            return p.args;\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return [p.args[0], ...getN(right, n, i - 1)];\n        }\n        else {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n} fields are expected`);\n        }\n    }\n    function getNth(src, n, i = n) {\n        if (i === 0) {\n            return src;\n        }\n        const p = unpackComb('pair', src);\n        if (i === 1) {\n            return p.args[0];\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return getNth(right, n, i - 2);\n        }\n        else if (i === 2) {\n            return right;\n        }\n        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n    }\n    function updateNth(src, x, n, i = n) {\n        if (i === 0) {\n            return x;\n        }\n        const p = unpackComb('pair', src);\n        if (i === 1) {\n            return Object.assign(Object.assign({}, p), { args: [x, p.args[1]] });\n        }\n        const right = p.args[1];\n        if (isPairType(right)) {\n            return Object.assign(Object.assign({}, p), { args: [p.args[0], updateNth(right, x, n, i - 2)] });\n        }\n        else if (i === 2) {\n            return Object.assign(Object.assign({}, p), { args: [p.args[0], x] });\n        }\n        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at least ${n + 1} fields are expected`);\n    }\n    const varSuffix = (a, suffix) => [\n        '@' + (a.v ? a.v[0].slice(1) + '.' : '') + suffix,\n    ];\n    function branchType(br0, br1) {\n        if ('failed' in br0 || 'failed' in br1) {\n            return 'failed' in br0 ? br1 : br0;\n        }\n        else {\n            ensureStacksEqual(br0, br1);\n            return br0;\n        }\n    }\n    const retStack = ((instruction) => {\n        var _a, _b, _c, _d, _e;\n        switch (instruction.prim) {\n            case 'DUP': {\n                const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 1;\n                if (n === 0) {\n                    throw new MichelsonInstructionError(instruction, stack, 'DUP 0 is forbidden');\n                }\n                const s = args(n - 1, null)[0];\n                if (typeID(s) === 'ticket') {\n                    throw new MichelsonInstructionError(instruction, stack, \"ticket can't be DUPed\");\n                }\n                return [s, ...stack];\n            }\n            case 'SWAP': {\n                const s = args(0, null, null);\n                instructionAnn({});\n                return [s[1], s[0], ...stack.slice(2)];\n            }\n            case 'SOME':\n                return [\n                    annotate({ prim: 'option', args: [args(0, null)[0]] }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack.slice(1),\n                ];\n            case 'UNIT':\n                return [annotate({ prim: 'unit' }, instructionAnn({ v: 1, t: 1 })), ...stack];\n            case 'PAIR': {\n                const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n                if (n < 2) {\n                    throw new MichelsonInstructionError(instruction, stack, `PAIR ${n} is forbidden`);\n                }\n                const s = args(0, ...new Array(n).fill(null));\n                const ia = instructionAnn({ f: n, t: 1, v: 1 }, { specialFields: true });\n                const trim = (s) => {\n                    const i = s.lastIndexOf('.');\n                    return s.slice(i > 0 ? i + 1 : 1);\n                };\n                const retArgs = s.map((v, i) => {\n                    var _a;\n                    const va = argAnn(v);\n                    const f = ia.f && ia.f.length > i && ia.f[i] !== '%'\n                        ? ia.f[i] === '%@'\n                            ? va.v\n                                ? ['%' + trim(((_a = va.v) === null || _a === void 0 ? void 0 : _a[0]) || '')]\n                                : undefined\n                            : [ia.f[i]]\n                        : undefined;\n                    return annotate(v, { v: null, t: null, f });\n                });\n                return [\n                    annotate({\n                        prim: 'pair',\n                        args: retArgs,\n                    }, { t: ia.t, v: ia.v }),\n                    ...stack.slice(n),\n                ];\n            }\n            case 'UNPAIR': {\n                const n = instruction.args ? parseInt(instruction.args[0].int, 10) : 2;\n                if (n < 2) {\n                    throw new MichelsonInstructionError(instruction, stack, `UNPAIR ${n} is forbidden`);\n                }\n                const s = args(0, ['pair'])[0];\n                const ia = instructionAnn({ f: 2, v: 2 }, { specialVar: true });\n                const fields = getN(s, n);\n                return [\n                    ...fields.map((field, i) => annotateField(s, field, ia, i, i === 0 ? 'car' : 'cdr')),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'CAR':\n            case 'CDR': {\n                const s = unpackComb('pair', args(0, ['pair'])[0]);\n                const field = s.args[instruction.prim === 'CAR' ? 0 : 1];\n                const ia = instructionAnn({ f: 1, v: 1 }, { specialVar: true });\n                return [\n                    annotateField(s, field, ia, 0, instruction.prim.toLocaleLowerCase()),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'CONS': {\n                const s = args(0, null, ['list']);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                return [annotateVar({ prim: 'list', args: [s[1].args[0]] }), ...stack.slice(2)];\n            }\n            case 'SIZE':\n                args(0, ['string', 'list', 'set', 'map', 'bytes']);\n                return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n            case 'MEM': {\n                const s = args(0, null, ['set', 'map', 'big_map']);\n                ensureComparableType(s[0]);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                return [annotateVar({ prim: 'bool' }), ...stack.slice(2)];\n            }\n            case 'GET':\n                if (instruction.args) {\n                    // comb operation\n                    const n = parseInt(instruction.args[0].int, 10);\n                    const s = args(0, ['pair'])[0];\n                    return [annotateVar(getNth(s, n)), ...stack.slice(1)];\n                }\n                else {\n                    // map operation\n                    const s = args(0, null, ['map', 'big_map']);\n                    ensureComparableType(s[0]);\n                    ensureTypesEqual(s[0], s[1].args[0]);\n                    return [annotateVar({ prim: 'option', args: [s[1].args[1]] }), ...stack.slice(2)];\n                }\n            case 'UPDATE':\n                if (instruction.args) {\n                    // comb operation\n                    const n = parseInt(instruction.args[0].int, 10);\n                    const s = args(0, null, ['pair']);\n                    return [annotateVar(updateNth(s[1], s[0], n)), ...stack.slice(2)];\n                }\n                else {\n                    // map operation\n                    const s0 = args(0, null, ['bool', 'option']);\n                    ensureComparableType(s0[0]);\n                    if (s0[1].prim === 'bool') {\n                        const s1 = args(2, ['set']);\n                        ensureTypesEqual(s0[0], s1[0].args[0]);\n                        return [\n                            annotateVar({\n                                prim: 'set',\n                                args: [annotate(s0[0], { t: null })],\n                            }),\n                            ...stack.slice(3),\n                        ];\n                    }\n                    const s1 = args(2, ['map', 'big_map']);\n                    ensureTypesEqual(s0[0], s1[0].args[0]);\n                    if (s1[0].prim === 'map') {\n                        return [\n                            annotateVar({\n                                prim: 'map',\n                                args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n                            }),\n                            ...stack.slice(3),\n                        ];\n                    }\n                    ensureBigMapStorableType(s0[1].args[0]);\n                    return [\n                        annotateVar({\n                            prim: 'big_map',\n                            args: [annotate(s0[0], { t: null }), annotate(s0[1].args[0], { t: null })],\n                        }),\n                        ...stack.slice(3),\n                    ];\n                }\n            case 'GET_AND_UPDATE': {\n                const ia = instructionAnn({ v: 2 });\n                const s = args(0, null, ['option'], ['map', 'big_map']);\n                ensureComparableType(s[0]);\n                ensureTypesEqual(s[0], s[2].args[0]);\n                ensureTypesEqual(s[1].args[0], s[2].args[1]);\n                const va = (_a = ia.v) === null || _a === void 0 ? void 0 : _a.map((v) => (v !== '@' ? [v] : undefined));\n                if (s[2].prim === 'map') {\n                    return [\n                        annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va === null || va === void 0 ? void 0 : va[0] }),\n                        annotate({\n                            prim: 'map',\n                            args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n                        }, { v: va === null || va === void 0 ? void 0 : va[1] }),\n                        ...stack.slice(3),\n                    ];\n                }\n                ensureBigMapStorableType(s[1].args[0]);\n                return [\n                    annotate({ prim: 'option', args: [s[2].args[1]] }, { v: va === null || va === void 0 ? void 0 : va[0] }),\n                    annotate({\n                        prim: 'big_map',\n                        args: [annotate(s[0], { t: null }), annotate(s[1].args[0], { t: null })],\n                    }, { v: va === null || va === void 0 ? void 0 : va[1] }),\n                    ...stack.slice(3),\n                ];\n            }\n            case 'EXEC': {\n                const s = args(0, null, ['lambda']);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                return [annotateVar(s[1].args[1]), ...stack.slice(2)];\n            }\n            case 'APPLY': {\n                const s = args(0, null, ['lambda']);\n                ensureStorableType(s[0]);\n                ensurePushableType(s[0]);\n                if (!isPairType(s[1].args[0])) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function's argument must be a pair: ${typeID(s[1].args[0])}`);\n                }\n                const pt = s[1].args[0];\n                ensureTypesEqual(s[0], typeArgs(pt)[0]);\n                return [\n                    annotateVar({ prim: 'lambda', args: [typeArgs(pt)[1], s[1].args[1]] }),\n                    ...stack.slice(2),\n                ];\n            }\n            case 'FAILWITH': {\n                const s = args(0, null)[0];\n                if (!ProtoInferiorTo(proto, Protocol.PtEdo2Zk)) {\n                    ensurePackableType(s);\n                }\n                return { failed: s, level: 0 };\n            }\n            case 'NEVER':\n                args(0, ['never']);\n                return { failed: { prim: 'never' }, level: 0 };\n            case 'RENAME':\n                return [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n            case 'CONCAT': {\n                const s0 = args(0, ['string', 'list', 'bytes']);\n                if (s0[0].prim === 'list') {\n                    if (typeID(s0[0].args[0]) !== 'string' && typeID(s0[0].args[0]) !== 'bytes') {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate list of ${typeID(s0[0].args[0])}'s`);\n                    }\n                    return [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n                }\n                const s1 = args(1, ['string', 'bytes']);\n                if (s0[0].prim !== s1[0].prim) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`);\n                }\n                return [annotateVar(s1[0]), ...stack.slice(2)];\n            }\n            case 'SLICE':\n                return [\n                    annotateVar({ prim: 'option', args: [args(0, ['nat'], ['nat'], ['string', 'bytes'])[2]] }, '@slice'),\n                    ...stack.slice(3),\n                ];\n            case 'PACK': {\n                const s = args(0, null)[0];\n                ensurePackableType(s);\n                return [annotateVar({ prim: 'bytes' }, '@packed'), ...stack.slice(1)];\n            }\n            case 'ADD': {\n                const s = args(0, ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'], ['nat', 'int', 'timestamp', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']);\n                if ((s[0].prim === 'nat' && s[1].prim === 'int') ||\n                    (s[0].prim === 'int' && s[1].prim === 'nat')) {\n                    return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n                }\n                else if ((s[0].prim === 'int' && s[1].prim === 'timestamp') ||\n                    (s[0].prim === 'timestamp' && s[1].prim === 'int')) {\n                    return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n                }\n                else if ((s[0].prim === 'int' ||\n                    s[0].prim === 'nat' ||\n                    s[0].prim === 'mutez' ||\n                    s[0].prim === 'bls12_381_g1' ||\n                    s[0].prim === 'bls12_381_g2' ||\n                    s[0].prim === 'bls12_381_fr') &&\n                    s[0].prim === s[1].prim) {\n                    return [annotateVar(s[0]), ...stack.slice(2)];\n                }\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`);\n            }\n            case 'SUB': {\n                const s = ProtoInferiorTo(proto, Protocol.PsiThaCa)\n                    ? args(0, ['nat', 'int', 'timestamp', 'mutez'], ['nat', 'int', 'timestamp', 'mutez'])\n                    : args(0, ['nat', 'int', 'timestamp'], ['nat', 'int', 'timestamp']);\n                if (((s[0].prim === 'nat' || s[0].prim === 'int') &&\n                    (s[1].prim === 'nat' || s[1].prim === 'int')) ||\n                    (s[0].prim === 'timestamp' && s[1].prim === 'timestamp')) {\n                    return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n                }\n                else if (s[0].prim === 'timestamp' && s[1].prim === 'int') {\n                    return [annotateVar({ prim: 'timestamp' }), ...stack.slice(2)];\n                }\n                else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n                    return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n                }\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`);\n            }\n            case 'SUB_MUTEZ': {\n                args(0, ['mutez'], ['mutez']);\n                return [annotateVar({ prim: 'option', args: [{ prim: 'mutez' }] }), ...stack.slice(2)];\n            }\n            case 'MUL': {\n                const s = args(0, ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'], ['nat', 'int', 'mutez', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr']);\n                if ((s[0].prim === 'nat' && s[1].prim === 'int') ||\n                    (s[0].prim === 'int' && s[1].prim === 'nat')) {\n                    return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n                }\n                else if ((s[0].prim === 'nat' && s[1].prim === 'mutez') ||\n                    (s[0].prim === 'mutez' && s[1].prim === 'nat')) {\n                    return [annotateVar({ prim: 'mutez' }), ...stack.slice(2)];\n                }\n                else if (((s[0].prim === 'bls12_381_g1' ||\n                    s[0].prim === 'bls12_381_g2' ||\n                    s[0].prim === 'bls12_381_fr') &&\n                    s[1].prim === 'bls12_381_fr') ||\n                    ((s[0].prim === 'nat' || s[0].prim === 'int') && s[0].prim === s[1].prim)) {\n                    return [annotateVar(s[0]), ...stack.slice(2)];\n                }\n                else if (((s[0].prim === 'nat' || s[0].prim === 'int') && s[1].prim === 'bls12_381_fr') ||\n                    ((s[1].prim === 'nat' || s[1].prim === 'int') && s[0].prim === 'bls12_381_fr')) {\n                    return [annotateVar({ prim: 'bls12_381_fr' }), ...stack.slice(2)];\n                }\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`);\n            }\n            case 'EDIV': {\n                const res = (a, b) => ({\n                    prim: 'option',\n                    args: [{ prim: 'pair', args: [{ prim: a }, { prim: b }] }],\n                });\n                const s = args(0, ['nat', 'int', 'mutez'], ['nat', 'int', 'mutez']);\n                if (s[0].prim === 'nat' && s[1].prim === 'nat') {\n                    return [annotateVar(res('nat', 'nat')), ...stack.slice(2)];\n                }\n                else if ((s[0].prim === 'nat' || s[0].prim === 'int') &&\n                    (s[1].prim === 'nat' || s[1].prim === 'int')) {\n                    return [annotateVar(res('int', 'nat')), ...stack.slice(2)];\n                }\n                else if (s[0].prim === 'mutez' && s[1].prim === 'nat') {\n                    return [annotateVar(res('mutez', 'mutez')), ...stack.slice(2)];\n                }\n                else if (s[0].prim === 'mutez' && s[1].prim === 'mutez') {\n                    return [annotateVar(res('nat', 'mutez')), ...stack.slice(2)];\n                }\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`);\n            }\n            case 'ABS':\n                args(0, ['int']);\n                return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n            case 'ISNAT':\n                args(0, ['int']);\n                return [annotateVar({ prim: 'option', args: [{ prim: 'nat' }] }), ...stack.slice(1)];\n            case 'INT':\n                args(0, ['nat', 'bls12_381_fr', 'bytes']);\n                return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n            case 'BYTES':\n                args(0, ['nat', 'int']);\n                return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n            case 'NAT':\n                args(0, ['bytes']);\n                return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n            case 'NEG': {\n                const s = args(0, ['nat', 'int', 'bls12_381_g1', 'bls12_381_g2', 'bls12_381_fr'])[0];\n                if (s.prim === 'nat' || s.prim === 'int') {\n                    return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n                }\n                return [annotateVar(s), ...stack.slice(1)];\n            }\n            case 'LSL':\n            case 'LSR':\n                args(0, ['nat', 'bytes'], ['nat', 'bytes']);\n                return [annotateVar({ prim: 'nat' }), ...stack.slice(2)];\n            case 'OR':\n            case 'XOR': {\n                const s = args(0, ['nat', 'bytes', 'bool'], ['nat', 'bytes', 'bool']);\n                if (s[0].prim !== s[1].prim) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                }\n                return [annotateVar(s[1]), ...stack.slice(2)];\n            }\n            case 'AND': {\n                const s = args(0, ['nat', 'bytes', 'bool', 'int'], ['nat', 'bytes', 'bool']);\n                if ((s[0].prim !== 'int' || s[1].prim !== 'nat') && s[0].prim !== s[1].prim) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                }\n                return [annotateVar(s[1]), ...stack.slice(2)];\n            }\n            case 'NOT': {\n                const s = args(0, ['nat', 'bytes', 'bool', 'int'])[0];\n                if (s.prim === 'bool') {\n                    return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n                }\n                return [annotateVar({ prim: 'int' }), ...stack.slice(1)];\n            }\n            case 'COMPARE': {\n                const s = args(0, null, null);\n                ensureComparableType(s[0]);\n                ensureComparableType(s[1]);\n                return [annotateVar({ prim: 'int' }), ...stack.slice(2)];\n            }\n            case 'EQ':\n            case 'NEQ':\n            case 'LT':\n            case 'GT':\n            case 'LE':\n            case 'GE':\n                args(0, ['int']);\n                return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n            case 'SELF': {\n                if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) === undefined) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract required`);\n                }\n                const ia = instructionAnn({ f: 1, v: 1 });\n                const ep = contractEntryPoint(ctx.contract, (_b = ia.f) === null || _b === void 0 ? void 0 : _b[0]);\n                if (ep === null) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n                }\n                return [\n                    annotate({ prim: 'contract', args: [ep] }, { v: ia.v ? ia.v : ['@self'] }),\n                    ...stack,\n                ];\n            }\n            case 'TRANSFER_TOKENS': {\n                const s = args(0, null, ['mutez'], ['contract']);\n                ensureTypesEqual(s[0], s[2].args[0]);\n                return [annotateVar({ prim: 'operation' }), ...stack.slice(3)];\n            }\n            case 'SET_DELEGATE': {\n                const s = args(0, ['option'])[0];\n                if (typeID(s.args[0]) !== 'key_hash') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s.args[0])}`);\n                }\n                return [annotateVar({ prim: 'operation' }), ...stack.slice(1)];\n            }\n            case 'IMPLICIT_ACCOUNT':\n                args(0, ['key_hash']);\n                return [annotateVar({ prim: 'contract', args: [{ prim: 'unit' }] }), ...stack.slice(1)];\n            case 'NOW':\n                return [annotateVar({ prim: 'timestamp' }, '@now'), ...stack];\n            case 'AMOUNT':\n                return [annotateVar({ prim: 'mutez' }, '@amount'), ...stack];\n            case 'BALANCE':\n                return [annotateVar({ prim: 'mutez' }, '@balance'), ...stack];\n            case 'CHECK_SIGNATURE':\n                args(0, ['key'], ['signature'], ['bytes']);\n                return [annotateVar({ prim: 'bool' }), ...stack.slice(3)];\n            case 'BLAKE2B':\n            case 'SHA256':\n            case 'SHA512':\n            case 'KECCAK':\n            case 'SHA3':\n                args(0, ['bytes']);\n                return [annotateVar({ prim: 'bytes' }), ...stack.slice(1)];\n            case 'HASH_KEY':\n                args(0, ['key']);\n                return [annotateVar({ prim: 'key_hash' }), ...stack.slice(1)];\n            case 'SOURCE':\n                return [annotateVar({ prim: 'address' }, '@source'), ...stack];\n            case 'SENDER':\n                return [annotateVar({ prim: 'address' }, '@sender'), ...stack];\n            case 'ADDRESS': {\n                const s = args(0, ['contract'])[0];\n                const ia = instructionAnn({ v: 1 });\n                return [\n                    annotate({ prim: 'address', [refContract]: s }, { v: ia.v ? ia.v : varSuffix(argAnn(s), 'address') }),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'SELF_ADDRESS': {\n                const addr = { prim: 'address' };\n                if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) !== undefined) {\n                    addr[refContract] = {\n                        prim: 'contract',\n                        args: [contractSection(ctx.contract, 'parameter').args[0]],\n                    };\n                }\n                return [annotateVar(addr, '@address'), ...stack];\n            }\n            case 'CHAIN_ID':\n                return [annotateVar({ prim: 'chain_id' }), ...stack];\n            case 'DROP': {\n                instructionAnn({});\n                const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n                args(n - 1, null);\n                return stack.slice(n);\n            }\n            case 'DIG': {\n                instructionAnn({});\n                const n = parseInt(instruction.args[0].int, 10);\n                return [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n            }\n            case 'DUG': {\n                instructionAnn({});\n                const n = parseInt(instruction.args[0].int, 10);\n                return [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n            }\n            case 'NONE':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [\n                    annotate({ prim: 'option', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack,\n                ];\n            case 'LEFT':\n            case 'RIGHT': {\n                const s = args(0, null)[0];\n                const ia = instructionAnn({ f: 2, t: 1, v: 1 }, { specialFields: true });\n                const va = argAnn(s);\n                const children = [\n                    annotate(s, {\n                        t: null,\n                        v: null,\n                        f: ia.f && ia.f.length > 0 && ia.f[0] !== '%'\n                            ? ia.f[0] === '%@'\n                                ? va.v\n                                    ? ['%' + va.v[0].slice(1)]\n                                    : undefined\n                                : ia.f\n                            : undefined,\n                    }),\n                    annotate(instruction.args[0], {\n                        t: null,\n                        f: ia.f && ia.f.length > 1 && ia.f[1] !== '%' ? ia.f : undefined,\n                    }),\n                ];\n                return [\n                    annotate({\n                        prim: 'or',\n                        args: instruction.prim === 'LEFT' ? children : [children[1], children[0]],\n                    }, { t: ia.t, v: ia.v }),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'NIL':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [\n                    annotate({ prim: 'list', args: [instruction.args[0]] }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack,\n                ];\n            case 'UNPACK':\n                args(0, ['bytes']);\n                assertTypeAnnotationsValid(instruction.args[0]);\n                return [\n                    annotateVar({ prim: 'option', args: [instruction.args[0]] }, '@unpacked'),\n                    ...stack.slice(1),\n                ];\n            case 'CONTRACT': {\n                const s = args(0, ['address'])[0];\n                assertTypeAnnotationsValid(instruction.args[0]);\n                const ia = instructionAnn({ v: 1, f: 1 });\n                const contract = s[refContract];\n                if (contract !== undefined) {\n                    const ep = contractEntryPoint(contract, (_c = ia.f) === null || _c === void 0 ? void 0 : _c[0]);\n                    if (ep === null) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint ${ep}`);\n                    }\n                    ensureTypesEqual(ep, instruction.args[0]);\n                }\n                return [\n                    annotate({ prim: 'option', args: [{ prim: 'contract', args: [instruction.args[0]] }] }, { v: ia.v ? ia.v : varSuffix(argAnn(s), 'contract') }),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'CAST': {\n                instructionAnn({});\n                const s = args(0, null)[0];\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureTypesEqual(instruction.args[0], s);\n                return [instruction.args[0], ...stack.slice(1)];\n            }\n            case 'IF_NONE': {\n                instructionAnn({});\n                const s = args(0, ['option'])[0];\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                const br1 = functionTypeInternal(instruction.args[1], [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'some') }), ...tail], ctx);\n                return branchType(br0, br1);\n            }\n            case 'IF_LEFT': {\n                instructionAnn({});\n                const s = args(0, ['or'])[0];\n                const va = argAnn(s);\n                const lefta = argAnn(s.args[0]);\n                const righta = argAnn(s.args[1]);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], [\n                    annotate(s.args[0], {\n                        t: null,\n                        v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : 'left'),\n                    }),\n                    ...tail,\n                ], ctx);\n                const br1 = functionTypeInternal(instruction.args[1], [\n                    annotate(s.args[1], {\n                        t: null,\n                        v: varSuffix(va, righta.f ? righta.f[0].slice(1) : 'right'),\n                    }),\n                    ...tail,\n                ], ctx);\n                return branchType(br0, br1);\n            }\n            case 'IF_CONS': {\n                instructionAnn({});\n                const s = args(0, ['list'])[0];\n                const va = argAnn(s);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], [\n                    annotate(s.args[0], { t: null, v: varSuffix(va, 'hd') }),\n                    annotate(s, { t: null, v: varSuffix(va, 'tl') }),\n                    ...tail,\n                ], ctx);\n                const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                return branchType(br0, br1);\n            }\n            case 'IF': {\n                instructionAnn({});\n                args(0, ['bool']);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                return branchType(br0, br1);\n            }\n            case 'MAP': {\n                const s = args(0, ['list', 'map', 'option'])[0];\n                const tail = stack.slice(1);\n                const elt = s.prim === 'map' ? { prim: 'pair', args: s.args } : s.args[0];\n                const body = functionTypeInternal(instruction.args[0], [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail], ctx);\n                if ('failed' in body) {\n                    if (!('prim' in body.failed) || body.failed.prim !== 'never') {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: FAIL is not allowed in MAP`);\n                    }\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                if (body.length < 1) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                }\n                ensureStacksEqual(body.slice(1), tail);\n                return s.prim === 'list'\n                    ? [annotateVar({ prim: 'list', args: [body[0]] }), ...tail]\n                    : s.prim === 'map'\n                        ? [annotateVar({ prim: 'map', args: [s.args[0], body[0]] }), ...tail]\n                        : [annotateVar({ prim: 'option', args: [body[0]] }), ...tail];\n            }\n            case 'ITER': {\n                instructionAnn({});\n                const s = args(0, ['set', 'list', 'map'])[0];\n                const tail = stack.slice(1);\n                const elt = s.prim === 'map' ? { prim: 'pair', args: s.args } : s.args[0];\n                const body = functionTypeInternal(instruction.args[0], [annotate(elt, { t: null, v: varSuffix(argAnn(s), 'elt') }), ...tail], ctx);\n                if ('failed' in body) {\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                ensureStacksEqual(body, tail);\n                return tail;\n            }\n            case 'LOOP': {\n                instructionAnn({});\n                args(0, ['bool']);\n                const tail = stack.slice(1);\n                const body = functionTypeInternal(instruction.args[0], tail, ctx);\n                if ('failed' in body) {\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                ensureStacksEqual(body, [{ prim: 'bool' }, ...tail]);\n                return tail;\n            }\n            case 'LOOP_LEFT': {\n                instructionAnn({});\n                const s = args(0, ['or'])[0];\n                const tail = stack.slice(1);\n                const body = functionTypeInternal(instruction.args[0], [annotate(s.args[0], { t: null, v: varSuffix(argAnn(s), 'left') }), ...tail], ctx);\n                if ('failed' in body) {\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                ensureStacksEqual(body, [s, ...tail]);\n                return [annotate(s.args[1], { t: null, v: instructionAnn({ v: 1 }).v }), ...tail];\n            }\n            case 'DIP': {\n                instructionAnn({});\n                const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n                args(n - 1, null);\n                const head = stack.slice(0, n);\n                const tail = stack.slice(n);\n                // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n                const body = instruction.args.length === 2\n                    ? functionTypeInternal(instruction.args[1], tail, ctx)\n                    : functionTypeInternal(instruction.args[0], tail, ctx);\n                if ('failed' in body) {\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                return [...head, ...body];\n            }\n            case 'CREATE_CONTRACT': {\n                const ia = instructionAnn({ v: 2 });\n                const s = args(0, ['option'], ['mutez'], null);\n                if (typeID(s[0].args[0]) !== 'key_hash') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${typeID(s[0].args[0])}`);\n                }\n                if (ensureStorableType(s[2])) {\n                    assertContractValid(instruction.args[0]);\n                    assertScalarTypesEqual(contractSection(instruction.args[0], 'storage').args[0], s[2]);\n                }\n                const va = (_d = ia.v) === null || _d === void 0 ? void 0 : _d.map((v) => (v !== '@' ? [v] : undefined));\n                return [\n                    annotate({ prim: 'operation' }, { v: va === null || va === void 0 ? void 0 : va[0] }),\n                    annotate({\n                        prim: 'address',\n                        [refContract]: {\n                            prim: 'contract',\n                            args: [contractSection(instruction.args[0], 'parameter').args[0]],\n                        },\n                    }, { v: va === null || va === void 0 ? void 0 : va[1] }),\n                    ...stack.slice(3),\n                ];\n            }\n            case 'PUSH':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                assertDataValidInternal(instruction.args[1], instruction.args[0], Object.assign(Object.assign({}, ctx), { contract: undefined }));\n                return [annotateVar(instruction.args[0]), ...stack];\n            case 'EMPTY_SET':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                return [\n                    annotate({ prim: 'set', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack,\n                ];\n            case 'EMPTY_MAP':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                return [\n                    annotate({ prim: 'map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack,\n                ];\n            case 'EMPTY_BIG_MAP':\n                assertTypeAnnotationsValid(instruction.args[0]);\n                ensureComparableType(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                ensureBigMapStorableType(instruction.args[0]);\n                return [\n                    annotate({ prim: 'big_map', args: instruction.args }, instructionAnn({ t: 1, v: 1 })),\n                    ...stack,\n                ];\n            case 'LAMBDA_REC':\n            case 'LAMBDA': {\n                assertTypeAnnotationsValid(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                const s = [instruction.args[0]];\n                if (instruction.prim === 'LAMBDA_REC') {\n                    s.push({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] });\n                }\n                const body = functionTypeInternal(instruction.args[2], s, Object.assign(Object.assign({}, ctx), { contract: undefined }));\n                if ('failed' in body) {\n                    return { failed: body.failed, level: body.level + 1 };\n                }\n                if (body.length !== 1) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                }\n                ensureTypesEqual(instruction.args[1], body[0]);\n                return [\n                    annotateVar({ prim: 'lambda', args: [instruction.args[0], instruction.args[1]] }),\n                    ...stack,\n                ];\n            }\n            case 'LEVEL':\n                return [annotateVar({ prim: 'nat' }, '@level'), ...stack];\n            case 'TOTAL_VOTING_POWER':\n                return [annotateVar({ prim: 'nat' }), ...stack];\n            case 'VOTING_POWER':\n                args(0, ['key_hash']);\n                return [annotateVar({ prim: 'nat' }), ...stack.slice(1)];\n            case 'TICKET': {\n                const s = args(0, null, ['nat'])[0];\n                ensureComparableType(s);\n                if (ProtoInferiorTo(proto, Protocol.PtLimaPtL)) {\n                    return [\n                        annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 })),\n                        ...stack.slice(2),\n                    ];\n                }\n                else {\n                    return [\n                        annotateVar({\n                            prim: 'option',\n                            args: [annotate({ prim: 'ticket', args: [s] }, instructionAnn({ t: 1, v: 1 }))],\n                        }),\n                        ...stack.slice(2),\n                    ];\n                }\n            }\n            case 'JOIN_TICKETS': {\n                const s = unpackComb('pair', args(0, ['pair'])[0]);\n                if (typeID(s.args[0]) !== 'ticket') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: ticket expected: ${typeID(s.args[0])}`);\n                }\n                ensureTypesEqual(s.args[0], s.args[1]);\n                return [\n                    annotateVar({\n                        prim: 'option',\n                        args: [annotate(s.args[0], { t: null })],\n                    }),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'SPLIT_TICKET': {\n                const s = args(0, ['ticket'], ['pair']);\n                const p = unpackComb('pair', s[1]);\n                if (typeID(p.args[0]) !== 'nat') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: nat expected: ${typeID(p.args[0])}`);\n                }\n                ensureTypesEqual(p.args[0], p.args[1]);\n                return [\n                    annotateVar({\n                        prim: 'option',\n                        args: [\n                            {\n                                prim: 'pair',\n                                args: [annotate(s[0], { t: null }), annotate(s[0], { t: null })],\n                            },\n                        ],\n                    }),\n                    ...stack.slice(2),\n                ];\n            }\n            case 'READ_TICKET': {\n                const ia = instructionAnn({ v: 2 });\n                const s = args(0, ['ticket'])[0];\n                const va = (_e = ia.v) === null || _e === void 0 ? void 0 : _e.map((v) => (v !== '@' ? [v] : undefined));\n                return [\n                    annotate({\n                        prim: 'pair',\n                        args: [{ prim: 'address' }, annotate(s.args[0], { t: null }), { prim: 'nat' }],\n                    }, { v: va === null || va === void 0 ? void 0 : va[0] }),\n                    annotate(s, { v: va === null || va === void 0 ? void 0 : va[1], t: null }),\n                    ...stack.slice(1),\n                ];\n            }\n            case 'PAIRING_CHECK': {\n                const p = args(0, ['list'])[0].args[0];\n                if (!isPairType(p)) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: pair expected: ${typeID(p)}`);\n                }\n                const c = unpackComb('pair', p);\n                if (typeID(c.args[0]) !== 'bls12_381_g1') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g1 expected: ${typeID(c.args[0])}`);\n                }\n                if (typeID(c.args[1]) !== 'bls12_381_g2') {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: bls12_381_g2 expected: ${typeID(c.args[1])}`);\n                }\n                return [annotateVar({ prim: 'bool' }), ...stack.slice(1)];\n            }\n            case 'SAPLING_EMPTY_STATE':\n                return [\n                    annotate({ prim: 'sapling_state', args: [instruction.args[0]] }, instructionAnn({ v: 1, t: 1 })),\n                    ...stack,\n                ];\n            case 'SAPLING_VERIFY_UPDATE': {\n                const s = args(0, ['sapling_transaction'], ['sapling_state']);\n                if (parseInt(s[0].args[0].int, 10) !== parseInt(s[1].args[0].int, 10)) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: sapling memo size mismatch: ${s[0].args[0].int} != ${s[1].args[0].int}`);\n                }\n                return ProtoInferiorTo(proto, Protocol.PtJakarta)\n                    ? [\n                        annotateVar({\n                            prim: 'option',\n                            args: [\n                                {\n                                    prim: 'pair',\n                                    args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                                },\n                            ],\n                        }),\n                        ...stack.slice(2),\n                    ]\n                    : [\n                        annotateVar({\n                            prim: 'option',\n                            args: [\n                                {\n                                    prim: 'pair',\n                                    args: [\n                                        { prim: 'bytes' },\n                                        {\n                                            prim: 'pair',\n                                            args: [{ prim: 'int' }, annotate(s[1], { t: null })],\n                                        },\n                                    ],\n                                },\n                            ],\n                        }),\n                        ...stack.slice(2),\n                    ];\n            }\n            case 'OPEN_CHEST':\n                args(0, ['chest_key'], ['chest'], ['nat']);\n                return [\n                    annotateVar({ prim: 'or', args: [{ prim: 'bytes' }, { prim: 'bool' }] }),\n                    ...stack.slice(3),\n                ];\n            case 'VIEW': {\n                const s = args(0, null, ['address']);\n                ensurePushableType(s[0]);\n                return [annotateVar({ prim: 'option', args: [instruction.args[1]] }), ...stack.slice(2)];\n            }\n            case 'MIN_BLOCK_TIME':\n                return [annotateVar({ prim: 'nat' }), ...stack];\n            case 'EMIT': {\n                const ia = instructionAnn({ f: 1, t: 1 });\n                if (instruction.args) {\n                    const s = args(0, null);\n                    ensureTypesEqual(s[0], instruction.args[0]);\n                    return [annotate({ prim: 'operation' }, ia), ...stack.slice(1)];\n                }\n                return [annotate({ prim: 'operation' }, ia), ...stack.slice(1)];\n            }\n            default:\n                throw new MichelsonError(instruction, `unexpected instruction: ${instruction.prim}`);\n        }\n    })(instruction);\n    if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {\n        const trace = {\n            op: instruction,\n            in: stack,\n            out: retStack,\n        };\n        ctx.traceCallback(trace);\n    }\n    return retStack;\n}\nfunction contractSection(contract, section) {\n    for (const s of contract) {\n        if (s.prim === section) {\n            return s;\n        }\n    }\n    throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\nfunction contractViews(contract) {\n    const views = {};\n    for (const s of contract) {\n        if (s.prim === 'view') {\n            views[s.args[0].string] = s;\n        }\n    }\n    return views;\n}\nfunction isContract(v) {\n    if (Array.isArray(v)) {\n        for (const s of v) {\n            if ('prim' in s && (s.prim === 'parameter' || s.prim === 'storage' || s.prim === 'code')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction contractEntryPoint(src, ep) {\n    ep = ep || '%default';\n    const entryPoint = contractEntryPoints(src).find((x) => x[0] === ep);\n    if (entryPoint !== undefined) {\n        return entryPoint[1];\n    }\n    else if (ep === '%default') {\n        return isContract(src) ? contractSection(src, 'parameter').args[0] : src;\n    }\n    return null;\n}\nfunction isOrType(t) {\n    return Array.isArray(t) || t.prim === 'or';\n}\nfunction contractEntryPoints(src) {\n    if (isContract(src)) {\n        const param = contractSection(src, 'parameter');\n        const ch = contractEntryPoints(param.args[0]);\n        const a = unpackAnnotations(param);\n        return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n    }\n    if (isOrType(src)) {\n        const args = typeArgs(src);\n        const getArg = (n) => {\n            const a = unpackAnnotations(args[n]);\n            if (typeID(args[n]) === 'or') {\n                const ch = contractEntryPoints(args[n]);\n                return a.f ? [[a.f[0], args[n]], ...ch] : ch;\n            }\n            return a.f ? [[a.f[0], args[n]]] : [];\n        };\n        return [...getArg(0), ...getArg(1)];\n    }\n    return [];\n}\n// Contract validation\nfunction assertContractValid(contract, ctx) {\n    const assertSection = (parameter, storage, ret, code) => {\n        assertTypeAnnotationsValid(parameter, true);\n        assertTypeAnnotationsValid(storage);\n        const arg = {\n            prim: 'pair',\n            args: [\n                Object.assign(Object.assign({}, parameter), { annots: ['@parameter'] }),\n                Object.assign(Object.assign({}, storage), { annots: ['@storage'] }),\n            ],\n        };\n        const out = functionTypeInternal(code, [arg], Object.assign(Object.assign({}, ctx), { contract }));\n        if ('failed' in out) {\n            return out;\n        }\n        try {\n            assertStacksEqual(out, [ret]);\n        }\n        catch (err) {\n            if (err instanceof MichelsonError) {\n                throw new MichelsonInstructionError(code, out, err.message);\n            }\n            else {\n                throw err;\n            }\n        }\n        return out;\n    };\n    const parameter = contractSection(contract, 'parameter').args[0];\n    const storage = contractSection(contract, 'storage').args[0];\n    const code = contractSection(contract, 'code').args[0];\n    const expected = {\n        prim: 'pair',\n        args: [{ prim: 'list', args: [{ prim: 'operation' }] }, storage],\n    };\n    const ret = assertSection(parameter, storage, expected, code);\n    for (const view of Object.values(contractViews(contract))) {\n        assertSection(view.args[1], storage, view.args[2], view.args[3]);\n    }\n    return ret;\n}\n// Exported wrapper functions\nfunction assertDataValid(d, t, ctx) {\n    assertTypeAnnotationsValid(t);\n    assertDataValidInternal(d, t, ctx || null);\n}\nfunction functionType(inst, stack, ctx) {\n    for (const t of stack) {\n        assertTypeAnnotationsValid(t);\n    }\n    if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) !== undefined) {\n        for (const typesec of ['parameter', 'storage']) {\n            const sec = contractSection(ctx.contract, typesec).args[0];\n            assertTypeAnnotationsValid(sec);\n        }\n    }\n    return functionTypeInternal(inst, stack, ctx || null);\n}\nfunction assertTypesEqual(a, b, field = false) {\n    if (Array.isArray(a)) {\n        // type guards don't work for parametrized generic types\n        for (const v of a) {\n            assertTypeAnnotationsValid(v);\n        }\n        for (const v of b) {\n            assertTypeAnnotationsValid(v);\n        }\n    }\n    else {\n        assertTypeAnnotationsValid(a);\n        assertTypeAnnotationsValid(b);\n    }\n    assertScalarTypesEqual(a, b, field);\n}\nfunction isTypeAnnotationsValid(t, field = false) {\n    try {\n        assertTypeAnnotationsValid(t, field);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isContractValid(contract, ctx) {\n    try {\n        return assertContractValid(contract, ctx);\n    }\n    catch (_a) {\n        return null;\n    }\n}\nfunction isDataValid(d, t, ctx) {\n    try {\n        assertDataValid(d, t, ctx);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isTypeEqual(a, b, field = false) {\n    try {\n        assertTypesEqual(a, b, field);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\nclass Contract {\n    constructor(contract, opt) {\n        this.contract = contract;\n        this.ctx = Object.assign({ contract }, opt);\n        this.output = assertContractValid(contract, this.ctx);\n    }\n    static parse(src, opt) {\n        const p = new Parser(opt);\n        const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new InvalidMichelsonError('empty Michelson');\n        }\n        if (assertMichelsonContract(expr)) {\n            return new Contract(expr, opt);\n        }\n    }\n    static parseTypeExpression(src, opt) {\n        const p = new Parser(opt);\n        const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new InvalidTypeExpressionError('empty type expression');\n        }\n        // remove assertTypeAnnotationsValid from if block because: () => void || throw error\n        if (assertMichelsonType(expr)) {\n            assertTypeAnnotationsValid(expr);\n            return expr;\n        }\n    }\n    static parseDataExpression(src, opt) {\n        const p = new Parser(opt);\n        const expr = typeof src === 'string' ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new InvalidDataExpressionError('empty data expression');\n        }\n        if (assertMichelsonData(expr)) {\n            return expr;\n        }\n        throw undefined;\n    }\n    section(section) {\n        return contractSection(this.contract, section);\n    }\n    entryPoints() {\n        return contractEntryPoints(this.contract);\n    }\n    entryPoint(ep) {\n        return contractEntryPoint(this.contract, ep);\n    }\n    assertDataValid(d, t) {\n        assertDataValid(d, t, this.ctx);\n    }\n    isDataValid(d, t) {\n        return isDataValid(d, t, this.ctx);\n    }\n    assertParameterValid(ep, d) {\n        const t = this.entryPoint(ep || undefined);\n        if (t === null) {\n            throw new InvalidEntrypointError(ep === null || ep === void 0 ? void 0 : ep.toString());\n        }\n        this.assertDataValid(d, t);\n    }\n    isParameterValid(ep, d) {\n        try {\n            this.assertParameterValid(ep, d);\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    functionType(inst, stack) {\n        return functionType(inst, stack, this.ctx);\n    }\n}\n// TODO: dummyContract not used anywhere in the codebase can be deleted?\nconst dummyContract = new Contract([\n    { prim: 'parameter', args: [{ prim: 'unit' }] },\n    { prim: 'storage', args: [{ prim: 'unit' }] },\n    {\n        prim: 'code',\n        args: [[{ prim: 'CAR' }, { prim: 'NIL', args: [{ prim: 'operation' }] }, { prim: 'PAIR' }]],\n    },\n]);\n\nfunction formatStack(s) {\n    if ('failed' in s) {\n        return `[FAILED: ${emitMicheline(s.failed)}]`;\n    }\n    return s\n        .map((v, i) => {\n        const ann = unpackAnnotations(v);\n        return `[${i}${ann.v ? '/' + ann.v[0] : ''}]: ${emitMicheline(v)}`;\n    })\n        .join('\\n');\n}\nfunction traceDumpFunc(blocks, cb) {\n    return (v) => {\n        var _a;\n        if (Array.isArray(v) && !blocks) {\n            return;\n        }\n        const macro = (_a = v.op[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n        const msg = `${macro ? 'Macro' : 'Op'}: ${macro ? emitMicheline(macro, undefined, true) + ' / ' : ''}${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n        cb(msg);\n    };\n}\nfunction formatError(err) {\n    var _a;\n    if (err instanceof MichelsonInstructionError) {\n        const macro = (_a = err.val[sourceReference]) === null || _a === void 0 ? void 0 : _a.macro;\n        return `${macro ? 'Macro' : 'Op'}: ${macro ? emitMicheline(macro, undefined, true) + ' / ' : ''}${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n    }\n    else if (err instanceof MichelsonTypeError) {\n        const type = Array.isArray(err.val)\n            ? '[' + err.val.map((v, i) => `[${i}]: ${emitMicheline(v)}`).join('; ') + ']'\n            : emitMicheline(err.val);\n        return `Type: ${type}\n${err.data\n            ? `Data: ${emitMicheline(err.data)}\n`\n            : ''}\n`;\n    }\n    else {\n        return `Value: ${emitMicheline(err.val)}`;\n    }\n}\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n\n//# sourceMappingURL=taquito-michel-codec.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/michel-codec/dist/taquito-michel-codec.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/michelson-encoder/dist/taquito-michelson-encoder.es6.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@taquito/michelson-encoder/dist/taquito-michelson-encoder.es6.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressValidationError: () => (/* binding */ AddressValidationError),\n/* harmony export */   BigMapEncodingError: () => (/* binding */ BigMapEncodingError),\n/* harmony export */   BigMapValidationError: () => (/* binding */ BigMapValidationError),\n/* harmony export */   BytesValidationError: () => (/* binding */ BytesValidationError),\n/* harmony export */   ChainIDValidationError: () => (/* binding */ ChainIDValidationError),\n/* harmony export */   ContractValidationError: () => (/* binding */ ContractValidationError),\n/* harmony export */   EncodeTicketError: () => (/* binding */ EncodeTicketError),\n/* harmony export */   EventSchema: () => (/* binding */ EventSchema),\n/* harmony export */   IntValidationError: () => (/* binding */ IntValidationError),\n/* harmony export */   InvalidBigMapDiffError: () => (/* binding */ InvalidBigMapDiffError),\n/* harmony export */   InvalidBigMapSchemaError: () => (/* binding */ InvalidBigMapSchemaError),\n/* harmony export */   InvalidMapTypeError: () => (/* binding */ InvalidMapTypeError),\n/* harmony export */   InvalidRpcResponseError: () => (/* binding */ InvalidRpcResponseError),\n/* harmony export */   InvalidScriptError: () => (/* binding */ InvalidScriptError),\n/* harmony export */   KeyHashValidationError: () => (/* binding */ KeyHashValidationError),\n/* harmony export */   KeyValidationError: () => (/* binding */ KeyValidationError),\n/* harmony export */   ListValidationError: () => (/* binding */ ListValidationError),\n/* harmony export */   MapTypecheckError: () => (/* binding */ MapTypecheckError),\n/* harmony export */   MapValidationError: () => (/* binding */ MapValidationError),\n/* harmony export */   MichelsonMap: () => (/* binding */ MichelsonMap),\n/* harmony export */   MissingArgumentError: () => (/* binding */ MissingArgumentError),\n/* harmony export */   MutezValidationError: () => (/* binding */ MutezValidationError),\n/* harmony export */   NatValidationError: () => (/* binding */ NatValidationError),\n/* harmony export */   OrValidationError: () => (/* binding */ OrValidationError),\n/* harmony export */   ParameterEncodingError: () => (/* binding */ ParameterEncodingError),\n/* harmony export */   ParameterSchema: () => (/* binding */ ParameterSchema),\n/* harmony export */   SaplingStateValue: () => (/* binding */ SaplingStateValue),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   SetValidationError: () => (/* binding */ SetValidationError),\n/* harmony export */   SignatureValidationError: () => (/* binding */ SignatureValidationError),\n/* harmony export */   StorageEncodingError: () => (/* binding */ StorageEncodingError),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TokenArgumentValidationError: () => (/* binding */ TokenArgumentValidationError),\n/* harmony export */   TokenComparisonError: () => (/* binding */ TokenComparisonError),\n/* harmony export */   UnitValue: () => (/* binding */ UnitValue),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   ViewSchema: () => (/* binding */ ViewSchema),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual)\n/* harmony export */ });\n/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-json-stable-stringify */ \"(ssr)/./node_modules/fast-json-stable-stringify/index.js\");\n/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _taquito_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @taquito/utils */ \"(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js\");\n\n\n\n\n\nvar _a$1;\n/**\n *  @category Error\n *  @description Error that indicates an invalid map type being passed or used\n */\nclass InvalidMapTypeError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(mapType, reason) {\n        super();\n        this.mapType = mapType;\n        this.reason = reason;\n        this.message = `The map type '${JSON.stringify(mapType)}' is invalid. Reason: ${reason}.`;\n        this.name = 'InvalidMapTypeError';\n    }\n}\n// Retrieve a unique symbol associated with the key from the environment\n// Used in order to identify all object that are of type MichelsonMap even if they come from different module\nconst michelsonMapTypeSymbol = Symbol.for('taquito-michelson-map-type-symbol');\n/**\n *\n * @throws {@link InvalidMapTypeError} when the argument passed to mapType is not a valid map type\n */\nfunction validateMapType(value) {\n    if (!('prim' in value)) {\n        throw new InvalidMapTypeError(value, `Missing 'prim' field`);\n    }\n    if (!['map', 'big_map'].includes(value.prim)) {\n        throw new InvalidMapTypeError(value, `The prim field should be 'map' or 'big_map'`);\n    }\n    if (!('args' in value)) {\n        throw new InvalidMapTypeError(value, `Missing 'args' field`);\n    }\n    if (!Array.isArray(value.args)) {\n        throw new InvalidMapTypeError(value, `The 'args' field should be an array`);\n    }\n    if (value.args.length !== 2) {\n        throw new InvalidMapTypeError(value, `The 'args' field should have 2 elements`);\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a map type mismatch, where an attempt to set a key or value in a Map doesn't match the defined type of the Map\n */\nclass MapTypecheckError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(value, type, objectType, reason) {\n        super();\n        this.value = value;\n        this.type = type;\n        this.reason = reason;\n        this.name = 'MapTypecheckError';\n        this.message = `The ${objectType} provided: ${JSON.stringify(value)} is not compatible with the expected michelson type: ${JSON.stringify(type)}. Reason: ${JSON.stringify(reason)}.`;\n        this.name = 'MapTypecheckError';\n    }\n}\n/**\n * @description Michelson Map is an abstraction over the michelson native map. It supports complex Pair as key\n */\nclass MichelsonMap {\n    // Used to check if an object is a michelson map.\n    // Using instanceof was not working for project that had multiple instance of taquito dependencies\n    // as the class constructor is different\n    static isMichelsonMap(obj) {\n        return obj && obj[michelsonMapTypeSymbol] === true;\n    }\n    /**\n     * @param mapType If specified key and value will be type-checked before being added to the map\n     *\n     * @example new MichelsonMap({ prim: \"map\", args: [{prim: \"string\"}, {prim: \"int\"}]})\n     */\n    constructor(mapType) {\n        this.valueMap = new Map();\n        this.keyMap = new Map();\n        this[_a$1] = true;\n        if (mapType) {\n            this.setType(mapType);\n        }\n    }\n    setType(mapType) {\n        validateMapType(mapType);\n        this.keySchema = new Schema(mapType.args[0]);\n        this.valueSchema = new Schema(mapType.args[1]);\n    }\n    removeType() {\n        this.keySchema = undefined;\n        this.valueSchema = undefined;\n    }\n    static fromLiteral(obj, mapType) {\n        const map = new MichelsonMap(mapType);\n        Object.keys(obj).forEach((key) => {\n            map.set(key, obj[key]);\n        });\n        return map;\n    }\n    typecheckKey(key) {\n        if (!this.keySchema) {\n            return;\n        }\n        this.keySchema.Typecheck(key);\n    }\n    typecheckValue(value) {\n        if (!this.valueSchema) {\n            return;\n        }\n        this.valueSchema.Typecheck(value);\n    }\n    /**\n     * @throws {@link MapTypecheckError} when the argument passed does not match the expected schema for value\n     */\n    assertTypecheckValue(value) {\n        try {\n            this.typecheckValue(value);\n        }\n        catch (e) {\n            throw new MapTypecheckError(value, this.valueSchema, 'value', e);\n        }\n    }\n    /**\n     * @throws {@link MapTypecheckError} when the argument passed does not match the expected schema for key\n     */\n    assertTypecheckKey(key) {\n        try {\n            this.typecheckKey(key);\n        }\n        catch (e) {\n            throw new MapTypecheckError(key, this.keySchema, 'key', e);\n        }\n    }\n    serializeDeterministically(key) {\n        return fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(key);\n    }\n    *keys() {\n        for (const [key] of this.entries()) {\n            yield key;\n        }\n    }\n    *values() {\n        for (const [, value] of this.entries()) {\n            yield value;\n        }\n    }\n    *entries() {\n        for (const key of this.valueMap.keys()) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            yield [this.keyMap.get(key), this.valueMap.get(key)];\n        }\n    }\n    get(key) {\n        this.assertTypecheckKey(key);\n        const strKey = this.serializeDeterministically(key);\n        return this.valueMap.get(strKey);\n    }\n    /**\n     *\n     * @description Set a key and a value in the MichelsonMap. If the key already exists, override the current value.\n     *\n     * @example map.set(\"myKey\", \"myValue\") // Using a string as key\n     *\n     * @example map.set({0: \"test\", 1: \"test1\"}, \"myValue\") // Using a pair as key\n     *\n     * @warn The same key can be represented in multiple ways, depending on the type of the key. This duplicate key situation will cause a runtime error (duplicate key) when sending the map data to the Tezos RPC node.\n     *\n     * For example, consider a contract with a map whose key is of type boolean.  If you set the following values in MichelsonMap: map.set(false, \"myValue\") and map.set(null, \"myValue\").\n     *\n     * You will get two unique entries in the MichelsonMap. These values will both be evaluated as falsy by the MichelsonEncoder and ultimately rejected by the Tezos RPC.\n     */\n    set(key, value) {\n        this.assertTypecheckKey(key);\n        this.assertTypecheckValue(value);\n        const strKey = this.serializeDeterministically(key);\n        this.keyMap.set(strKey, key);\n        this.valueMap.set(strKey, value);\n    }\n    delete(key) {\n        this.assertTypecheckKey(key);\n        this.keyMap.delete(this.serializeDeterministically(key));\n        this.valueMap.delete(this.serializeDeterministically(key));\n    }\n    has(key) {\n        this.assertTypecheckKey(key);\n        const strKey = this.serializeDeterministically(key);\n        return this.keyMap.has(strKey) && this.valueMap.has(strKey);\n    }\n    clear() {\n        this.keyMap.clear();\n        this.valueMap.clear();\n    }\n    get size() {\n        return this.keyMap.size;\n    }\n    forEach(cb) {\n        for (const [key, value] of this.entries()) {\n            cb(value, key, this);\n        }\n    }\n}\n_a$1 = michelsonMapTypeSymbol;\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding invalid or incorrect data (e.g. if an address is expected but a number is received)\n */\nclass TokenValidationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(value, token, baseMessage) {\n        super();\n        this.value = value;\n        this.token = token;\n        this.name = 'TokenValidationError';\n        const annot = this.token.annot();\n        const annotText = annot ? `[${annot}] ` : '';\n        this.message = `${annotText}${baseMessage}`;\n    }\n}\nclass Token {\n    constructor(val, idx, fac) {\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n        this.createToken = this.fac;\n    }\n    typeWithoutAnnotations() {\n        const handleMichelsonExpression = (val) => {\n            if (typeof val === 'object') {\n                if (Array.isArray(val)) {\n                    const array = val;\n                    return array.map((item) => handleMichelsonExpression(item));\n                }\n                const extended = val;\n                if (extended.args) {\n                    return {\n                        prim: extended.prim,\n                        args: extended.args.map((x) => handleMichelsonExpression(x)),\n                    };\n                }\n                else {\n                    return {\n                        prim: extended.prim,\n                    };\n                }\n            }\n            return val;\n        };\n        const handleMichelsonExtended = (val) => {\n            if (val.args) {\n                return {\n                    prim: val.prim,\n                    args: val.args.map((x) => handleMichelsonExpression(x)),\n                };\n            }\n            else {\n                return {\n                    prim: val.prim,\n                };\n            }\n        };\n        return handleMichelsonExtended(this.val);\n    }\n    annot() {\n        return (Array.isArray(this.val.annots) && this.val.annots.length > 0\n            ? this.val.annots[0]\n            : String(this.idx)).replace(/(%|:)(_Liq_entry_)?/, '');\n    }\n    hasAnnotations() {\n        return Array.isArray(this.val.annots) && this.val.annots.length;\n    }\n    get tokenVal() {\n        return this.val;\n    }\n    ExtractSignature() {\n        return [[this.ExtractSchema()]];\n    }\n}\nclass ComparableToken extends Token {\n    compare(o1, o2) {\n        if (o1 === o2) {\n            return 0;\n        }\n        return o1 < o2 ? -1 : 1;\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Big Map types\n */\nclass BigMapValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'BigMapValidationError';\n    }\n}\nclass BigMapToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get ValueSchema() {\n        return this.createToken(this.val.args[1], 0);\n    }\n    get KeySchema() {\n        return this.createToken(this.val.args[0], 0);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            big_map: {\n                key: this.KeySchema.ExtractSchema(),\n                value: this.ValueSchema.ExtractSchema(),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: BigMapToken.prim,\n            schema: {\n                key: this.KeySchema.generateSchema(),\n                value: this.ValueSchema.generateSchema(),\n            },\n        };\n    }\n    /**\n     * @throws {@link BigMapValidationError}\n     */\n    validate(value) {\n        if (!MichelsonMap.isMichelsonMap(value)) {\n            throw new BigMapValidationError(value, this, `Value ${JSON.stringify(value)} is not a MichelsonMap`);\n        }\n    }\n    objLitToMichelsonMap(val) {\n        if (val instanceof MichelsonMap)\n            return val;\n        if (typeof val === 'object') {\n            if (Object.keys(val).length === 0) {\n                return new MichelsonMap();\n            }\n            else {\n                return MichelsonMap.fromLiteral(val);\n            }\n        }\n        return val;\n    }\n    /**\n     * @throws {@link BigMapValidationError}\n     */\n    Encode(args) {\n        const val = this.objLitToMichelsonMap(args.pop());\n        this.validate(val);\n        return Array.from(val.keys())\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .map((key) => {\n            return {\n                prim: 'Elt',\n                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n            };\n        });\n    }\n    /**\n     * @throws {@link BigMapValidationError}\n     */\n    EncodeObject(args, semantic) {\n        const val = this.objLitToMichelsonMap(args);\n        this.validate(val);\n        if (semantic && semantic[BigMapToken.prim]) {\n            return semantic[BigMapToken.prim](val, this.val);\n        }\n        return Array.from(val.keys())\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .map((key) => {\n            return {\n                prim: 'Elt',\n                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n            };\n        });\n    }\n    /**\n     * @throws {@link InvalidMapTypeError} when the argument passed to val is an array but not a valid map type\n     * @throws {@link BigMapValidationError} when the value is invalid\n     */\n    Execute(val, semantic) {\n        if (semantic && semantic[BigMapToken.prim]) {\n            return semantic[BigMapToken.prim](val, this.val);\n        }\n        if (Array.isArray(val)) {\n            // Athens is returning an empty array for big map in storage\n            // Internal: In taquito v5 it is still used to decode big map diff (as if they were a regular map)\n            const map = new MichelsonMap(this.val);\n            val.forEach((current) => {\n                map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1]));\n            });\n            return map;\n        }\n        else if ('int' in val) {\n            // Babylon is returning an int with the big map id in contract storage\n            return val.int;\n        }\n        else {\n            throw new BigMapValidationError(val, this, `Big map is expecting either an array (Athens) or an object with an int property (Babylon). Got ${JSON.stringify(val)}`);\n        }\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (BigMapToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n        this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nBigMapToken.prim = 'big_map';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing an OrToken\n */\nclass OrValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'OrValidationError';\n    }\n}\nclass OrToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Encode(args) {\n        const label = args[args.length - 1];\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n            args.pop();\n            return { prim: 'Left', args: [leftToken.Encode(args)] };\n        }\n        else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n            args.pop();\n            return { prim: 'Right', args: [rightToken.Encode(args)] };\n        }\n        else {\n            if (leftToken instanceof OrToken) {\n                const val = leftToken.Encode(args);\n                if (val) {\n                    return { prim: 'Left', args: [val] };\n                }\n            }\n            if (rightToken instanceof OrToken) {\n                const val = rightToken.Encode(args);\n                if (val) {\n                    return { prim: 'Right', args: [val] };\n                }\n            }\n            return null;\n        }\n    }\n    ExtractSignature() {\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        const newSig = [];\n        if (leftToken instanceof OrToken) {\n            newSig.push(...leftToken.ExtractSignature());\n        }\n        else {\n            for (const sig of leftToken.ExtractSignature()) {\n                newSig.push([leftToken.annot(), ...sig]);\n            }\n        }\n        if (rightToken instanceof OrToken) {\n            newSig.push(...rightToken.ExtractSignature());\n        }\n        else {\n            for (const sig of rightToken.ExtractSignature()) {\n                newSig.push([rightToken.annot(), ...sig]);\n            }\n        }\n        return newSig;\n    }\n    /**\n     * @throws {@link OrValidationError}\n     */\n    EncodeObject(args, semantic) {\n        this.validateJavascriptObject(args);\n        const label = Object.keys(args)[0];\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        if (String(leftToken.annot()) === String(label) && !(leftToken instanceof OrToken)) {\n            return { prim: 'Left', args: [leftToken.EncodeObject(args[label], semantic)] };\n        }\n        else if (String(rightToken.annot()) === String(label) && !(rightToken instanceof OrToken)) {\n            return { prim: 'Right', args: [rightToken.EncodeObject(args[label], semantic)] };\n        }\n        else {\n            if (leftToken instanceof OrToken) {\n                const val = leftToken.EncodeObject(args, semantic);\n                if (val) {\n                    return { prim: 'Left', args: [val] };\n                }\n            }\n            if (rightToken instanceof OrToken) {\n                const val = rightToken.EncodeObject(args, semantic);\n                if (val) {\n                    return { prim: 'Right', args: [val] };\n                }\n            }\n            return null;\n        }\n    }\n    /**\n     * @throws {@link OrValidationError}\n     */\n    validateJavascriptObject(args) {\n        if (typeof args !== 'object' ||\n            Array.isArray(args) ||\n            args === null ||\n            Object.keys(args).length !== 1) {\n            throw new OrValidationError(args, this, `EncodeObject expects an object with a single key but got: ${JSON.stringify(args)}`);\n        }\n    }\n    /**\n     * @throws {@link OrValidationError}\n     */\n    Execute(val, semantics) {\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        if (val.prim === 'Right') {\n            if (rightToken instanceof OrToken) {\n                return rightToken.Execute(val.args[0], semantics);\n            }\n            else {\n                return {\n                    [rightToken.annot()]: rightToken.Execute(val.args[0], semantics),\n                };\n            }\n        }\n        else if (val.prim === 'Left') {\n            if (leftToken instanceof OrToken) {\n                return leftToken.Execute(val.args[0], semantics);\n            }\n            return {\n                [leftToken.annot()]: leftToken.Execute(val.args[0], semantics),\n            };\n        }\n        else {\n            throw new OrValidationError(val, this, `Was expecting Left or Right prim but got: ${JSON.stringify(val.prim)}`);\n        }\n    }\n    traversal(getLeftValue, getRightValue, concat) {\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        let leftValue;\n        if (leftToken instanceof OrToken) {\n            leftValue = getLeftValue(leftToken);\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        else {\n            leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        let rightValue;\n        if (rightToken instanceof OrToken) {\n            rightValue = getRightValue(rightToken);\n        }\n        else {\n            rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n        }\n        const res = concat(leftValue, rightValue);\n        return res;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema(), (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue)));\n    }\n    generateSchema() {\n        return {\n            __michelsonType: OrToken.prim,\n            schema: this.traversal((leftToken) => {\n                if (leftToken instanceof OrToken) {\n                    return leftToken.generateSchema().schema;\n                }\n                else {\n                    return leftToken.generateSchema();\n                }\n            }, (rightToken) => {\n                if (rightToken instanceof OrToken) {\n                    return rightToken.generateSchema().schema;\n                }\n                else {\n                    return rightToken.generateSchema();\n                }\n            }, (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue))),\n        };\n    }\n    findToken(label) {\n        const leftToken = this.createToken(this.val.args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(this.val.args[1], this.idx + keyCount);\n        if (String(leftToken.annot()) === String(label) &&\n            !(leftToken instanceof OrToken) &&\n            leftToken instanceof ComparableToken) {\n            return leftToken;\n        }\n        else if (String(rightToken.annot()) === String(label) &&\n            !(rightToken instanceof OrToken) &&\n            rightToken instanceof ComparableToken) {\n            return rightToken;\n        }\n        else {\n            if (leftToken instanceof OrToken) {\n                const tok = leftToken.findToken(label);\n                if (tok) {\n                    return tok;\n                }\n            }\n            if (rightToken instanceof OrToken) {\n                const tok = rightToken.findToken(label);\n                if (tok) {\n                    return tok;\n                }\n            }\n            return null;\n        }\n    }\n    compare(val1, val2) {\n        const labelVal1 = Object.keys(val1)[0];\n        const labelVal2 = Object.keys(val2)[0];\n        if (labelVal1 === labelVal2) {\n            const token = this.findToken(labelVal1);\n            if (token instanceof ComparableToken) {\n                return token.compare(val1[labelVal1], val2[labelVal1]);\n            }\n        }\n        else {\n            const encoded1 = JSON.stringify(this.EncodeObject(val1));\n            const encoded2 = JSON.stringify(this.EncodeObject(val2));\n            return encoded1 < encoded2 ? -1 : 1;\n        }\n    }\n    ToKey(val) {\n        return this.Execute(val);\n    }\n    ToBigMapKey(val) {\n        return {\n            key: this.EncodeObject(val),\n            type: this.typeWithoutAnnotations(),\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (OrToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.traversal((leftToken) => leftToken.findAndReturnTokens(tokenToFind, tokens), (rightToken) => rightToken.findAndReturnTokens(tokenToFind, tokens), (leftValue, rightValue) => (Object.assign(Object.assign({}, leftValue), rightValue)));\n        return tokens;\n    }\n}\nOrToken.prim = 'or';\n\n/**\n *  @category Error\n *  @description Error that indicates in invalid token argument being passed\n */\nclass TokenArgumentValidationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = 'TokenArgumentValidationError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure occurring when doing a comparison of tokens\n */\nclass TokenComparisonError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(val1, val2) {\n        super();\n        this.val1 = val1;\n        this.val2 = val2;\n        this.name = 'TokenComparisonError';\n        this.message = `Tokens ${JSON.stringify(val1)} and ${JSON.stringify(val2)} are not comparable`;\n    }\n}\n// collapse comb pair\n/**\n * @throws {@link TokenArgumentValidationError}\n */\nfunction collapse$1(val, prim = PairToken.prim) {\n    if (Array.isArray(val)) {\n        return collapse$1({\n            prim: prim,\n            args: val,\n        }, prim);\n    }\n    if (val.args === undefined) {\n        throw new TokenArgumentValidationError(`The value ${JSON.stringify(val)} is an invalid PairToken with no arguments, a pair must have two or more arguments.`);\n    }\n    if (val.args.length > 2) {\n        return [\n            val.args[0],\n            {\n                prim: prim,\n                args: val.args.slice(1),\n            },\n        ];\n    }\n    return [val.args[0], val.args[1]];\n}\nclass PairToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(Array.isArray(val)\n            ? {\n                prim: PairToken.prim,\n                args: val,\n            }\n            : val.prim\n                ? val\n                : {\n                    prim: PairToken.prim,\n                    args: val,\n                }, idx, fac);\n    }\n    args() {\n        // collapse comb pair\n        return collapse$1(this.val);\n    }\n    tokens() {\n        let cnt = 0;\n        return this.args().map((a) => {\n            const tok = this.createToken(a, this.idx + cnt);\n            if (tok instanceof PairToken) {\n                cnt += Object.keys(tok.ExtractSchema()).length;\n            }\n            else {\n                cnt++;\n            }\n            return tok;\n        });\n    }\n    Encode(args) {\n        return {\n            prim: 'Pair',\n            args: this.tokens().map((t) => t.Encode(args)),\n        };\n    }\n    ExtractSignature() {\n        const args = this.args();\n        const leftToken = this.createToken(args[0], this.idx);\n        let keyCount = 1;\n        if (leftToken instanceof OrToken) {\n            keyCount = Object.keys(leftToken.ExtractSchema()).length;\n        }\n        const rightToken = this.createToken(args[1], this.idx + keyCount);\n        const newSig = [];\n        for (const leftSig of leftToken.ExtractSignature()) {\n            for (const rightSig of rightToken.ExtractSignature()) {\n                newSig.push([...leftSig, ...rightSig]);\n            }\n        }\n        return newSig;\n    }\n    ToBigMapKey(val) {\n        return {\n            key: this.EncodeObject(val),\n            type: this.typeWithoutAnnotations(),\n        };\n    }\n    ToKey(val) {\n        return this.Execute(val);\n    }\n    EncodeObject(args, semantic) {\n        const [leftToken, rightToken] = this.tokens();\n        let leftValue;\n        if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n            leftValue = args;\n        }\n        else {\n            leftValue = args[leftToken.annot()];\n        }\n        let rightValue;\n        if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n            rightValue = args;\n        }\n        else {\n            rightValue = args[rightToken.annot()];\n        }\n        return {\n            prim: 'Pair',\n            args: [\n                leftToken.EncodeObject(leftValue, semantic),\n                rightToken.EncodeObject(rightValue, semantic),\n            ],\n        };\n    }\n    traversal(getLeftValue, getRightValue) {\n        const args = this.args();\n        const leftToken = this.createToken(args[0], this.idx);\n        let keyCount = 1;\n        let leftValue;\n        if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n            leftValue = getLeftValue(leftToken);\n            if (leftToken instanceof PairToken) {\n                keyCount = Object.keys(leftToken.ExtractSchema()).length;\n            }\n        }\n        else {\n            leftValue = { [leftToken.annot()]: getLeftValue(leftToken) };\n        }\n        const rightToken = this.createToken(args[1], this.idx + keyCount);\n        let rightValue;\n        if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n            rightValue = getRightValue(rightToken);\n        }\n        else {\n            rightValue = { [rightToken.annot()]: getRightValue(rightToken) };\n        }\n        const res = Object.assign(Object.assign({}, leftValue), rightValue);\n        return res;\n    }\n    Execute(val, semantics) {\n        const args = collapse$1(val, 'Pair');\n        return this.traversal((leftToken) => leftToken.Execute(args[0], semantics), (rightToken) => rightToken.Execute(args[1], semantics));\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return this.traversal((leftToken) => leftToken.ExtractSchema(), (rightToken) => rightToken.ExtractSchema());\n    }\n    generateSchema() {\n        return {\n            __michelsonType: PairToken.prim,\n            schema: this.traversal((leftToken) => {\n                if (leftToken instanceof PairToken && !leftToken.hasAnnotations()) {\n                    return leftToken.generateSchema().schema;\n                }\n                else {\n                    return leftToken.generateSchema();\n                }\n            }, (rightToken) => {\n                if (rightToken instanceof PairToken && !rightToken.hasAnnotations()) {\n                    return rightToken.generateSchema().schema;\n                }\n                else {\n                    return rightToken.generateSchema();\n                }\n            }),\n        };\n    }\n    /**\n     * @throws {@link TokenComparisonError}\n     */\n    compare(val1, val2) {\n        const [leftToken, rightToken] = this.tokens();\n        const getValue = (token, args) => {\n            if (token instanceof PairToken && !token.hasAnnotations()) {\n                return args;\n            }\n            else {\n                return args[token.annot()];\n            }\n        };\n        if (leftToken instanceof ComparableToken && rightToken instanceof ComparableToken) {\n            const result = leftToken.compare(getValue(leftToken, val1), getValue(leftToken, val2));\n            if (result === 0) {\n                return rightToken.compare(getValue(rightToken, val1), getValue(rightToken, val2));\n            }\n            return result;\n        }\n        throw new TokenComparisonError(val1, val2);\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (PairToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.tokens().map((t) => t.findAndReturnTokens(tokenToFind, tokens));\n        return tokens;\n    }\n}\nPairToken.prim = 'pair';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Nat\n */\nclass NatValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'NatValidationError';\n    }\n}\nclass NatToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val[Object.keys(val)[0]]);\n    }\n    /**\n     * @throws {@link NatValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { int: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val).toFixed() };\n    }\n    /**\n     * @throws {@link NatValidationError}\n     */\n    validate(val) {\n        const bigNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val);\n        if (bigNumber.isNaN()) {\n            throw new NatValidationError(val, this, `Value is not a number: ${JSON.stringify(val)}`);\n        }\n        if (bigNumber.isNegative()) {\n            throw new NatValidationError(val, this, `Value cannot be negative: ${JSON.stringify(val)}`);\n        }\n    }\n    /**\n     * @throws {@link NatValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[NatToken.prim]) {\n            return semantic[NatToken.prim](val);\n        }\n        return { int: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val).toFixed() };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return NatToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: NatToken.prim,\n            schema: NatToken.prim,\n        };\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { int: String(val) },\n            type: { prim: NatToken.prim },\n        };\n    }\n    ToKey({ int }) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](int);\n    }\n    compare(nat1, nat2) {\n        const o1 = Number(nat1);\n        const o2 = Number(nat2);\n        if (o1 === o2) {\n            return 0;\n        }\n        return o1 < o2 ? -1 : 1;\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (NatToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nNatToken.prim = 'nat';\n\nclass StringToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return val[Object.keys(val)[0]];\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return StringToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: StringToken.prim,\n            schema: StringToken.prim,\n        };\n    }\n    Encode(args) {\n        const val = args.pop();\n        return { string: val };\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[StringToken.prim]) {\n            return semantic[StringToken.prim](val);\n        }\n        return { string: val };\n    }\n    ToKey({ string }) {\n        return string;\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: StringToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (StringToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nStringToken.prim = 'string';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing an Address\n */\nclass AddressValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'AddressValidationError';\n    }\n}\nclass AddressToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    ToBigMapKey(val) {\n        const decoded = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.b58decode)(val);\n        return {\n            key: { bytes: decoded },\n            type: { prim: 'bytes' },\n        };\n    }\n    /**\n     * @throws {@link AddressValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateAddress)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new AddressValidationError(value, this, `Address is not valid: ${JSON.stringify(value)}`);\n        }\n    }\n    /**\n     * @throws {@link AddressValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link AddressValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[AddressToken.prim]) {\n            return semantic[AddressToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @throws {@link AddressValidationError}\n     */\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        if (!val.bytes) {\n            throw new AddressValidationError(val, this, `cannot be missing both string and bytes: ${JSON.stringify(val)}`);\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodePubKey)(val.bytes);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return AddressToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: AddressToken.prim,\n            schema: AddressToken.prim,\n        };\n    }\n    /**\n     * @throws {@link AddressValidationError}\n     */\n    ToKey({ bytes, string }) {\n        if (string) {\n            return string;\n        }\n        if (!bytes) {\n            throw new AddressValidationError({ bytes, string }, this, `cannot be missing both string and bytes ${JSON.stringify({ string, bytes })}`);\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodePubKey)(bytes);\n    }\n    compare(address1, address2) {\n        const isImplicit = (address) => {\n            return address.startsWith('tz');\n        };\n        const implicit1 = isImplicit(address1);\n        const implicit2 = isImplicit(address2);\n        if (implicit1 && !implicit2) {\n            return -1;\n        }\n        else if (implicit2 && !implicit1) {\n            return 1;\n        }\n        return super.compare(address1, address2);\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (AddressToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nAddressToken.prim = 'address';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Map\n */\nclass MapValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'MapValidationError';\n    }\n}\nclass MapToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get ValueSchema() {\n        return this.createToken(this.val.args[1], 0);\n    }\n    get KeySchema() {\n        return this.createToken(this.val.args[0], 0);\n    }\n    /**\n     * @throws {@link MapValidationError}\n     */\n    validate(value) {\n        if (!MichelsonMap.isMichelsonMap(value)) {\n            throw new MapValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid MichelsonMap`);\n        }\n    }\n    Execute(val, semantics) {\n        const map = new MichelsonMap(this.val);\n        val.forEach((current) => {\n            map.set(this.KeySchema.ToKey(current.args[0]), this.ValueSchema.Execute(current.args[1], semantics));\n        });\n        return map;\n    }\n    objLitToMichelsonMap(val) {\n        if (val instanceof MichelsonMap)\n            return val;\n        if (typeof val === 'object') {\n            if (Object.keys(val).length === 0) {\n                return new MichelsonMap();\n            }\n            else {\n                return MichelsonMap.fromLiteral(val);\n            }\n        }\n        return val;\n    }\n    /**\n     * @throws {@link MapValidationError}\n     */\n    Encode(args) {\n        const val = this.objLitToMichelsonMap(args.pop());\n        this.validate(val);\n        return Array.from(val.keys())\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .map((key) => {\n            return {\n                prim: 'Elt',\n                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n            };\n        });\n    }\n    /**\n     * @throws {@link MapValidationError}\n     */\n    EncodeObject(args, semantic) {\n        const val = this.objLitToMichelsonMap(args);\n        this.validate(val);\n        if (semantic && semantic[MapToken.prim]) {\n            return semantic[MapToken.prim](val);\n        }\n        return Array.from(val.keys())\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .map((key) => {\n            return {\n                prim: 'Elt',\n                args: [this.KeySchema.EncodeObject(key), this.ValueSchema.EncodeObject(val.get(key))],\n            };\n        });\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            map: {\n                key: this.KeySchema.ExtractSchema(),\n                value: this.ValueSchema.ExtractSchema(),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: MapToken.prim,\n            schema: {\n                key: this.KeySchema.generateSchema(),\n                value: this.ValueSchema.generateSchema(),\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (MapToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n        this.ValueSchema.findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nMapToken.prim = 'map';\n\nclass BoolToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return String(val.prim).toLowerCase() === 'true' ? true : false;\n    }\n    Encode(args) {\n        const val = args.pop();\n        return { prim: val ? 'True' : 'False' };\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[BoolToken.prim]) {\n            return semantic[BoolToken.prim](val);\n        }\n        return { prim: val ? 'True' : 'False' };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return BoolToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: BoolToken.prim,\n            schema: BoolToken.prim,\n        };\n    }\n    ToBigMapKey(val) {\n        return {\n            key: this.EncodeObject(val),\n            type: { prim: BoolToken.prim },\n        };\n    }\n    ToKey(val) {\n        return this.EncodeObject(val);\n    }\n    compare(val1, val2) {\n        if ((val1 && val2) || (!val1 && !val2)) {\n            return 0;\n        }\n        else if (val1) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (BoolToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nBoolToken.prim = 'bool';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Tx Rollup L2 Address\n */\nclass TxRollupL2AddressValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'TxRollupL2AddressValidationError';\n    }\n}\nclass TxRollupL2AddressToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    ToBigMapKey(val) {\n        const decoded = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.b58decodeL2Address)(val);\n        return {\n            key: { bytes: decoded },\n            type: { prim: 'bytes' },\n        };\n    }\n    /**\n     * @throws {@link TxRollupL2AddressValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateAddress)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new TxRollupL2AddressValidationError(value, this, `tx_rollup_l2_address is not valid: ${JSON.stringify(value)}`);\n        }\n    }\n    /**\n     * @throws {@link TxRollupL2AddressValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        if (!val) {\n            throw new TxRollupL2AddressValidationError(val, this, `arg missing to encode: this -> \"${JSON.stringify(val)}\"`);\n        }\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link TxRollupL2AddressValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[TxRollupL2AddressToken.prim]) {\n            return semantic[TxRollupL2AddressToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @throws {@link TxRollupL2AddressValidationError}\n     */\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        if (!val.bytes) {\n            throw new TxRollupL2AddressValidationError(val, this, `value cannot be missing string and byte value. must have one ${JSON.stringify(val)}`);\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodeL2Address)(val.bytes);\n    }\n    ExtractSchema() {\n        return TxRollupL2AddressToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: TxRollupL2AddressToken.prim,\n            schema: TxRollupL2AddressToken.prim,\n        };\n    }\n    /**\n     * @throws {@link TxRollupL2AddressValidationError}\n     */\n    ToKey({ bytes, string }) {\n        if (string) {\n            return string;\n        }\n        if (!bytes) {\n            throw new TxRollupL2AddressValidationError(bytes, this, `value cannot be missing string and byte value. must have one: bytes = ${JSON.stringify(bytes)}`);\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodeL2Address)(bytes);\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (TxRollupL2AddressToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nTxRollupL2AddressToken.prim = 'tx_rollup_l2_address';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Contract\n */\nclass ContractValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'ContractValidationError';\n    }\n}\nclass ContractToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link ContractValidationError}\n     */\n    validate(value) {\n        // tz1,tz2 and tz3 seems to be valid contract values (for Unit contract)\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateAddress)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new ContractValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid contract address.`);\n        }\n        return null;\n    }\n    /**\n     * @throws {@link ContractValidationError}\n     */\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        if (!val.bytes) {\n            throw new ContractValidationError(val, this, `Value ${JSON.stringify(val)} is not a valid contract address. must contain bytes or string.`);\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodePubKey)(val.bytes);\n    }\n    /**\n     * @throws {@link ContractValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link ContractValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[ContractToken.prim]) {\n            return semantic[ContractToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return ContractToken.prim;\n    }\n    generateSchema() {\n        const valueSchema = this.createToken(this.val.args[0], 0);\n        return {\n            __michelsonType: ContractToken.prim,\n            schema: {\n                parameter: this.val.args[0] ? valueSchema.generateSchema() : {},\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (ContractToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nContractToken.prim = 'contract';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a List\n */\nclass ListValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'ListValidationError';\n    }\n}\nclass ListToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get valueSchema() {\n        return this.createToken(this.val.args[0], this.idx);\n    }\n    /**\n     * @throws {@link ListValidationError}\n     */\n    validate(value) {\n        if (!Array.isArray(value)) {\n            throw new ListValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid array`);\n        }\n    }\n    /**\n     * @throws {@link ListValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        const schema = this.createToken(this.val.args[0], 0);\n        return val.reduce((prev, current) => {\n            return [...prev, schema.EncodeObject(current)];\n        }, []);\n    }\n    /**\n     * @throws {@link ListValidationError}\n     */\n    Execute(val, semantics) {\n        const schema = this.createToken(this.val.args[0], 0);\n        this.validate(val);\n        return val.reduce((prev, current) => {\n            return [...prev, schema.Execute(current, semantics)];\n        }, []);\n    }\n    /**\n     * @throws {@link ListValidationError}\n     */\n    EncodeObject(args, semantic) {\n        const schema = this.createToken(this.val.args[0], 0);\n        this.validate(args);\n        if (semantic && semantic[ListToken.prim]) {\n            return semantic[ListToken.prim](args);\n        }\n        return args.reduce((prev, current) => {\n            return [...prev, schema.EncodeObject(current)];\n        }, []);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            [ListToken.prim]: this.valueSchema.ExtractSchema(),\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: ListToken.prim,\n            schema: this.valueSchema.generateSchema(),\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (ListToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nListToken.prim = 'list';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Mutez\n */\nclass MutezValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'MutezValidationError';\n    }\n}\nclass MutezToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val[Object.keys(val)[0]]);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return MutezToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: MutezToken.prim,\n            schema: MutezToken.prim,\n        };\n    }\n    /**\n     * @throws {@link MutezValidationError}\n     */\n    validate(val) {\n        const bigNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val);\n        if (bigNumber.isNaN()) {\n            throw new MutezValidationError(val, this, `Value is not a number: ${val}`);\n        }\n    }\n    /**\n     * @throws {@link MutezValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { int: String(val).toString() };\n    }\n    /**\n     * @throws {@link MutezValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[MutezToken.prim]) {\n            return semantic[MutezToken.prim](val);\n        }\n        return { int: String(val).toString() };\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { int: String(val) },\n            type: { prim: MutezToken.prim },\n        };\n    }\n    ToKey({ int }) {\n        return int;\n    }\n    compare(mutez1, mutez2) {\n        const o1 = Number(mutez1);\n        const o2 = Number(mutez2);\n        if (o1 === o2) {\n            return 0;\n        }\n        return o1 < o2 ? -1 : 1;\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (MutezToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nMutezToken.prim = 'mutez';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Bytes\n */\nclass BytesValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'BytesValidationError';\n    }\n}\nclass BytesToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { bytes: val },\n            type: { prim: BytesToken.prim },\n        };\n    }\n    /**\n     * @throws {@link BytesValidationError}\n     */\n    validate(val) {\n        if (typeof val === 'string' && /^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n            return;\n        }\n        throw new BytesValidationError(val, this, `Invalid bytes: ${val}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link BytesValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        val = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(this.convertUint8ArrayToHexString(val));\n        this.validate(val);\n        return { bytes: String(val).toString() };\n    }\n    /**\n     * @throws {@link BytesValidationError}\n     */\n    EncodeObject(val, semantic) {\n        val = this.convertUint8ArrayToHexString(val);\n        if (typeof val === 'string') {\n            val = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(val);\n        }\n        this.validate(val);\n        if (semantic && semantic[BytesToken.prim]) {\n            return semantic[BytesToken.prim](val);\n        }\n        return { bytes: String(val).toString() };\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return BytesToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: BytesToken.prim,\n            schema: BytesToken.prim,\n        };\n    }\n    ToKey({ bytes, string }) {\n        if (string) {\n            return string;\n        }\n        return bytes;\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (BytesToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nBytesToken.prim = 'bytes';\n\nclass OptionToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    subToken() {\n        return this.createToken(this.val.args[0], this.idx);\n    }\n    schema() {\n        return this.createToken(this.val.args[0], 0);\n    }\n    annot() {\n        return Array.isArray(this.val.annots)\n            ? super.annot()\n            : this.createToken(this.val.args[0], this.idx).annot();\n    }\n    Encode(args) {\n        const value = args;\n        if (value === undefined || value === null) {\n            return { prim: 'None' };\n        }\n        else if (Array.isArray(value) &&\n            (value[value.length - 1] === undefined || value[value.length - 1] === null)) {\n            value.pop();\n            return { prim: 'None' };\n        }\n        return { prim: 'Some', args: [this.schema().Encode(args)] };\n    }\n    EncodeObject(args, semantic) {\n        let value = args;\n        if (value === undefined || value === null) {\n            return { prim: 'None' };\n        }\n        value = typeof value === 'object' && 'Some' in value ? value['Some'] : value;\n        return { prim: 'Some', args: [this.schema().EncodeObject(value, semantic)] };\n    }\n    Execute(val, semantics) {\n        if (val.prim === 'None') {\n            return null;\n        }\n        return { Some: this.schema().Execute(val.args[0], semantics) };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return { Some: this.schema().ExtractSchema() };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: OptionToken.prim,\n            schema: this.schema().generateSchema(),\n        };\n    }\n    ExtractSignature() {\n        return [...this.schema().ExtractSignature()];\n    }\n    get KeySchema() {\n        return this.schema();\n    }\n    compare(val1, val2) {\n        if (!val1) {\n            return -1;\n        }\n        else if (!val2) {\n            return 1;\n        }\n        return this.KeySchema.compare(val1, val2);\n    }\n    ToKey(val) {\n        return this.Execute(val);\n    }\n    ToBigMapKey(val) {\n        return {\n            key: this.EncodeObject(val),\n            type: this.typeWithoutAnnotations(),\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (OptionToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.subToken().findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nOptionToken.prim = 'option';\n\nclass TimestampToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        if (val.string && /^\\d+$/.test(val.string)) {\n            return new Date(Number(val.string) * 1000).toISOString();\n        }\n        else if (val.string) {\n            return new Date(val.string).toISOString();\n        }\n        else if (val.int) {\n            return new Date(Number(val.int) * 1000).toISOString();\n        }\n    }\n    Encode(args) {\n        const val = args.pop();\n        if (typeof val === 'number') {\n            return { int: String(val) };\n        }\n        else {\n            return { string: val };\n        }\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[TimestampToken.prim]) {\n            return semantic[TimestampToken.prim](val);\n        }\n        if (typeof val === 'number') {\n            return { int: String(val) };\n        }\n        else {\n            return { string: val };\n        }\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return TimestampToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: TimestampToken.prim,\n            schema: TimestampToken.prim,\n        };\n    }\n    ToKey({ string }) {\n        return string;\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: TimestampToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (TimestampToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nTimestampToken.prim = 'timestamp';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Int\n */\nclass IntValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'IntValidationError';\n    }\n}\nclass IntToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val[Object.keys(val)[0]]);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return IntToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: IntToken.prim,\n            schema: IntToken.prim,\n        };\n    }\n    /**\n     * @throws {@link IntValidationError}\n     */\n    validate(val) {\n        const bigNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val);\n        if (bigNumber.isNaN()) {\n            throw new IntValidationError(val, this, `Value is not a number: ${JSON.stringify(val)}`);\n        }\n    }\n    /**\n     * @throws {@link IntValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { int: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val).toFixed() };\n    }\n    /**\n     * @throws {@link IntValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[IntToken.prim]) {\n            return semantic[IntToken.prim](val);\n        }\n        return { int: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](val).toFixed() };\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { int: String(val) },\n            type: { prim: IntToken.prim },\n        };\n    }\n    ToKey({ int }) {\n        return int;\n    }\n    compare(int1, int2) {\n        const o1 = Number(int1);\n        const o2 = Number(int2);\n        if (o1 === o2) {\n            return 0;\n        }\n        return o1 < o2 ? -1 : 1;\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (IntToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nIntToken.prim = 'int';\n\nclass UnitToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Encode(args) {\n        args.pop();\n        return { prim: 'Unit' };\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[UnitToken.prim]) {\n            return semantic[UnitToken.prim](val);\n        }\n        return { prim: 'Unit' };\n    }\n    Execute(_val) {\n        return UnitValue;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return UnitToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: UnitToken.prim,\n            schema: UnitToken.prim,\n        };\n    }\n    compare(_val1, _val2) {\n        return 0;\n    }\n    ToKey(_val) {\n        return UnitValue;\n    }\n    ToBigMapKey(_val) {\n        return {\n            key: { prim: 'Unit' },\n            type: { prim: UnitToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (UnitToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nUnitToken.prim = 'unit';\n\nconst publicKeyPrefixLength = 4;\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Key\n */\nclass KeyValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'KeyValidationError';\n    }\n}\nclass KeyToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodeKey)(val.bytes);\n    }\n    /**\n     * @throws {@link KeyValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validatePublicKey)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new KeyValidationError(value, this, 'Key is not valid');\n        }\n    }\n    /**\n     * @throws {@link KeyValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link KeyValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[KeyToken.prim]) {\n            return semantic[KeyToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return KeyToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: KeyToken.prim,\n            schema: KeyToken.prim,\n        };\n    }\n    ToKey(val) {\n        return this.Execute(val);\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: KeyToken.prim },\n        };\n    }\n    compare(key1, key2) {\n        const keyPrefix1 = this.getPrefix(key1);\n        const keyPrefix2 = this.getPrefix(key2);\n        if (keyPrefix1 === _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.EDPK && keyPrefix2 !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.EDPK) {\n            return -1;\n        }\n        else if (keyPrefix1 === _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.SPPK && keyPrefix2 !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.SPPK) {\n            return keyPrefix2 === _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.EDPK ? 1 : -1;\n        }\n        else if (keyPrefix1 === _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.P2PK) {\n            if (keyPrefix2 !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.P2PK) {\n                return 1;\n            }\n            const keyBytes1 = this.getP256PublicKeyComparableBytes(key1);\n            const keyBytes2 = this.getP256PublicKeyComparableBytes(key2);\n            return Buffer.compare(keyBytes1, keyBytes2);\n        }\n        return super.compare(key1, key2);\n    }\n    getPrefix(val) {\n        return val.substring(0, publicKeyPrefixLength);\n    }\n    getP256PublicKeyComparableBytes(p2pk) {\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.b58cdecode)(p2pk, _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.prefix[_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.Prefix.P2PK]).slice(1);\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (KeyToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nKeyToken.prim = 'key';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing Key Hash\n */\nclass KeyHashValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'KeyHashValidationError';\n    }\n}\nclass KeyHashToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodeKeyHash)(val.bytes);\n    }\n    /**\n     * @throws {@link KeyHashValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateKeyHash)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new KeyHashValidationError(value, this, `KeyHash is not valid: ${JSON.stringify(value)}`);\n        }\n    }\n    /**\n     * @throws {@link KeyHashValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link KeyHashValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[KeyHashToken.prim]) {\n            return semantic[KeyHashToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return KeyHashToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: KeyHashToken.prim,\n            schema: KeyHashToken.prim,\n        };\n    }\n    ToKey({ string, bytes }) {\n        if (string) {\n            return string;\n        }\n        return (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.encodeKeyHash)(bytes);\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: KeyHashToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (KeyHashToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nKeyHashToken.prim = 'key_hash';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Signature\n */\nclass SignatureValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'SignatureValidationError';\n    }\n}\nclass SignatureToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        // TODO decode the signature\n        return val.bytes;\n    }\n    /**\n     * @throws {@link SignatureValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateSignature)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new SignatureValidationError(value, this, 'Signature is not valid');\n        }\n    }\n    /**\n     * @throws {@link SignatureValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link SignatureValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[SignatureToken.prim]) {\n            return semantic[SignatureToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return SignatureToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: SignatureToken.prim,\n            schema: SignatureToken.prim,\n        };\n    }\n    ToKey(val) {\n        return this.Execute(val);\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: SignatureToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (SignatureToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nSignatureToken.prim = 'signature';\n\nclass LambdaToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get paramSchema() {\n        return this.createToken(this.val.args[0], this.idx);\n    }\n    get returnSchema() {\n        return this.createToken(this.val.args[1], this.idx + 1);\n    }\n    Execute(val) {\n        if (val.string) {\n            return val.string;\n        }\n        else {\n            return val;\n        }\n    }\n    Encode(args) {\n        const val = args.pop();\n        return val;\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[LambdaToken.prim]) {\n            return semantic[LambdaToken.prim](val);\n        }\n        return val;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            [LambdaToken.prim]: {\n                parameters: this.paramSchema.ExtractSchema(),\n                returns: this.returnSchema.ExtractSchema(),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: LambdaToken.prim,\n            schema: {\n                parameters: this.paramSchema.generateSchema(),\n                returns: this.returnSchema.generateSchema(),\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (LambdaToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.createToken(this.val.args[0], this.idx).findAndReturnTokens(tokenToFind, tokens);\n        this.createToken(this.val.args[1], this.idx).findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nLambdaToken.prim = 'lambda';\n\nclass OperationToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    Execute(val) {\n        return val.string;\n    }\n    Encode(...args) {\n        const val = args.pop();\n        return { string: val };\n    }\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[OperationToken.prim]) {\n            return semantic[OperationToken.prim](val);\n        }\n        return { string: val };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return OperationToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: OperationToken.prim,\n            schema: OperationToken.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (OperationToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nOperationToken.prim = 'operation';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Set\n */\nclass SetValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'SetValidationError';\n    }\n}\nclass SetToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get KeySchema() {\n        return this.createToken(this.val.args[0], 0);\n    }\n    /**\n     * @throws {@link SetValidationError}\n     */\n    validate(value) {\n        if (!Array.isArray(value)) {\n            throw new SetValidationError(value, this, `Value ${JSON.stringify(value)} is not an array`);\n        }\n    }\n    /**\n     * @throws {@link SetValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return val\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .reduce((prev, current) => {\n            return [...prev, this.KeySchema.EncodeObject(current)];\n        }, []);\n    }\n    Execute(val, semantics) {\n        return val.reduce((prev, current) => {\n            return [...prev, this.KeySchema.Execute(current, semantics)];\n        }, []);\n    }\n    /**\n     * @throws {@link SetValidationError}\n     */\n    EncodeObject(args, semantic) {\n        this.validate(args);\n        if (semantic && semantic[SetToken.prim]) {\n            return semantic[SetToken.prim](args);\n        }\n        return args\n            .sort((a, b) => this.KeySchema.compare(a, b))\n            .reduce((prev, current) => {\n            return [...prev, this.KeySchema.EncodeObject(current)];\n        }, []);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return SetToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: SetToken.prim,\n            schema: this.KeySchema.generateSchema(),\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (SetToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.KeySchema.findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nSetToken.prim = 'set';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a ChainID\n */\nclass ChainIDValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'ChainIDValidationError';\n    }\n}\nclass ChainIDToken extends ComparableToken {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link ChainIDValidationError}\n     */\n    validate(value) {\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_3__.validateChain)(value) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_3__.ValidationResult.VALID) {\n            throw new ChainIDValidationError(value, this, `Value ${JSON.stringify(value)} is not a valid ChainID`);\n        }\n    }\n    Execute(val) {\n        return val[Object.keys(val)[0]];\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return ChainIDToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: ChainIDToken.prim,\n            schema: ChainIDToken.prim,\n        };\n    }\n    /**\n     * @throws {@link ChainIDValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        this.validate(val);\n        return { string: val };\n    }\n    /**\n     * @throws {@link ChainIDValidationError}\n     */\n    EncodeObject(val, semantic) {\n        this.validate(val);\n        if (semantic && semantic[ChainIDToken.prim]) {\n            return semantic[ChainIDToken.prim](val);\n        }\n        return { string: val };\n    }\n    ToKey({ string }) {\n        return string;\n    }\n    ToBigMapKey(val) {\n        return {\n            key: { string: val },\n            type: { prim: ChainIDToken.prim },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (ChainIDToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nChainIDToken.prim = 'chain_id';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain\n */\nclass EncodeTicketError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor() {\n        super();\n        this.name = 'TicketEncodeError';\n        this.message = 'Tickets cannot be sent to the blockchain; they are created on-chain';\n    }\n}\nconst ticketerType$1 = { prim: 'contract' };\nconst amountType$1 = { prim: 'int' };\nclass TicketToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get valueToken() {\n        return this.createToken(this.val.args[0], this.idx);\n    }\n    /**\n     * @throws {@link EncodeTicketError}\n     */\n    Encode(_args) {\n        throw new EncodeTicketError();\n    }\n    /**\n     * @throws {@link EncodeTicketError}\n     */\n    EncodeObject(args, semantic) {\n        if (semantic && semantic[TicketToken.prim]) {\n            return semantic[TicketToken.prim](args, this.val);\n        }\n        throw new EncodeTicketError();\n    }\n    Execute(val, semantics) {\n        if (semantics && semantics[TicketToken.prim]) {\n            return semantics[TicketToken.prim](val, this.val);\n        }\n        const ticketer = this.createToken(ticketerType$1, this.idx);\n        const value = this.valueToken;\n        const amount = this.createToken(amountType$1, this.idx);\n        if (undefined === val.args[2] && undefined !== val.args[1].args) {\n            return {\n                ticketer: ticketer.Execute(val.args[0], semantics),\n                value: value.Execute(val.args[1].args[0], semantics),\n                amount: amount.Execute(val.args[1].args[1], semantics),\n            };\n        }\n        return {\n            ticketer: ticketer.Execute(val.args[0], semantics),\n            value: value.Execute(val.args[1], semantics),\n            amount: amount.Execute(val.args[2], semantics),\n        };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            ticketer: ContractToken.prim,\n            value: this.valueToken.ExtractSchema(),\n            amount: IntToken.prim,\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: TicketToken.prim,\n            schema: {\n                value: this.valueToken.generateSchema(),\n                ticketer: {\n                    __michelsonType: ContractToken.prim,\n                    schema: ContractToken.prim,\n                },\n                amount: {\n                    __michelsonType: IntToken.prim,\n                    schema: IntToken.prim,\n                },\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (TicketToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.valueToken.findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nTicketToken.prim = 'ticket';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding and sending a ticket to the blockchain\n */\nclass EncodeTicketDeprecatedError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor() {\n        super();\n        this.name = 'TicketDeprecatedEncodeError';\n        this.message = 'Ticket_deprecated cannot be sent to the blockchain; they are created on-chain';\n    }\n}\nconst ticketerType = { prim: 'contract' };\nconst amountType = { prim: 'int' };\nclass TicketDeprecatedToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    get valueToken() {\n        return this.createToken(this.val.args[0], this.idx);\n    }\n    /**\n     * @throws {@link EncodeTicketDeprecatedError}\n     */\n    Encode(_args) {\n        throw new EncodeTicketDeprecatedError();\n    }\n    /**\n     * @throws {@link EncodeTicketDeprecatedError}\n     */\n    EncodeObject(args, semantic) {\n        if (semantic && semantic[TicketDeprecatedToken.prim]) {\n            return semantic[TicketDeprecatedToken.prim](args, this.val);\n        }\n        throw new EncodeTicketDeprecatedError();\n    }\n    Execute(val, semantics) {\n        if (semantics && semantics[TicketDeprecatedToken.prim]) {\n            return semantics[TicketDeprecatedToken.prim](val, this.val);\n        }\n        const ticketer = this.createToken(ticketerType, this.idx);\n        const value = this.valueToken;\n        const amount = this.createToken(amountType, this.idx);\n        if (undefined === val.args[2] && undefined !== val.args[1].args) {\n            return {\n                ticketer: ticketer.Execute(val.args[0], semantics),\n                value: value.Execute(val.args[1].args[0], semantics),\n                amount: amount.Execute(val.args[1].args[1], semantics),\n            };\n        }\n        return {\n            ticketer: ticketer.Execute(val.args[0], semantics),\n            value: value.Execute(val.args[1], semantics),\n            amount: amount.Execute(val.args[2], semantics),\n        };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            ticketer: ContractToken.prim,\n            value: this.valueToken.ExtractSchema(),\n            amount: IntToken.prim,\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: TicketDeprecatedToken.prim,\n            schema: {\n                value: this.valueToken.generateSchema(),\n                ticketer: {\n                    __michelsonType: ContractToken.prim,\n                    schema: ContractToken.prim,\n                },\n                amount: {\n                    __michelsonType: IntToken.prim,\n                    schema: IntToken.prim,\n                },\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (TicketDeprecatedToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        this.valueToken.findAndReturnTokens(tokenToFind, tokens);\n        return tokens;\n    }\n}\nTicketDeprecatedToken.prim = 'ticket_deprecated';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Never Token\n */\nclass NeverTokenError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'NeverTokenError';\n    }\n}\nclass NeverToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link NeverTokenError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        throw new NeverTokenError(val, this, `Assigning a value to the type never is forbidden. Trying to assign ${JSON.stringify(val)}.`);\n    }\n    /**\n     * @throws {@link NeverTokenError}\n     */\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[NeverToken.prim]) {\n            return semantic[NeverToken.prim](val);\n        }\n        throw new NeverTokenError(val, this, `Assigning a value to the type never is forbidden. Trying to assign ${JSON.stringify(val)}.`);\n    }\n    /**\n     * @throws {@link NeverTokenError}\n     */\n    Execute(val) {\n        throw new NeverTokenError(val, this, `There is no literal value for the type never. Trying to execute ${JSON.stringify(val)}.`);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return NeverToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: NeverToken.prim,\n            schema: NeverToken.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (NeverToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nNeverToken.prim = 'never';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Sapling State\n */\nclass SaplingStateValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'SaplingStateValidationError';\n    }\n}\nclass SaplingStateToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    isValid(val) {\n        return typeof val === 'object' && Object.keys(val).length === 0;\n    }\n    /**\n     * @throws {@link SaplingStateValidationError}\n     */\n    Execute(val, semantic) {\n        if (semantic && semantic[SaplingStateToken.prim]) {\n            return semantic[SaplingStateToken.prim](val, this.val);\n        }\n        if ('int' in val) {\n            return val.int;\n        }\n        else {\n            throw new SaplingStateValidationError(val, this, `Sapling state is expecting an object with an int property. Got ${JSON.stringify(val)}`);\n        }\n    }\n    /**\n     * @throws {@link SaplingStateValidationError}\n     */\n    Encode(args) {\n        const val = args.pop();\n        if (this.isValid(val)) {\n            return [];\n        }\n        else {\n            throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${JSON.stringify(val)} while expecting: {}`);\n        }\n    }\n    /**\n     * @throws {@link SaplingStateValidationError}\n     */\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[SaplingStateToken.prim]) {\n            return semantic[SaplingStateToken.prim](val);\n        }\n        if (this.isValid(val)) {\n            return [];\n        }\n        else {\n            throw new SaplingStateValidationError(val, this, `Invalid sapling_state. Received: ${JSON.stringify(val)} while expecting: {}`);\n        }\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            [SaplingStateToken.prim]: {\n                'memo-size': Number(this.val.args[0]['int']),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: SaplingStateToken.prim,\n            schema: {\n                memoSize: this.val.args[0]['int'],\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (SaplingStateToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nSaplingStateToken.prim = 'sapling_state';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Sapling Transaction\n */\nclass SaplingTransactionValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'SaplingTransactionValidationError';\n    }\n}\nclass SaplingTransactionToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link SaplingTransactionValidationError}\n     */\n    Execute(_val) {\n        throw new SaplingTransactionValidationError(_val, this, `There is no literal value for the sapling_transaction type. Got: ${JSON.stringify(_val)}.`);\n    }\n    /**\n     * @throws {@link SaplingTransactionValidationError}\n     */\n    validateBytes(val) {\n        const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n        if (bytes && bytes[2].length % 2 === 0) {\n            return bytes[2];\n        }\n        else {\n            throw new SaplingTransactionValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n        }\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    Encode(args) {\n        let val = args.pop();\n        val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n        return { bytes: String(val).toString() };\n    }\n    EncodeObject(val, semantic) {\n        val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n        if (semantic && semantic[SaplingTransactionToken.prim]) {\n            return semantic[SaplingTransactionToken.prim](val);\n        }\n        return { bytes: String(val).toString() };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            [SaplingTransactionToken.prim]: {\n                'memo-size': Number(this.val.args[0]['int']),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: SaplingTransactionToken.prim,\n            schema: {\n                memoSize: this.val.args[0]['int'],\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (SaplingTransactionToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nSaplingTransactionToken.prim = 'sapling_transaction';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Sapling Transaction Deprecated\n */\nclass SaplingTransactionDeprecatedValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'SaplingTransactionDeprecatedValidationError';\n    }\n}\nclass SaplingTransactionDeprecatedToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link SaplingTransactionDeprecatedValidationError}\n     */\n    Execute(_val) {\n        throw new SaplingTransactionDeprecatedValidationError(_val, this, `There is no literal value for the sapling_transaction_deprecated type. Got: ${JSON.stringify(_val)}.`);\n    }\n    /**\n     * @throws {@link SaplingTransactionDeprecatedValidationError}\n     */\n    validateBytes(val) {\n        const bytes = /^(0x|0X)?([0-9a-fA-F]*$)/.exec(val);\n        if (bytes && bytes[2].length % 2 === 0) {\n            return bytes[2];\n        }\n        else {\n            throw new SaplingTransactionDeprecatedValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n        }\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    Encode(args) {\n        let val = args.pop();\n        val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n        return { bytes: String(val).toString() };\n    }\n    EncodeObject(val, semantic) {\n        val = this.validateBytes(this.convertUint8ArrayToHexString(val));\n        if (semantic && semantic[SaplingTransactionDeprecatedToken.prim]) {\n            return semantic[SaplingTransactionDeprecatedToken.prim](val);\n        }\n        return { bytes: String(val).toString() };\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return {\n            [SaplingTransactionDeprecatedToken.prim]: {\n                'memo-size': Number(this.val.args[0]['int']),\n            },\n        };\n    }\n    generateSchema() {\n        return {\n            __michelsonType: SaplingTransactionDeprecatedToken.prim,\n            schema: {\n                memoSize: this.val.args[0]['int'],\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (SaplingTransactionDeprecatedToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nSaplingTransactionDeprecatedToken.prim = 'sapling_transaction_deprecated';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a BLS12-381 scalar field Fr\n */\nclass Bls12381frValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'Bls12381frValidationError';\n    }\n}\nclass Bls12381frToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link Bls12381frValidationError}\n     */\n    validate(val) {\n        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n            return;\n        }\n        throw new Bls12381frValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link Bls12381frValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        if (typeof val === 'number') {\n            return { int: val.toString() };\n        }\n        else {\n            val = this.convertUint8ArrayToHexString(val);\n            this.validate(val);\n            return { bytes: val };\n        }\n    }\n    /**\n     * @throws {@link Bls12381frValidationError}\n     */\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[Bls12381frToken.prim]) {\n            return semantic[Bls12381frToken.prim](val);\n        }\n        if (typeof val === 'number') {\n            return { int: val.toString() };\n        }\n        else {\n            val = this.convertUint8ArrayToHexString(val);\n            this.validate(val);\n            return { bytes: val };\n        }\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return Bls12381frToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: Bls12381frToken.prim,\n            schema: Bls12381frToken.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (Bls12381frToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\n// An element of the BLS12-381 scalar field Fr\n// see https://tezos.gitlab.io/michelson-reference/#type-bls12_381_fr\nBls12381frToken.prim = 'bls12_381_fr';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a BLS12-381 curve G1\n */\nclass Bls12381g1ValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'Bls12381g1ValidationError';\n    }\n}\nclass Bls12381g1Token extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link Bls12381g1ValidationError}\n     */\n    validate(val) {\n        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n            return;\n        }\n        throw new Bls12381g1ValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link Bls12381g1ValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        return { bytes: val };\n    }\n    /**\n     * @throws {@link Bls12381g1ValidationError}\n     */\n    EncodeObject(val, semantic) {\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        if (semantic && semantic[Bls12381g1Token.prim]) {\n            return semantic[Bls12381g1Token.prim](val);\n        }\n        return { bytes: val };\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return Bls12381g1Token.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: Bls12381g1Token.prim,\n            schema: Bls12381g1Token.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (Bls12381g1Token.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\n// A point on the BLS12-381 curve G1\n// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g1\nBls12381g1Token.prim = 'bls12_381_g1';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a BLS12-381 curve G2\n */\nclass Bls12381g2ValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'Bls12381g2ValidationError';\n    }\n}\nclass Bls12381g2Token extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link Bls12381g2ValidationError}\n     */\n    validate(val) {\n        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n            return;\n        }\n        throw new Bls12381g2ValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link Bls12381g2ValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        return { bytes: val };\n    }\n    /**\n     * @throws {@link Bls12381g2ValidationError}\n     */\n    EncodeObject(val, semantic) {\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        if (semantic && semantic[Bls12381g2Token.prim]) {\n            return semantic[Bls12381g2Token.prim](val);\n        }\n        return { bytes: val };\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return Bls12381g2Token.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: Bls12381g2Token.prim,\n            schema: Bls12381g2Token.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (Bls12381g2Token.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\n// A point on the BLS12-381 curve G2\n// See https://tezos.gitlab.io/michelson-reference/#type-bls12_381_g2\nBls12381g2Token.prim = 'bls12_381_g2';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Chest\n */\nclass ChestValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'ChestValidationError';\n    }\n}\nclass ChestToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    validate(val) {\n        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 == 0) {\n            return;\n        }\n        throw new ChestValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        return { bytes: val };\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    EncodeObject(val, semantic) {\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        if (semantic && semantic[ChestToken.prim]) {\n            return semantic[ChestToken.prim](val);\n        }\n        return { bytes: val };\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return ChestToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: ChestToken.prim,\n            schema: ChestToken.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (ChestToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nChestToken.prim = 'chest';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding/executing a Chest Key\n */\nclass ChestKeyValidationError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'ChestKeyValidationError';\n    }\n}\nclass ChestKeyToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    validate(val) {\n        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {\n            return;\n        }\n        throw new ChestKeyValidationError(val, this, `Invalid bytes: ${JSON.stringify(val)}`);\n    }\n    convertUint8ArrayToHexString(val) {\n        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    Encode(args) {\n        let val = args.pop();\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        return { bytes: val };\n    }\n    /**\n     * @throws {@link ChestKeyValidationError}\n     */\n    EncodeObject(val, semantic) {\n        val = this.convertUint8ArrayToHexString(val);\n        this.validate(val);\n        if (semantic && semantic[ChestKeyToken.prim]) {\n            return semantic[ChestKeyToken.prim](val);\n        }\n        return { bytes: val };\n    }\n    Execute(val) {\n        return val.bytes;\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return ChestKeyToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: ChestKeyToken.prim,\n            schema: ChestKeyToken.prim,\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (ChestKeyToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nChestKeyToken.prim = 'chest_key';\n\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing encoding a Global Constant\n */\nclass GlobalConstantEncodingError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'GlobalConstantEncodingError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure happening when parsing executing a Global Constant\n */\nclass GlobalConstantDecodingError extends TokenValidationError {\n    constructor(value, token, message) {\n        super(value, token, message);\n        this.value = value;\n        this.token = token;\n        this.name = 'GlobalConstantDecodingError';\n    }\n}\nclass GlobalConstantToken extends Token {\n    constructor(val, idx, fac) {\n        super(val, idx, fac);\n        this.val = val;\n        this.idx = idx;\n        this.fac = fac;\n    }\n    /**\n     * @throws {@link GlobalConstantDecodingError}\n     */\n    Execute(val, semantic) {\n        if (semantic && semantic[GlobalConstantToken.prim]) {\n            return semantic[GlobalConstantToken.prim](val, this.val);\n        }\n        else {\n            throw new GlobalConstantDecodingError(val, this, `Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n        }\n    }\n    /**\n     * @throws {@link GlobalConstantEncodingError}\n     */\n    Encode(args) {\n        throw new GlobalConstantEncodingError(args, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n    }\n    /**\n     * @throws {@link GlobalConstantEncodingError}\n     */\n    EncodeObject(val, semantic) {\n        if (semantic && semantic[GlobalConstantToken.prim]) {\n            return semantic[GlobalConstantToken.prim](val);\n        }\n        throw new GlobalConstantEncodingError(val, this, `Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: ${this.val.args[0]['string']}.`);\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return GlobalConstantToken.prim;\n    }\n    generateSchema() {\n        return {\n            __michelsonType: GlobalConstantToken.prim,\n            schema: {\n                hash: this.val.args[0]['string'],\n            },\n        };\n    }\n    findAndReturnTokens(tokenToFind, tokens) {\n        if (GlobalConstantToken.prim === tokenToFind) {\n            tokens.push(this);\n        }\n        return tokens;\n    }\n}\nGlobalConstantToken.prim = 'constant';\n\nconst tokens = [\n    PairToken,\n    NatToken,\n    StringToken,\n    BigMapToken,\n    AddressToken,\n    TxRollupL2AddressToken,\n    MapToken,\n    BoolToken,\n    OrToken,\n    ContractToken,\n    ListToken,\n    MutezToken,\n    BytesToken,\n    OptionToken,\n    TimestampToken,\n    IntToken,\n    UnitToken,\n    KeyToken,\n    KeyHashToken,\n    SignatureToken,\n    LambdaToken,\n    OperationToken,\n    SetToken,\n    ChainIDToken,\n    TicketToken,\n    TicketDeprecatedToken,\n    NeverToken,\n    SaplingStateToken,\n    SaplingTransactionToken,\n    SaplingTransactionDeprecatedToken,\n    Bls12381frToken,\n    Bls12381g1Token,\n    Bls12381g2Token,\n    ChestToken,\n    ChestKeyToken,\n    GlobalConstantToken,\n];\n\n/**\n *  @category Error\n *  @description Error that indicates a script having an invalid type or it being unsupported by the Michelson Encoder. Note some protocol changes might affect this, we encourage users to open an issue so we can look into implementing support for said types.\n */\nclass InvalidTokenError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(message, data) {\n        super(message);\n        this.message = message;\n        this.data = data;\n        this.name = 'Invalid token error';\n    }\n}\n/**\n *\n * @description Create a token from a value\n * @throws {@link InvalidTokenError} If the value passed is not supported by the Michelson Encoder\n */\nfunction createToken(val, idx) {\n    if (Array.isArray(val)) {\n        return new PairToken(val, idx, createToken);\n    }\n    const t = tokens.find((x) => x.prim === val.prim);\n    if (!t) {\n        throw new InvalidTokenError(`Malformed data: ${JSON.stringify(val)}. Expected a value with a valid prim property`, val);\n    }\n    return new t(val, idx, createToken);\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n *  @category Error\n *  @description Error that indicates a failure when encoding (transforming JS parameter into JSON Michelson) the parameter of the view\n */\nclass ParameterEncodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.InvalidViewParameterError {\n    constructor(viewName, sigs, args, cause) {\n        super(viewName, sigs, args, cause);\n        this.viewName = viewName;\n        this.sigs = sigs;\n        this.args = args;\n        this.cause = cause;\n        this.name = 'ParameterEncodingError';\n        this.message = `Could not encode parameter ${JSON.stringify(args)} received for name \"${viewName}\" expecting one of the following signatures ${JSON.stringify(sigs)}`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid on-chain view found on the script\n */\nclass InvalidScriptError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(script, reason) {\n        super();\n        this.script = script;\n        this.reason = reason;\n        this.name = 'InvalidScriptError';\n        let message = `Invalid on-chain view found in the following script.`;\n        if (reason) {\n            message += ` Reason: ${reason}.`;\n        }\n        message += `Script: ${JSON.stringify(script)}`;\n        this.message = message;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid RPC response being passed or used\n */\nclass InvalidRpcResponseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(script, reason) {\n        super();\n        this.script = script;\n        this.reason = reason;\n        this.name = 'InvalidRpcResponseError';\n        let message = `Invalid RPC response passed as argument(s).`;\n        if (reason) {\n            message += ` Reason: ${reason}.`;\n        }\n        message += ` Received: ${JSON.stringify(script)}`;\n        this.message = message;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid big map schema being passed or used\n */\nclass InvalidBigMapSchemaError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = 'InvalidBigMapSchemaError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid big map diff being passed or used\n */\nclass InvalidBigMapDiffError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(message, value) {\n        super(message);\n        this.message = message;\n        this.value = value;\n        this.name = 'InvalidBigMapDiffError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode big maps\n */\nclass BigMapEncodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(obj, details, schema, value) {\n        super();\n        this.details = details;\n        this.schema = schema;\n        this.value = value;\n        this.name = 'BigMapEncodingError';\n        this.message = `Unable to encode the big map ${obj}. Schema is: ${JSON.stringify(schema)}. The ${obj} is: ${JSON.stringify(value)}. Error details: ${details}`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when trying to encode storage\n */\nclass StorageEncodingError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(obj, details, schema, value, semantics) {\n        super();\n        this.details = details;\n        this.schema = schema;\n        this.value = value;\n        this.semantics = semantics;\n        this.name = 'StorageEncodingError';\n        this.message = `Unable to encode ${obj}. The schema is: ${JSON.stringify(schema)}, the value is: ${JSON.stringify(value)}.${semantics ? `And the semantic is: ${JSON.stringify(semantics)}` : ''}. Error details: ${details}`;\n    }\n}\n/**\n *  @category Error\n *  @description General error that indicates a function not being passed a necessary argument\n */\nclass MissingArgumentError extends _taquito_core__WEBPACK_IMPORTED_MODULE_1__.TaquitoError {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = 'MissingArgumentError';\n    }\n}\n\nvar _a;\nconst schemaTypeSymbol = Symbol.for('taquito-schema-type-symbol');\n// collapse comb pair\nfunction collapse(val, prim = PairToken.prim) {\n    var _b, _c;\n    if (Array.isArray(val)) {\n        return collapse({\n            prim: prim,\n            args: val,\n        }, prim);\n    }\n    const extended = val;\n    if (extended.prim === prim && extended.args && extended.args.length > 2) {\n        return Object.assign(Object.assign({}, extended), { args: [\n                (_b = extended.args) === null || _b === void 0 ? void 0 : _b[0],\n                {\n                    prim: prim,\n                    args: (_c = extended.args) === null || _c === void 0 ? void 0 : _c.slice(1),\n                },\n            ] });\n    }\n    return extended;\n}\nfunction deepEqual(a, b) {\n    if (a === undefined || b === undefined) {\n        return a === b;\n    }\n    const ac = collapse(a);\n    const bc = collapse(b);\n    return (ac.prim === bc.prim &&\n        ((ac.args === undefined && bc.args === undefined) ||\n            (ac.args !== undefined &&\n                bc.args !== undefined &&\n                ac.args.length === bc.args.length &&\n                ac.args.every((v, i) => { var _b, _c; return deepEqual(v, (_c = (_b = bc.args) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {}); }))) &&\n        ((ac.annots === undefined && bc.annots === undefined) ||\n            (ac.annots !== undefined &&\n                bc.annots !== undefined &&\n                ac.annots.length === bc.annots.length &&\n                ac.annots.every((v, i) => { var _b; return v === ((_b = bc.annots) === null || _b === void 0 ? void 0 : _b[i]); }))));\n}\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. Its API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nclass Schema {\n    static isSchema(obj) {\n        return obj && obj[schemaTypeSymbol] === true;\n    }\n    /**\n     * @throws {@link InvalidRpcResponseError}\n     */\n    static fromRPCResponse(val) {\n        if (!val) {\n            throw new InvalidRpcResponseError(val, 'the RPC response is empty');\n        }\n        if (!val.script) {\n            throw new InvalidRpcResponseError(val, 'the RPC response has no script');\n        }\n        if (!Array.isArray(val.script.code)) {\n            throw new InvalidRpcResponseError(val, 'The response.script.code should be an array');\n        }\n        let code = val.script.code;\n        while (code.length === 1 && Array.isArray(code[0])) {\n            code = code[0];\n        }\n        const storage = code.find((x) => 'prim' in x && x.prim === 'storage');\n        if (!storage || !Array.isArray(storage.args)) {\n            throw new InvalidRpcResponseError(val, 'The response.script.code has an element of type {prim: \"storage\"}, but its args is not an array');\n        }\n        return new Schema(storage.args[0]);\n    }\n    isExpressionExtended(val) {\n        return 'prim' in val && Array.isArray(val.args);\n    }\n    constructor(val) {\n        this.val = val;\n        this[_a] = true;\n        this.root = createToken(val, 0);\n        if (this.root instanceof BigMapToken) {\n            this.bigMap = this.root;\n        }\n        else if (this.isExpressionExtended(val) && val.prim === 'pair') {\n            const exp = val.args[0];\n            if (this.isExpressionExtended(exp) && exp.prim === 'big_map') {\n                this.bigMap = new BigMapToken(exp, 0, createToken);\n            }\n        }\n    }\n    removeTopLevelAnnotation(obj) {\n        // PairToken and OrToken can have redundant top level annotation in their storage\n        if (this.root instanceof PairToken || this.root instanceof OrToken) {\n            if (this.root.hasAnnotations() && typeof obj === 'object' && Object.keys(obj).length === 1) {\n                return obj[Object.keys(obj)[0]];\n            }\n        }\n        return obj;\n    }\n    Execute(val, semantics) {\n        const storage = this.root.Execute(val, semantics);\n        return this.removeTopLevelAnnotation(storage);\n    }\n    Typecheck(val) {\n        if (this.root instanceof BigMapToken && Number.isInteger(Number(val))) {\n            return;\n        }\n        if (this.root instanceof TicketToken && val.ticketer && val.value && val.amount) {\n            return;\n        }\n        if (this.root instanceof TicketDeprecatedToken && val.ticketer && val.value && val.amount) {\n            return;\n        }\n        if (this.root instanceof MapToken && this.root.ValueSchema instanceof BigMapToken) {\n            return;\n        }\n        this.root.EncodeObject(val);\n    }\n    /**\n     * @throws {@link InvalidBigMapSchemaError}\n     * @throws {@link InvalidBigMapDiffError}\n     */\n    ExecuteOnBigMapDiff(diff, semantics) {\n        if (!this.bigMap) {\n            throw new InvalidBigMapSchemaError('Big map schema is undefined');\n        }\n        if (!Array.isArray(diff)) {\n            throw new InvalidBigMapDiffError(`Big map diff must be an array, got: ${JSON.stringify(diff)}`, diff);\n        }\n        const eltFormat = diff.map(({ key, value }) => ({ args: [key, value] }));\n        return this.bigMap.Execute(eltFormat, semantics);\n    }\n    /**\n     * @throws {@link InvalidBigMapSchemaError}\n     */\n    ExecuteOnBigMapValue(key, semantics) {\n        if (!this.bigMap) {\n            throw new InvalidBigMapSchemaError('Big map schema is undefined');\n        }\n        return this.bigMap.ValueSchema.Execute(key, semantics);\n    }\n    /**\n     * @throws {@link InvalidBigMapSchemaError}\n     * @throws {@link BigMapEncodingError}\n     */\n    EncodeBigMapKey(key) {\n        if (!this.bigMap) {\n            throw new InvalidBigMapSchemaError('Big map schema is undefined');\n        }\n        try {\n            return this.bigMap.KeySchema.ToBigMapKey(key);\n        }\n        catch (ex) {\n            throw new BigMapEncodingError('key', ex, this.bigMap.KeySchema, key);\n        }\n    }\n    /**\n     * @throws {@link TokenValidationError}\n     * @throws {@link StorageEncodingError}\n     */\n    Encode(value, semantics) {\n        try {\n            return this.root.EncodeObject(value, semantics);\n        }\n        catch (ex) {\n            if (ex instanceof TokenValidationError) {\n                throw ex;\n            }\n            throw new StorageEncodingError('storage object', ex, this.root, value, semantics);\n        }\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return this.removeTopLevelAnnotation(this.root.ExtractSchema());\n    }\n    /**\n     * @description Produce a representation of the storage schema.\n     * Note: Provide guidance on how to write the storage object for the origination operation with Taquito.\n     */\n    generateSchema() {\n        return this.removeTopLevelAnnotation(this.root.generateSchema());\n    }\n    /**\n     * @deprecated\n     * @throws {@link InvalidBigMapSchemaError}\n     */\n    ComputeState(tx, state) {\n        if (!this.bigMap) {\n            throw new InvalidBigMapSchemaError('Big map schema is undefined');\n        }\n        const bigMap = tx.reduce((prev, current) => {\n            return Object.assign(Object.assign({}, prev), this.ExecuteOnBigMapDiff(current.contents[0].metadata.operation_result.big_map_diff));\n        }, {});\n        return Object.assign(Object.assign({}, this.Execute(state)), { [this.bigMap.annot()]: bigMap });\n    }\n    /**\n     * @description Look up in top-level pairs of the storage to find a value matching the specified type\n     *\n     * @returns The first value found that match the type or `undefined` if no value is found\n     *\n     * @param storage storage to parse to find the value\n     * @param valueType type of value to look for\n     *\n     */\n    FindFirstInTopLevelPair(storage, valueType) {\n        return this.findValue(this.root['val'], storage, valueType);\n    }\n    // TODO check these type casts\n    /**\n     * @throws {@link MissingArgumentError}\n     */\n    findValue(schema, storage, valueToFind) {\n        if (deepEqual(valueToFind, schema)) {\n            return storage;\n        }\n        if (Array.isArray(schema) || schema.prim === 'pair') {\n            const sch = collapse(schema);\n            const strg = collapse(storage, 'Pair');\n            if (sch.args === undefined || strg.args === undefined) {\n                throw new MissingArgumentError('Tokens have no arguments'); // unlikely\n            }\n            if (sch.args[0])\n                return (\n                // unsafe\n                this.findValue(sch.args[0], strg.args[0], valueToFind) ||\n                    this.findValue(sch.args[1], strg.args[1], valueToFind));\n        }\n    }\n    /**\n     * @description Look up the schema to find any occurrence of a particular token.\n     *\n     * @returns an array of tokens of the specified kind or an empty array if no token was found\n     *\n     * @param tokenToFind string representing the prim property of the token to find\n     *\n     * @example\n     * ```\n     * Useful to find all global constants in a script, an array of GlobalConstantToken is returned:\n     *\n     * const schema = new Schema(script);\n     * const allGlobalConstantTokens = schema.findToken('constant');\n     * ```\n     *\n     */\n    findToken(tokenToFind) {\n        const tokens = [];\n        return this.root.findAndReturnTokens(tokenToFind, tokens);\n    }\n}\n_a = schemaTypeSymbol;\n\n/**\n * @warn Our current smart contract abstraction feature is currently in preview. It's API is not final, and it may not cover every use case (yet). We will greatly appreciate any feedback on this feature.\n */\nclass ParameterSchema {\n    /**\n     *\n     * @description Create an instance of ParameterSchema from a contract script\n     *\n     * @param val contract script obtained from the RPC\n     * @returns ParameterSchema\n     * @throws {InvalidRpcResponseError} If the RPC response is invalid\n     */\n    static fromRPCResponse(val) {\n        if (!val) {\n            throw new InvalidRpcResponseError(val, 'the RPC response is empty');\n        }\n        if (!val.script) {\n            throw new InvalidRpcResponseError(val, 'the RPC response has no script');\n        }\n        if (!Array.isArray(val.script.code)) {\n            throw new InvalidRpcResponseError(val, 'The response.script.code should be an array');\n        }\n        const parameter = val.script.code.find((x) => 'prim' in x && x.prim === 'parameter');\n        if (!parameter) {\n            throw new InvalidRpcResponseError(val, `The response.script.code should have an element of type {prim: \"parameter\"}`);\n        }\n        if (!Array.isArray(parameter.args)) {\n            throw new InvalidRpcResponseError(val, `The response.script.code has an element of type {prim: \"parameter\"}, but its args is not an array`);\n        }\n        return new ParameterSchema(parameter.args[0]);\n    }\n    /**\n     * @description Check if the Contract parameter is multiple entry point or not\n     */\n    get isMultipleEntryPoint() {\n        return (this.root instanceof OrToken ||\n            (this.root instanceof OptionToken && this.root.subToken() instanceof OrToken));\n    }\n    /**\n     * @description Check if the Contract parameter has an annotation or not\n     */\n    get hasAnnotation() {\n        if (this.isMultipleEntryPoint) {\n            return Object.keys(this.ExtractSchema())[0] !== '0';\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * @description Return the schema of the parameter of a specific entry point\n     * @throws {@link InvalidTokenError}\n     */\n    constructor(val) {\n        this.root = createToken(val, 0);\n    }\n    /**\n     * @description Returns the javascript object equivalent of the Micheline value provided\n     */\n    Execute(val, semantics) {\n        return this.root.Execute(val, semantics);\n    }\n    /**\n     * @description Returns a micheline formatted object for the values provided\n     * @throws {@link TokenValidationError}\n     * @throws {@link ParameterEncodingError}\n     */\n    Encode(...args) {\n        try {\n            return this.root.Encode(args.reverse());\n        }\n        catch (ex) {\n            if (ex instanceof TokenValidationError) {\n                throw ex;\n            }\n            throw new ParameterEncodingError('Unable to encode parameter', this.root, args, ex);\n        }\n    }\n    /**\n     * @description Returns a micheline formatted object for the javascript object provided\n     * @throws {@link TokenValidationError}\n     * @throws {@link ParameterEncodingError}\n     */\n    EncodeObject(value, semantics) {\n        try {\n            return this.root.EncodeObject(value, semantics);\n        }\n        catch (ex) {\n            if (ex instanceof TokenValidationError) {\n                throw ex;\n            }\n            throw new ParameterEncodingError('Unable to encode parameter object', this.root, value, ex);\n        }\n    }\n    /**\n     * @deprecated ExtractSchema has been deprecated in favor of generateSchema\n     *\n     */\n    ExtractSchema() {\n        return this.root.ExtractSchema();\n    }\n    /**\n     * @description Produce a schema grouping together all the entry points of a contract.\n     */\n    generateSchema() {\n        return this.root.generateSchema();\n    }\n    ExtractSignatures() {\n        return this.root.ExtractSignature();\n    }\n}\n\nclass ViewSchema {\n    /**\n     *\n     * @description Create an instance of ViewSchema for each view in a script\n     *\n     * @param val contract script obtained from the RPC\n     * @returns array of ViewSchema or empty array if there is no view in the contract\n     * @throws {@link InvalidScriptError}\n     */\n    static fromRPCResponse(val) {\n        const allViewSchema = [];\n        const views = val &&\n            val.script &&\n            Array.isArray(val.script.code) &&\n            val.script.code.filter((x) => x.prim === 'view');\n        if (views) {\n            views.forEach((view) => {\n                allViewSchema.push(new ViewSchema(view.args));\n            });\n        }\n        return allViewSchema;\n    }\n    /**\n     * @throws {@link InvalidScriptError}\n     */\n    constructor(viewArgs) {\n        if (!viewArgs) {\n            throw new InvalidScriptError(viewArgs, 'the args are not defined');\n        }\n        if (viewArgs.length !== 4) {\n            throw new InvalidScriptError(viewArgs, `there should be exactly 4 arguments`);\n        }\n        if (!('string' in viewArgs[0]) || !viewArgs[0]['string']) {\n            throw new InvalidScriptError(viewArgs, `The first argument should be a string, representing the view name. It should be in the form: { string: 'viewName' }`);\n        }\n        this.viewName = viewArgs[0]['string'];\n        this.viewArgsType = viewArgs[1];\n        this.viewReturnType = viewArgs[2];\n        this.instructions = viewArgs[3];\n        this.rootArgsType = createToken(this.viewArgsType, 0);\n        this.rootReturnType = createToken(this.viewReturnType, 0);\n    }\n    /**\n     *\n     * @description Transform the view parameter into Michelson\n     *\n     * @param args parameter of the view in js format\n     * @returns parameter of the view in Michelson\n     * @throws {@link ParameterEncodingError}\n     */\n    encodeViewArgs(args) {\n        try {\n            return this.rootArgsType.EncodeObject(args);\n        }\n        catch (ex) {\n            throw new ParameterEncodingError(this.viewName, undefined, args, ex);\n        }\n    }\n    /**\n     *\n     * @description Transform the view result from Michelson to readable data\n     *\n     * @param val result of the view in JSON Michelson\n     * @param semantics optional semantics to override the default decoding behavior\n     * @returns result of the view in a readable format\n     */\n    decodeViewResult(val, semantics) {\n        return this.rootReturnType.Execute(val, semantics);\n    }\n    /**\n     *\n     * @description Return the signature of the view parameter\n     */\n    extractArgsSchema() {\n        return this.rootArgsType.ExtractSchema();\n    }\n    /**\n     *\n     * @description Return the format of the view result\n     */\n    extractResultSchema() {\n        return this.rootReturnType.ExtractSchema();\n    }\n}\n\nclass EventSchema {\n    constructor(tag, type) {\n        this.tag = tag;\n        this.type = type;\n    }\n    static fromMichelineValue(val) {\n        var _a, _b;\n        return new EventSchema((_a = val.annots) === null || _a === void 0 ? void 0 : _a[0], (_b = val.args) === null || _b === void 0 ? void 0 : _b[0]);\n    }\n    static fromRPCResponse(val) {\n        const allEventSchema = [];\n        val.script.code.forEach((code) => {\n            if (!('prim' in code) ||\n                code.prim !== 'code' ||\n                !('args' in code) ||\n                !code.args) {\n                return;\n            }\n            allEventSchema.push(...EventSchema.extractEventsRecursively(code.args));\n        });\n        return EventSchema.removeDuplicates(allEventSchema);\n    }\n    static removeDuplicates(events) {\n        const uniqueEvents = [];\n        events.forEach((event) => {\n            const idx = uniqueEvents.findIndex((e) => e.tag === event.tag && deepEqual(e.type, event.type));\n            if (idx === -1) {\n                uniqueEvents.push(event);\n            }\n        });\n        return uniqueEvents;\n    }\n    static extractEventsRecursively(code) {\n        if (Array.isArray(code)) {\n            return code.flatMap((c) => EventSchema.extractEventsRecursively(c));\n        }\n        if (!('prim' in code)) {\n            return [];\n        }\n        if (code.prim === 'EMIT') {\n            return [EventSchema.fromMichelineValue(code)];\n        }\n        if (!('args' in code) || !code.args) {\n            return [];\n        }\n        return code.args.flatMap((c) => EventSchema.extractEventsRecursively(c));\n    }\n}\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n/**\n * @packageDocumentation\n * @module @taquito/michelson-encoder\n */\nconst UnitValue = Symbol();\nconst SaplingStateValue = {};\n\n\n//# sourceMappingURL=taquito-michelson-encoder.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/michelson-encoder/dist/taquito-michelson-encoder.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/rpc/dist/taquito-rpc.es6.js":
/*!***********************************************************!*\
  !*** ./node_modules/@taquito/rpc/dist/taquito-rpc.es6.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METADATA_BALANCE_UPDATES_CATEGORY: () => (/* binding */ METADATA_BALANCE_UPDATES_CATEGORY),\n/* harmony export */   OPERATION_METADATA: () => (/* binding */ OPERATION_METADATA),\n/* harmony export */   OpKind: () => (/* binding */ OpKind),\n/* harmony export */   PvmKind: () => (/* binding */ PvmKind),\n/* harmony export */   RpcClient: () => (/* binding */ RpcClient),\n/* harmony export */   RpcClientCache: () => (/* binding */ RpcClientCache),\n/* harmony export */   SmartRollupInputProofKind: () => (/* binding */ SmartRollupInputProofKind),\n/* harmony export */   SmartRollupRefutationOptions: () => (/* binding */ SmartRollupRefutationOptions),\n/* harmony export */   SmartRollupRefuteGameEndedPlayerOutcomes: () => (/* binding */ SmartRollupRefuteGameEndedPlayerOutcomes),\n/* harmony export */   SmartRollupRefuteGameEndedReason: () => (/* binding */ SmartRollupRefuteGameEndedReason),\n/* harmony export */   SmartRollupRefuteGameStatusOptions: () => (/* binding */ SmartRollupRefuteGameStatusOptions),\n/* harmony export */   SmartRollupRefuteRevealProofKind: () => (/* binding */ SmartRollupRefuteRevealProofKind),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   castToBigNumber: () => (/* binding */ castToBigNumber),\n/* harmony export */   defaultChain: () => (/* binding */ defaultChain),\n/* harmony export */   defaultRPCOptions: () => (/* binding */ defaultRPCOptions)\n/* harmony export */ });\n/* harmony import */ var _taquito_http_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @taquito/http-utils */ \"(ssr)/./node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _taquito_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @taquito/utils */ \"(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js\");\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nconst defaultChain = 'main';\nconst defaultRPCOptions = { block: 'head' };\nvar RPCMethodName;\n(function (RPCMethodName) {\n    RPCMethodName[\"GET_BAKING_RIGHTS\"] = \"getBakingRights\";\n    RPCMethodName[\"GET_BALLOTS\"] = \"getBallots\";\n    RPCMethodName[\"GET_BALLOT_LIST\"] = \"getBallotList\";\n    RPCMethodName[\"GET_BIG_MAP_KEY\"] = \"getBigMapKey\";\n    RPCMethodName[\"GET_BIG_MAP_EXPR\"] = \"getBigMapExpr\";\n    RPCMethodName[\"GET_BLOCK_HASH\"] = \"getBlockHash\";\n    RPCMethodName[\"GET_BLOCK\"] = \"getBlock\";\n    RPCMethodName[\"GET_BLOCK_HEADER\"] = \"getBlockHeader\";\n    RPCMethodName[\"GET_BLOCK_METADATA\"] = \"getBlockMetadata\";\n    RPCMethodName[\"GET_BALANCE\"] = \"getBalance\";\n    RPCMethodName[\"GET_CHAIN_ID\"] = \"getChainId\";\n    RPCMethodName[\"GET_CONSTANTS\"] = \"getConstants\";\n    RPCMethodName[\"GET_CONTRACT\"] = \"getContract\";\n    RPCMethodName[\"GET_CURRENT_PERIOD\"] = \"getCurrentPeriod\";\n    RPCMethodName[\"GET_CURRENT_PROPOSAL\"] = \"getCurrentProposal\";\n    RPCMethodName[\"GET_CURRENT_QUORUM\"] = \"getCurrentQuorum\";\n    RPCMethodName[\"GET_DELEGATE\"] = \"getDelegate\";\n    RPCMethodName[\"GET_DELEGATES\"] = \"getDelegates\";\n    RPCMethodName[\"GET_VOTING_INFO\"] = \"getVotingInfo\";\n    RPCMethodName[\"GET_ENDORSING_RIGHTS\"] = \"getEndorsingRights\";\n    RPCMethodName[\"GET_ENTRYPOINTS\"] = \"getEntrypoints\";\n    RPCMethodName[\"GET_LIVE_BLOCKS\"] = \"getLiveBlocks\";\n    RPCMethodName[\"GET_MANAGER_KEY\"] = \"getManagerKey\";\n    RPCMethodName[\"GET_NORMALIZED_SCRIPT\"] = \"getNormalizedScript\";\n    RPCMethodName[\"GET_PROPOSALS\"] = \"getProposals\";\n    RPCMethodName[\"GET_PROTOCOLS\"] = \"getProtocols\";\n    RPCMethodName[\"GET_SAPLING_DIFF_BY_CONTRACT\"] = \"getSaplingDiffByContract\";\n    RPCMethodName[\"GET_SAPLING_DIFF_BY_ID\"] = \"getSaplingDiffById\";\n    RPCMethodName[\"GET_SCRIPT\"] = \"getScript\";\n    RPCMethodName[\"GET_STORAGE\"] = \"getStorage\";\n    RPCMethodName[\"GET_SUCCESSOR_PERIOD\"] = \"getSuccessorPeriod\";\n    RPCMethodName[\"GET_TX_ROLLUP_INBOX\"] = \"getTxRollupInbox\";\n    RPCMethodName[\"GET_TX_ROLLUP_STATE\"] = \"getTxRollupState\";\n    RPCMethodName[\"GET_VOTES_LISTINGS\"] = \"getVotesListings\";\n    RPCMethodName[\"PACK_DATA\"] = \"packData\";\n    RPCMethodName[\"GET_STORAGE_USED_SPACE\"] = \"getStorageUsedSpace\";\n    RPCMethodName[\"GET_STORAGE_PAID_SPACE\"] = \"getStoragePaidSpace\";\n    RPCMethodName[\"GET_TICKET_BALANCE\"] = \"getTicketBalance\";\n    RPCMethodName[\"GET_ALL_TICKET_BALANCES\"] = \"getAllTicketBalances\";\n    RPCMethodName[\"GET_PENDING_OPERATIONS\"] = \"getPendingOperations\";\n    RPCMethodName[\"GET_ORIGINATION_PROOF\"] = \"getOriginationProof\";\n})(RPCMethodName || (RPCMethodName = {}));\n\n/**\n * Casts object/array items to BigNumber\n * @param data input object or array\n * @param keys keys for processing or all items if not defined\n *\n */\nfunction castToBigNumber(data, keys) {\n    const returnArray = Array.isArray(data);\n    if (typeof keys === 'undefined') {\n        keys = Object.keys(data);\n    }\n    const response = returnArray ? [] : {};\n    keys.forEach((key) => {\n        const item = data[key];\n        let res;\n        if (typeof item === 'undefined') {\n            return;\n        }\n        if (Array.isArray(item)) {\n            res = castToBigNumber(item);\n            response[key] = res;\n            return;\n        }\n        res = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](item);\n        response[key] = res;\n    });\n    return response;\n}\n\nconst defaultTtl = 1000;\n/***\n * @description RpcClientCache acts as a decorator over the RpcClient instance by caching responses for the period defined by the ttl.\n */\nclass RpcClientCache {\n    /**\n     *\n     * @param rpcClient rpcClient responsible of the interaction with Tezos network through an rpc node\n     * @param ttl number representing the time to live (default 1000 milliseconds)\n     *\n     * @example new RpcClientCache(new RpcClient('https://mainnet.ecadinfra.com/'))\n     */\n    constructor(rpcClient, ttl = defaultTtl) {\n        this.rpcClient = rpcClient;\n        this.ttl = ttl;\n        this._cache = {};\n    }\n    getAllCachedData() {\n        return this._cache;\n    }\n    /**\n     * @description Remove all the data in the cache.\n     *\n     */\n    deleteAllCachedData() {\n        for (const key in this._cache) {\n            delete this._cache[key];\n        }\n    }\n    formatCacheKey(rpcUrl, rpcMethodName, rpcMethodParams, rpcMethodData) {\n        let paramsToString = '';\n        rpcMethodParams.forEach((param) => {\n            paramsToString =\n                typeof param === 'object'\n                    ? paramsToString + JSON.stringify(param) + '/'\n                    : paramsToString + param + '/';\n        });\n        return rpcMethodData\n            ? `${rpcUrl}/${rpcMethodName}/${paramsToString}${JSON.stringify(rpcMethodData)}/`\n            : `${rpcUrl}/${rpcMethodName}/${paramsToString}`;\n    }\n    has(key) {\n        return key in this._cache;\n    }\n    get(key) {\n        return this._cache[key].response;\n    }\n    put(key, response) {\n        const handle = setTimeout(() => {\n            return this.remove(key);\n        }, this.ttl);\n        Object.assign(this._cache, { [key]: { handle, response } });\n    }\n    remove(key) {\n        if (key in this._cache) {\n            delete this._cache[key];\n        }\n    }\n    validateAddress(address) {\n        const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.validateAddress)(address);\n        if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_2__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_3__.InvalidAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.invalidDetail)(addressValidation));\n        }\n    }\n    validateContract(address) {\n        const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.validateContractAddress)(address);\n        if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_2__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_3__.InvalidContractAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.invalidDetail)(addressValidation));\n        }\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Get the block's hash, its unique identifier.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-hash\n     */\n    getBlockHash({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_HASH, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBlockHash({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-live-blocks\n     */\n    getLiveBlocks({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_LIVE_BLOCKS, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getLiveBlocks({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address address from which we want to retrieve the balance\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the balance of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-balance\n     */\n    getBalance(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALANCE, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBalance(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the storage\n     * @param options contains generic configuration for rpc calls\n     * @throws {@link InvalidContractAddressError}\n     * @description Access the data of the contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStorage(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_STORAGE, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getStorage(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the script\n     * @param options contains generic configuration for rpc calls\n     * @throws {@link InvalidContractAddressError}\n     * @description Access the code and data of the contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n     */\n    getScript(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_SCRIPT, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getScript(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the script\n     * @param unparsingMode default is { unparsing_mode: \"Readable\" }\n     * @param options contains generic configuration for rpc calls\n     * @throws {@link InvalidContractAddressError}\n     * @description Access the script of the contract and normalize it using the requested unparsing mode.\n     *\n     */\n    getNormalizedScript(address, unparsingMode = { unparsing_mode: 'Readable' }, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_NORMALIZED_SCRIPT, [block, address], unparsingMode);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getNormalizedScript(address, unparsingMode, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the complete status of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id\n     */\n    getContract(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CONTRACT, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getContract(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the manager\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the manager key of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-manager-key\n     */\n    getManagerKey(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_MANAGER_KEY, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getManagerKey(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the delegate (baker)\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the delegate of a contract, if any.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-delegate\n     */\n    getDelegate(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_DELEGATE, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getDelegate(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the big map key\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a key in the big map storage of the contract.\n     *\n     * @deprecated Deprecated in favor of getBigMapKeyByID\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n     */\n    getBigMapKey(address, key, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const keyUrl = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BIG_MAP_KEY, [block, address], key);\n            if (this.has(keyUrl)) {\n                return this.get(keyUrl);\n            }\n            else {\n                const response = this.rpcClient.getBigMapKey(address, key, { block });\n                this.put(keyUrl, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param id Big Map ID\n     * @param expr Expression hash to query (A b58check encoded Blake2b hash of the expression (The expression can be packed using the pack_data method))\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a key in a big map.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n     */\n    getBigMapExpr(id, expr, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BIG_MAP_EXPR, [\n                block,\n                id,\n                expr,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBigMapExpr(id, expr, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address delegate address which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Fetches information about a delegate from RPC.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh\n     */\n    getDelegates(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_DELEGATES, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getDelegates(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param address delegate address which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Returns the delegate info (e.g. voting power) found in the listings of the current voting period.\n     *\n     * @see https://tezos.gitlab.io/kathmandu/rpc.html#get-block-id-context-delegates-pkh-voting-info\n     */\n    getVotingInfo(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_VOTING_INFO, [\n                block,\n                address,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getVotingInfo(address, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description All constants\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-constants\n     */\n    getConstants({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CONSTANTS, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getConstants({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls. See examples for various available sytaxes.\n     *\n     * @description All the information about a block\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id\n     * @example getBlock() will default to /main/chains/block/head.\n     * @example getBlock({ block: head~2 }) will return an offset of 2 blocks.\n     * @example getBlock({ block: BL8fTiWcSxWCjiMVnDkbh6EuhqVPZzgWheJ2dqwrxYRm9AephXh~2 }) will return an offset of 2 blocks from given block hash..\n     */\n    getBlock({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK, [block]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBlock({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description The whole block header\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-header\n     */\n    getBlockHeader({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_HEADER, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBlockHeader({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description All the metadata associated to the block\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata\n     */\n    getBlockMetadata({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BLOCK_METADATA, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBlockMetadata({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param args contains optional query arguments\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Retrieves the list of delegates allowed to bake a block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-baking-rights\n     */\n    getBakingRights(args = {}, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BAKING_RIGHTS, [\n                block,\n                args,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBakingRights(args, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param args contains optional query arguments\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Retrieves the list of delegates allowed to bake a block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-endorsing-rights\n     */\n    getEndorsingRights(args = {}, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_ENDORSING_RIGHTS, [block, args]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getEndorsingRights(args, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Ballots casted so far during a voting period\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballot-list\n     */\n    getBallotList({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALLOT_LIST, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBallotList({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Sum of ballots casted so far during a voting period.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballots\n     */\n    getBallots({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_BALLOTS, [block]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getBallots({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Current proposal under evaluation.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-proposal\n     */\n    getCurrentProposal({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CURRENT_PROPOSAL, [block]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getCurrentProposal({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Current expected quorum.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-quorum\n     */\n    getCurrentQuorum({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CURRENT_QUORUM, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getCurrentQuorum({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List of delegates with their voting weight, in number of rolls.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-listings\n     */\n    getVotesListings({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_VOTES_LISTINGS, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getVotesListings({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List of proposals with number of supporters.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-proposals\n     */\n    getProposals({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_PROPOSALS, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getProposals({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param data operation contents to forge\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Forge an operation returning the unsigned bytes\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-forge-operations\n     */\n    forgeOperations(data, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.forgeOperations(data, { block });\n        });\n    }\n    /**\n     *\n     * @param signedOpBytes signed bytes to inject\n     *\n     * @description Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-injection-operation\n     */\n    injectOperation(signedOpBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.injectOperation(signedOpBytes);\n        });\n    }\n    /**\n     *\n     * @param ops Operations to apply\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate the validation of an operation\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-preapply-operations\n     */\n    preapplyOperations(ops, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.preapplyOperations(ops, { block });\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to get the entrypoints of\n     *\n     * @description Return the list of entrypoints of the contract\n     * @throws {@link InvalidContractAddressError}\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-entrypoints\n     *\n     * @version 005_PsBABY5H\n     */\n    getEntrypoints(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(contract);\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_ENTRYPOINTS, [\n                block,\n                contract,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getEntrypoints(contract, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     * @param op Operation to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Run an operation without signature checks\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-operation\n     */\n    runOperation(op, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.runOperation(op, { block });\n        });\n    }\n    /**\n     * @param op Operation to simulate\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate an operation\n     *\n     * @see https://gitlab.com/tezos/tezos/-/blob/master/docs/api/nairobi-openapi.json\n     */\n    simulateOperation(op, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.simulateOperation(op, { block });\n        });\n    }\n    /**\n     * @param code Code to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Run a piece of code in the current context\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-code\n     */\n    runCode(code, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.runCode(code, { block });\n        });\n    }\n    /**\n     * @param viewScriptParams Parameters of the script view to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate a call to a michelson view\n     *\n     */\n    runScriptView(_a, _b) {\n        var { unparsing_mode = 'Readable' } = _a, rest = __rest(_a, [\"unparsing_mode\"]);\n        var _c = _b === void 0 ? defaultRPCOptions : _b, block = _c.block;\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.runScriptView(Object.assign({ unparsing_mode }, rest), { block });\n        });\n    }\n    /**\n     * @param viewParams Parameters of the view to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.\n     *\n     */\n    runView(_a, _b) {\n        var { unparsing_mode = 'Readable' } = _a, rest = __rest(_a, [\"unparsing_mode\"]);\n        var _c = _b === void 0 ? defaultRPCOptions : _b, block = _c.block;\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpcClient.runView(Object.assign({ unparsing_mode }, rest), { block });\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CHAIN_ID, []);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getChainId();\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param data Data to pack\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Computes the serialized version of a data expression using the same algorithm as script instruction PACK\n     *\n     * @example packData({ data: { string: \"test\" }, type: { prim: \"string\" } })\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-pack-data\n     */\n    packData(data, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.PACK_DATA, [block], data);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.packData(data, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @description Return rpc root url\n     */\n    getRpcUrl() {\n        return this.rpcClient.getRpcUrl();\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Voting period of current block.\n     *\n     * @example getCurrentPeriod() will default to current voting period for /main/chains/block/head.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-period\n     */\n    getCurrentPeriod({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_CURRENT_PERIOD, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getCurrentPeriod({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Voting period of next block.\n     *\n     * @example getSuccessorPeriod() will default to successor voting period for /main/chains/block/head.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-successor-period\n     */\n    getSuccessorPeriod({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_SUCCESSOR_PERIOD, [block]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getSuccessorPeriod({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param id Sapling state ID\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a sapling state ID.\n     *\n     * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-sapling-sapling-state-id-get-diff\n     */\n    getSaplingDiffById(id, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_SAPLING_DIFF_BY_ID, [block, id]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getSaplingDiffById(id, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to get the sapling diff\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a sapling state.\n     *\n     * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-contracts-contract-id-single-sapling-get-diff\n     */\n    getSaplingDiffByContract(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_SAPLING_DIFF_BY_CONTRACT, [block, contract]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getSaplingDiffByContract(contract, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    getProtocols({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_PROTOCOLS, [\n                block,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getProtocols({ block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    getTxRollupState(txRollupId, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_TX_ROLLUP_STATE, [\n                block,\n                txRollupId,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getTxRollupState(txRollupId, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    getTxRollupInbox(txRollupId, blockLevel, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_TX_ROLLUP_INBOX, [\n                block,\n                txRollupId,\n                blockLevel,\n            ]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getTxRollupInbox(txRollupId, blockLevel, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to retrieve storage information of\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the amount of used space used in a contract's storage\n     *\n     * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStorageUsedSpace(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_STORAGE_USED_SPACE, [block, contract]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getStorageUsedSpace(contract, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to retrieve storage information of\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the amount of paid space in a contract's storage\n     *\n     * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStoragePaidSpace(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_STORAGE_PAID_SPACE, [block, contract]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getStoragePaidSpace(contract, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to retrieve ticket balance of\n     * @param ticket Ticket token parameter object that contains ticketer, content type, and content\n     * @param options contains generic configuration for rpc calls\n     * @description Access the contract's balance of ticket with specified ticketer, content type, and content.\n     * @example ticket{ ticketer: 'address', content_type: { prim: \"string\" }, content: { string: 'ticket1' } }\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getTicketBalance(contract, ticket, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_TICKET_BALANCE, [block, contract], ticket);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getTicketBalance(contract, ticket, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract to retrieve all ticket balances from\n     * @param options contains generic configuration for rpc calls\n     * @description Access the complete list of tickets owned by the given contract by scanning the contract's storage.\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getAllTicketBalances(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_ALL_TICKET_BALANCES, [block, contract]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getAllTicketBalances(contract, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     * @description List the prevalidated operations in mempool (accessibility of mempool depends on each rpc endpoint)\n     * @param args has 5 optional properties. We support version 1 with new encoding as version 0 will be deprecated soon. The rest of the properties is to filter pending operations response\n     * @default args { version: '1', applied: true, refused: true, outdated, true, branchRefused: true, branchDelayed: true, validationPass: undefined }\n     * @see https://tezos.gitlab.io/CHANGES.html?highlight=pending_operations#id4\n     */\n    getPendingOperations(args = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_PENDING_OPERATIONS, [args]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getPendingOperations(args);\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n    /**\n     *\n     * @param params contains the PVM kind and kernel to generate the origination proof from\n     * @description rpc call to generate the origination proof needed for the smart rollup originate operation\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getOriginationProof(params, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const key = this.formatCacheKey(this.rpcClient.getRpcUrl(), RPCMethodName.GET_ORIGINATION_PROOF, [block, params]);\n            if (this.has(key)) {\n                return this.get(key);\n            }\n            else {\n                const response = this.rpcClient.getOriginationProof(params, { block });\n                this.put(key, response);\n                return response;\n            }\n        });\n    }\n}\n\nvar OPERATION_METADATA;\n(function (OPERATION_METADATA) {\n    OPERATION_METADATA[\"TOO_LARGE\"] = \"too large\";\n})(OPERATION_METADATA || (OPERATION_METADATA = {}));\nvar METADATA_BALANCE_UPDATES_CATEGORY;\n(function (METADATA_BALANCE_UPDATES_CATEGORY) {\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BAKING_REWARDS\"] = \"baking rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"REWARDS\"] = \"rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"FEES\"] = \"fees\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"DEPOSITS\"] = \"deposits\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"LEGACY_REWARDS\"] = \"legacy_rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"LEGACY_FEES\"] = \"legacy_fees\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"LEGACY_DEPOSITS\"] = \"legacy_deposits\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BLOCK_FEES\"] = \"block fees\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"NONCE_REVELATION_REWARDS\"] = \"nonce revelation rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"DOUBLE_SIGNING_EVIDENCE_REWARDS\"] = \"double signing evidence rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"ENDORSING_REWARDS\"] = \"endorsing rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BAKING_BONUSES\"] = \"baking bonuses\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"STORAGE_FEES\"] = \"storage fees\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"PUNISHMENTS\"] = \"punishments\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"LOST_ENDORSING_REWARDS\"] = \"lost endorsing rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"SUBSIDY\"] = \"subsidy\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BURNED\"] = \"burned\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"COMMITMENT\"] = \"commitment\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BOOTSTRAP\"] = \"bootstrap\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"INVOICE\"] = \"invoice\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"MINTED\"] = \"minted\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"TX_ROLLUP_REJECTION_REWARDS\"] = \"tx_rollup_rejection_rewards\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"TX_ROLLUP_REJECTION_PUNISHMENTS\"] = \"tx_rollup_rejection_punishments\";\n    METADATA_BALANCE_UPDATES_CATEGORY[\"BONDS\"] = \"bonds\";\n})(METADATA_BALANCE_UPDATES_CATEGORY || (METADATA_BALANCE_UPDATES_CATEGORY = {}));\nvar PvmKind;\n(function (PvmKind) {\n    PvmKind[\"WASM2\"] = \"wasm_2_0_0\";\n    PvmKind[\"ARITH\"] = \"arith\";\n})(PvmKind || (PvmKind = {}));\nvar SmartRollupRefutationOptions;\n(function (SmartRollupRefutationOptions) {\n    SmartRollupRefutationOptions[\"START\"] = \"start\";\n    SmartRollupRefutationOptions[\"MOVE\"] = \"move\";\n})(SmartRollupRefutationOptions || (SmartRollupRefutationOptions = {}));\nvar SmartRollupInputProofKind;\n(function (SmartRollupInputProofKind) {\n    SmartRollupInputProofKind[\"INBOX_PROOF\"] = \"inbox_proof\";\n    SmartRollupInputProofKind[\"REVEAL_PROOF\"] = \"reveal_proof\";\n    SmartRollupInputProofKind[\"FIRST_INPUT\"] = \"first_input\";\n})(SmartRollupInputProofKind || (SmartRollupInputProofKind = {}));\nvar SmartRollupRefuteRevealProofKind;\n(function (SmartRollupRefuteRevealProofKind) {\n    SmartRollupRefuteRevealProofKind[\"RAW_DATA_PROOF\"] = \"raw_data_proof\";\n    SmartRollupRefuteRevealProofKind[\"METADATA_PROOF\"] = \"metadata_proof\";\n    SmartRollupRefuteRevealProofKind[\"DAL_PAGE_PROOF\"] = \"dal_page_proof\";\n})(SmartRollupRefuteRevealProofKind || (SmartRollupRefuteRevealProofKind = {}));\nvar SmartRollupRefuteGameStatusOptions;\n(function (SmartRollupRefuteGameStatusOptions) {\n    SmartRollupRefuteGameStatusOptions[\"ONGOING\"] = \"ongoing\";\n    SmartRollupRefuteGameStatusOptions[\"ENDED\"] = \"ended\";\n})(SmartRollupRefuteGameStatusOptions || (SmartRollupRefuteGameStatusOptions = {}));\nvar SmartRollupRefuteGameEndedPlayerOutcomes;\n(function (SmartRollupRefuteGameEndedPlayerOutcomes) {\n    SmartRollupRefuteGameEndedPlayerOutcomes[\"LOSER\"] = \"loser\";\n    SmartRollupRefuteGameEndedPlayerOutcomes[\"DRAW\"] = \"draw\";\n})(SmartRollupRefuteGameEndedPlayerOutcomes || (SmartRollupRefuteGameEndedPlayerOutcomes = {}));\nvar SmartRollupRefuteGameEndedReason;\n(function (SmartRollupRefuteGameEndedReason) {\n    SmartRollupRefuteGameEndedReason[\"CONFLICT_RESOLVED\"] = \"conflict_resolved\";\n    SmartRollupRefuteGameEndedReason[\"TIMEOUT\"] = \"timeout\";\n})(SmartRollupRefuteGameEndedReason || (SmartRollupRefuteGameEndedReason = {}));\n\nvar OpKind;\n(function (OpKind) {\n    OpKind[\"ORIGINATION\"] = \"origination\";\n    OpKind[\"DELEGATION\"] = \"delegation\";\n    OpKind[\"REVEAL\"] = \"reveal\";\n    OpKind[\"TRANSACTION\"] = \"transaction\";\n    OpKind[\"ACTIVATION\"] = \"activate_account\";\n    OpKind[\"ENDORSEMENT\"] = \"endorsement\";\n    OpKind[\"PREENDORSEMENT\"] = \"preendorsement\";\n    OpKind[\"SET_DEPOSITS_LIMIT\"] = \"set_deposits_limit\";\n    OpKind[\"DOUBLE_PREENDORSEMENT_EVIDENCE\"] = \"double_preendorsement_evidence\";\n    OpKind[\"ENDORSEMENT_WITH_SLOT\"] = \"endorsement_with_slot\";\n    OpKind[\"SEED_NONCE_REVELATION\"] = \"seed_nonce_revelation\";\n    OpKind[\"DOUBLE_ENDORSEMENT_EVIDENCE\"] = \"double_endorsement_evidence\";\n    OpKind[\"DOUBLE_BAKING_EVIDENCE\"] = \"double_baking_evidence\";\n    OpKind[\"PROPOSALS\"] = \"proposals\";\n    OpKind[\"BALLOT\"] = \"ballot\";\n    OpKind[\"FAILING_NOOP\"] = \"failing_noop\";\n    OpKind[\"REGISTER_GLOBAL_CONSTANT\"] = \"register_global_constant\";\n    OpKind[\"TX_ROLLUP_ORIGINATION\"] = \"tx_rollup_origination\";\n    OpKind[\"TX_ROLLUP_SUBMIT_BATCH\"] = \"tx_rollup_submit_batch\";\n    OpKind[\"TX_ROLLUP_COMMIT\"] = \"tx_rollup_commit\";\n    OpKind[\"TX_ROLLUP_RETURN_BOND\"] = \"tx_rollup_return_bond\";\n    OpKind[\"TX_ROLLUP_FINALIZE_COMMITMENT\"] = \"tx_rollup_finalize_commitment\";\n    OpKind[\"TX_ROLLUP_REMOVE_COMMITMENT\"] = \"tx_rollup_remove_commitment\";\n    OpKind[\"TX_ROLLUP_REJECTION\"] = \"tx_rollup_rejection\";\n    OpKind[\"TX_ROLLUP_DISPATCH_TICKETS\"] = \"tx_rollup_dispatch_tickets\";\n    OpKind[\"TRANSFER_TICKET\"] = \"transfer_ticket\";\n    OpKind[\"INCREASE_PAID_STORAGE\"] = \"increase_paid_storage\";\n    OpKind[\"UPDATE_CONSENSUS_KEY\"] = \"update_consensus_key\";\n    OpKind[\"DRAIN_DELEGATE\"] = \"drain_delegate\";\n    OpKind[\"VDF_REVELATION\"] = \"vdf_revelation\";\n    OpKind[\"EVENT\"] = \"event\";\n    OpKind[\"TICKET_UPDATES\"] = \"ticket_updates\";\n    OpKind[\"SMART_ROLLUP_ORIGINATE\"] = \"smart_rollup_originate\";\n    OpKind[\"SMART_ROLLUP_ADD_MESSAGES\"] = \"smart_rollup_add_messages\";\n    OpKind[\"SMART_ROLLUP_EXECUTE_OUTBOX_MESSAGE\"] = \"smart_rollup_execute_outbox_message\";\n    OpKind[\"SMART_ROLLUP_PUBLISH\"] = \"smart_rollup_publish\";\n    OpKind[\"SMART_ROLLUP_CEMENT\"] = \"smart_rollup_cement\";\n    OpKind[\"SMART_ROLLUP_RECOVER_BOND\"] = \"smart_rollup_recover_bond\";\n    OpKind[\"SMART_ROLLUP_REFUTE\"] = \"smart_rollup_refute\";\n    OpKind[\"SMART_ROLLUP_TIMEOUT\"] = \"smart_rollup_timeout\";\n})(OpKind || (OpKind = {}));\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n/***\n * @description RpcClient allows interaction with Tezos network through an rpc node\n */\nclass RpcClient {\n    /**\n     *\n     * @param url rpc root url\n     * @param chain chain (default main)\n     * @param httpBackend Http backend that issue http request.\n     * You can override it by providing your own if you which to hook in the request/response\n     *\n     * @example new RpcClient('https://mainnet.ecadinfra.com/', 'main') this will use https://mainnet.ecadinfra.com//chains/main\n     */\n    constructor(url, chain = defaultChain, httpBackend = new _taquito_http_utils__WEBPACK_IMPORTED_MODULE_0__.HttpBackend()) {\n        this.url = url;\n        this.chain = chain;\n        this.httpBackend = httpBackend;\n    }\n    createURL(path) {\n        // Trim trailing slashes because it is assumed to be included in path\n        // the regex solution is prone to ReDoS. Please see: https://stackoverflow.com/questions/6680825/return-string-without-trailing-slash#comment124306698_6680877\n        // We also got a CodeQL error for the regex based solution\n        let rootUrl = this.url;\n        while (rootUrl.endsWith('/')) {\n            rootUrl = rootUrl.slice(0, -1);\n        }\n        return `${rootUrl}${path}`;\n    }\n    validateAddress(address) {\n        const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.validateAddress)(address);\n        if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_2__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_3__.InvalidAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.invalidDetail)(addressValidation));\n        }\n    }\n    validateContract(address) {\n        const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.validateContractAddress)(address);\n        if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_2__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_3__.InvalidContractAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_2__.invalidDetail)(addressValidation));\n        }\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Get the block's hash, its unique identifier.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-hash\n     */\n    getBlockHash({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const hash = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/hash`),\n                method: 'GET',\n            });\n            return hash;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-live-blocks\n     */\n    getLiveBlocks({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const blocks = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/live_blocks`),\n                method: 'GET',\n            });\n            return blocks;\n        });\n    }\n    /**\n     *\n     * @param address address from which we want to retrieve the balance\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the balance of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-balance\n     */\n    getBalance(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const balance = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/balance`),\n                method: 'GET',\n            });\n            return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](balance);\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the storage\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the data of the contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStorage(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/storage`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the script\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the code and data of the contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n     */\n    getScript(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the script\n     * @param unparsingMode default is { unparsing_mode: \"Readable\" }\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the script of the contract and normalize it using the requested unparsing mode.\n     *\n     */\n    getNormalizedScript(address, unparsingMode = { unparsing_mode: 'Readable' }, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(address);\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/script/normalized`),\n                method: 'POST',\n            }, unparsingMode);\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the complete status of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id\n     */\n    getContract(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const contractResponse = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}`),\n                method: 'GET',\n            });\n            return Object.assign(Object.assign({}, contractResponse), { balance: new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](contractResponse.balance) });\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the manager\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the manager key of a contract.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-manager-key\n     */\n    getManagerKey(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/manager_key`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the delegate (baker)\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the delegate of a contract, if any.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-delegate\n     */\n    getDelegate(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            let delegate;\n            try {\n                delegate = yield this.httpBackend.createRequest({\n                    url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/delegate`),\n                    method: 'GET',\n                });\n            }\n            catch (ex) {\n                if (ex instanceof _taquito_http_utils__WEBPACK_IMPORTED_MODULE_0__.HttpResponseError && ex.status === _taquito_http_utils__WEBPACK_IMPORTED_MODULE_0__.STATUS_CODE.NOT_FOUND) {\n                    delegate = null;\n                }\n                else {\n                    throw ex;\n                }\n            }\n            return delegate;\n        });\n    }\n    /**\n     *\n     * @param address contract address from which we want to retrieve the big map key\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a key in the big map storage of the contract.\n     *\n     * @deprecated Deprecated in favor of getBigMapKeyByID\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n     */\n    getBigMapKey(address, key, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${address}/big_map_get`),\n                method: 'POST',\n            }, key);\n        });\n    }\n    /**\n     *\n     * @param id Big Map ID\n     * @param expr Expression hash to query (A b58check encoded Blake2b hash of the expression (The expression can be packed using the pack_data method))\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a key in a big map.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n     */\n    getBigMapExpr(id, expr, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/big_maps/${id}/${expr}`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param address delegate address which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Fetches information about a delegate from RPC.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-delegates-pkh\n     */\n    getDelegates(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/delegates/${address}`),\n                method: 'GET',\n            });\n            const castedResponse = castToBigNumber(response, [\n                'balance',\n                'full_balance',\n                'current_frozen_deposits',\n                'frozen_deposits',\n                'frozen_balance',\n                'frozen_deposits_limit',\n                'staking_balance',\n                'delegated_balance',\n                'voting_power',\n            ]);\n            return Object.assign(Object.assign(Object.assign({}, response), castedResponse), { frozen_balance_by_cycle: response.frozen_balance_by_cycle\n                    ? response.frozen_balance_by_cycle.map((_a) => {\n                        var { deposit, deposits, fees, rewards } = _a, rest = __rest(_a, [\"deposit\", \"deposits\", \"fees\", \"rewards\"]);\n                        const castedToBigNumber = castToBigNumber({ deposit, deposits, fees, rewards }, [\n                            'deposit',\n                            'deposits',\n                            'fees',\n                            'rewards',\n                        ]);\n                        return Object.assign(Object.assign({}, rest), { deposit: castedToBigNumber.deposit, deposits: castedToBigNumber.deposits, fees: castedToBigNumber.fees, rewards: castedToBigNumber.rewards });\n                    })\n                    : undefined });\n        });\n    }\n    /**\n     *\n     * @param address delegate address which we want to retrieve\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Returns the delegate info (e.g. voting power) found in the listings of the current voting period.\n     *\n     * @see https://tezos.gitlab.io/kathmandu/rpc.html#get-block-id-context-delegates-pkh-voting-info\n     */\n    getVotingInfo(address, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateAddress(address);\n            return yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/delegates/${address}/voting_info`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description All constants\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-constants\n     */\n    getConstants({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/constants`),\n                method: 'GET',\n            });\n            const castedResponse = castToBigNumber(response, [\n                'time_between_blocks',\n                'hard_gas_limit_per_operation',\n                'hard_gas_limit_per_block',\n                'proof_of_work_threshold',\n                'tokens_per_roll',\n                'seed_nonce_revelation_tip',\n                'block_security_deposit',\n                'endorsement_security_deposit',\n                'block_reward',\n                'endorsement_reward',\n                'cost_per_byte',\n                'hard_storage_limit_per_operation',\n                'test_chain_duration',\n                'baking_reward_per_endorsement',\n                'delay_per_missing_endorsement',\n                'minimal_block_delay',\n                'liquidity_baking_subsidy',\n                'cache_layout',\n                'baking_reward_fixed_portion',\n                'baking_reward_bonus_per_slot',\n                'endorsing_reward_per_slot',\n                'double_baking_punishment',\n                'delay_increment_per_round',\n                'tx_rollup_commitment_bond',\n                'vdf_difficulty',\n                'sc_rollup_stake_amount',\n                'minimal_stake',\n            ]);\n            return Object.assign(Object.assign({}, response), castedResponse);\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls. See examples for various available syntaxes.\n     *\n     * @description All the information about a block\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id\n     * @example getBlock() will default to /main/chains/block/head.\n     * @example getBlock({ block: head~2 }) will return an offset of 2 blocks.\n     * @example getBlock({ block: BL8fTiWcSxWCjiMVnDkbh6EuhqVPZzgWheJ2dqwrxYRm9AephXh~2 }) will return an offset of 2 blocks from given block hash..\n     */\n    getBlock({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description The whole block header\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-header\n     */\n    getBlockHeader({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/header`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description All the metadata associated to the block\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-metadata\n     */\n    getBlockMetadata({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/metadata`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param args contains optional query arguments\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Retrieves the list of delegates allowed to bake a block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-baking-rights\n     */\n    getBakingRights(args = {}, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/baking_rights`),\n                method: 'GET',\n                query: args,\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param args contains optional query arguments\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Retrieves the list of delegates allowed to bake a block.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-helpers-endorsing-rights\n     */\n    getEndorsingRights(args = {}, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/endorsing_rights`),\n                method: 'GET',\n                query: args,\n            });\n            return response;\n        });\n    }\n    /**\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Ballots casted so far during a voting period\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballot-list\n     */\n    getBallotList({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballot_list`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Sum of ballots casted so far during a voting period.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-ballots\n     */\n    getBallots({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/ballots`),\n                method: 'GET',\n            });\n            const casted = castToBigNumber(response, ['yay', 'nay', 'pass']);\n            return casted;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Current proposal under evaluation.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-proposal\n     */\n    getCurrentProposal({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_proposal`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Current expected quorum.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-quorum\n     */\n    getCurrentQuorum({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_quorum`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List of delegates with their voting weight, in number of rolls.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-listings\n     */\n    getVotesListings({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/listings`),\n                method: 'GET',\n            });\n            response.map((item) => {\n                if (item.voting_power) {\n                    item.voting_power = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](item.voting_power);\n                }\n                return item;\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description List of proposals with number of supporters.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-proposals\n     */\n    getProposals({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/proposals`),\n                method: 'GET',\n            });\n            response.map((item) => {\n                return (item[1] = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](item[1]));\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param data operation contents to forge\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Forge an operation returning the unsigned bytes\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-forge-operations\n     */\n    forgeOperations(data, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/forge/operations`),\n                method: 'POST',\n            }, data);\n        });\n    }\n    /**\n     *\n     * @param signedOpBytes signed bytes to inject\n     *\n     * @description Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-injection-operation\n     */\n    injectOperation(signedOpBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/injection/operation`),\n                method: 'POST',\n            }, signedOpBytes);\n        });\n    }\n    /**\n     *\n     * @param ops Operations to apply\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate the validation of an operation\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-preapply-operations\n     */\n    preapplyOperations(ops, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/preapply/operations`),\n                method: 'POST',\n            }, ops);\n            return response;\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to get the entrypoints of\n     *\n     * @description Return the list of entrypoints of the contract\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-entrypoints\n     *\n     * @version 005_PsBABY5H\n     */\n    getEntrypoints(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.validateContract(contract);\n            const contractResponse = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/entrypoints`),\n                method: 'GET',\n            });\n            return contractResponse;\n        });\n    }\n    /**\n     * @param op Operation to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Run an operation without signature checks\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-operation\n     */\n    runOperation(op, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_operation`),\n                method: 'POST',\n            }, op);\n            return response;\n        });\n    }\n    /**\n     * @param op Operation to simulate\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate an operation on the blockchain\n     *\n     * @see https://gitlab.com/tezos/tezos/-/blob/master/docs/api/nairobi-openapi.json\n     */\n    simulateOperation(op, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/simulate_operation`),\n                method: 'POST',\n            }, op);\n            return response;\n        });\n    }\n    /**\n     * @param code Code to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Run a piece of code in the current context\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-run-code\n     */\n    runCode(code, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_code`),\n                method: 'POST',\n            }, code);\n            return response;\n        });\n    }\n    /**\n     * @param viewScriptParams Parameters of the script view to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate a call to a michelson view\n     *\n     */\n    runScriptView(_a, _b) {\n        var { unparsing_mode = 'Readable' } = _a, rest = __rest(_a, [\"unparsing_mode\"]);\n        var _c = _b === void 0 ? defaultRPCOptions : _b, block = _c.block;\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_script_view`),\n                method: 'POST',\n            }, Object.assign({ unparsing_mode }, rest));\n        });\n    }\n    /**\n     * @param viewParams Parameters of the view to run\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Simulate a call to a view following the TZIP-4 standard. See https://gitlab.com/tzip/tzip/-/blob/master/proposals/tzip-4/tzip-4.md#view-entrypoints.\n     *\n     */\n    runView(_a, _b) {\n        var { unparsing_mode = 'Readable' } = _a, rest = __rest(_a, [\"unparsing_mode\"]);\n        var _c = _b === void 0 ? defaultRPCOptions : _b, block = _c.block;\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/run_view`),\n                method: 'POST',\n            }, Object.assign({ unparsing_mode }, rest));\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/chain_id`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param data Data to pack\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Computes the serialized version of a data expression using the same algorithm as script instruction PACK\n     * Note: You should always verify the packed bytes before signing or requesting that they be signed when using the the RPC to pack.\n     * This precaution helps protect you and your applications users from RPC nodes that have been compromised.\n     * A node that is operated by a bad actor, or compromised by a bad actor could return a fully formed operation that does not correspond to the input provided to the RPC endpoint.\n     * A safer solution to pack and sign data would be to use the `packDataBytes` function available in the `@taquito/michel-codec` package.\n     *\n     * @example packData({ data: { string: \"test\" }, type: { prim: \"string\" } })\n     *\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-helpers-scripts-pack-data\n     */\n    packData(data, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _a = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/helpers/scripts/pack_data`),\n                method: 'POST',\n            }, data), { gas } = _a, rest = __rest(_a, [\"gas\"]);\n            let formattedGas = gas;\n            const tryBigNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](gas || '');\n            if (!tryBigNumber.isNaN()) {\n                formattedGas = tryBigNumber;\n            }\n            return Object.assign({ gas: formattedGas }, rest);\n        });\n    }\n    /**\n     *\n     * @description Return rpc root url\n     */\n    getRpcUrl() {\n        return this.url;\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Voting period of current block.\n     *\n     * @example getCurrentPeriod() will default to current voting period for /main/chains/block/head.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-current-period\n     */\n    getCurrentPeriod({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/current_period`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Voting period of next block.\n     *\n     * @example getSuccessorPeriod() will default to successor voting period for /main/chains/block/head.\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-votes-successor-period\n     */\n    getSuccessorPeriod({ block, } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/votes/successor_period`),\n                method: 'GET',\n            });\n            return response;\n        });\n    }\n    /**\n     *\n     * @param id Sapling state ID\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a sapling state ID.\n     *\n     * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-sapling-sapling-state-id-get-diff\n     */\n    getSaplingDiffById(id, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/sapling/${id}/get_diff`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to get the sapling diff\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the value associated with a sapling state.\n     *\n     * @see https://tezos.gitlab.io/active/rpc.html#get-block-id-context-contracts-contract-id-single-sapling-get-diff\n     */\n    getSaplingDiffByContract(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/single_sapling_get_diff`),\n                method: 'GET',\n            });\n        });\n    }\n    getProtocols({ block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/protocols`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param tx_rollup_id the transaction rollup ID\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the state of a rollup\n     *\n     * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-state\n     */\n    getTxRollupState(txRollupId, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/state`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param tx_rollup_id the transaction rollup ID\n     * @param block_level the block level\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the inbox of a transaction rollup\n     *\n     * @see https://tezos.gitlab.io/jakarta/rpc.html#get-block-id-context-tx-rollup-tx-rollup-id-inbox-block-level\n     */\n    getTxRollupInbox(txRollupId, blockLevel, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/tx_rollup/${txRollupId}/inbox/${blockLevel}`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to retrieve storage information of\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the amount of used space in a contract's storage\n     *\n     * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStorageUsedSpace(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/storage/used_space`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param contract address of the contract we want to retrieve storage information of\n     * @param options contains generic configuration for rpc calls\n     *\n     * @description Access the amount of paid space in a contract's storage\n     *\n     * @see https://tezos.gitlab.io/lima/rpc.html#get-block-id-context-contracts-contract-id-storage\n     */\n    getStoragePaidSpace(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/storage/paid_space`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     *\n     * @param contract implicit or originated address we want to retrieve ticket balance of\n     * @param ticket object to specify a ticket by ticketer, content type and content\n     * @param options contains generic configuration for rpc calls\n     * @description Access the contract's balance of ticket with specified ticketer, content type, and content.\n     * @example ticket { ticketer: 'address', content_type: { prim: \"string\" }, content: { string: 'ticket1' } }\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getTicketBalance(contract, ticket, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/ticket_balance`),\n                method: 'POST',\n            }, ticket);\n        });\n    }\n    /**\n     *\n     * @param contract originated address we want to retrieve ticket balances of\n     * @param options contains generic configuration for rpc calls\n     * @description Access the complete list of tickets owned by the given contract by scanning the contract's storage.\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getAllTicketBalances(contract, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/contracts/${contract}/all_ticket_balances`),\n                method: 'GET',\n            });\n        });\n    }\n    /**\n     * @description List the prevalidated operations in mempool (accessibility of mempool depends on each rpc endpoint)\n     * @param args has 5 optional properties. We support version 1 with new encoding as version 0 will be deprecated soon. The rest of the properties is to filter pending operations response\n     * @default args { version: '1', applied: true, refused: true, outdated, true, branchRefused: true, branchDelayed: true, validationPass: undefined }\n     * @see https://tezos.gitlab.io/CHANGES.html?highlight=pending_operations#id4\n     */\n    getPendingOperations(args = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/mempool/pending_operations`),\n                method: 'GET',\n                query: args,\n            });\n        });\n    }\n    /**\n     *\n     * @param params contains the PVM kind and kernel to generate the origination proof from\n     * @description rpc call to generate the origination proof needed for a smart rollup originate operation\n     * @see https://tezos.gitlab.io/protocols/016_mumbai.html#rpc-changes\n     */\n    getOriginationProof(params, { block } = defaultRPCOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpBackend.createRequest({\n                url: this.createURL(`/chains/${this.chain}/blocks/${block}/context/smart_rollups/all/origination_proof`),\n                method: 'POST',\n            }, params);\n        });\n    }\n}\n\n\n//# sourceMappingURL=taquito-rpc.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhcXVpdG8vcnBjL2Rpc3QvdGFxdWl0by1ycGMuZXM2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtGO0FBQzdDO0FBQ3NFO0FBQzFCOztBQUVqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxjQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0RBQVM7QUFDM0I7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxpQkFBaUIsT0FBTyxHQUFHLGNBQWMsR0FBRyxlQUFlLEVBQUUsOEJBQThCO0FBQzNGLGlCQUFpQixPQUFPLEdBQUcsY0FBYyxHQUFHLGVBQWU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QscUNBQXFDLFNBQVMsb0JBQW9CO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLCtEQUFlO0FBQ2pELGtDQUFrQyw0REFBZ0I7QUFDbEQsc0JBQXNCLDhEQUFtQixVQUFVLDZEQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx1RUFBdUI7QUFDekQsa0NBQWtDLDREQUFnQjtBQUNsRCxzQkFBc0Isc0VBQTJCLFVBQVUsNkRBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELE9BQU87QUFDdEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsT0FBTztBQUN2RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsUUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxPQUFPO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFFBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsT0FBTztBQUM3RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLE9BQU87QUFDNUU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCw0QkFBNEIsSUFBSSxRQUFRO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGLE9BQU87QUFDckc7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsT0FBTztBQUM5RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxPQUFPO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLE9BQU87QUFDOUU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLE9BQU87QUFDcEY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsUUFBUTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxPQUFPO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLE9BQU87QUFDL0U7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsT0FBTztBQUNoRjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxPQUFPO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZUFBZTtBQUMxQywyQkFBMkIsOERBQThEO0FBQ3pGO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxPQUFPO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLE9BQU87QUFDeEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsT0FBTztBQUMxRTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsSUFBSSxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxPQUFPO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxJQUFJLFFBQVE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLE9BQU87QUFDbEY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE9BQU87QUFDdkU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsU0FBUztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsT0FBTztBQUM1RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxPQUFPO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLE9BQU87QUFDMUU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsT0FBTztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDBEQUEwRCxPQUFPO0FBQ2pFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsUUFBUTtBQUN0QztBQUNBLDREQUE0RCxPQUFPO0FBQ25FLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxPQUFPO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBLHFEQUFxRCxPQUFPO0FBQzVELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDBEQUEwRCxPQUFPO0FBQ2pFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBLGtEQUFrRCxPQUFPO0FBQ3pELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhCQUE4QjtBQUM1QztBQUNBO0FBQ0EsZ0VBQWdFLGdCQUFnQixXQUFXLE9BQU87QUFDbEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQSwwREFBMEQsZ0JBQWdCLFdBQVcsT0FBTztBQUM1RixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUSxnQkFBZ0IsVUFBVSxrQkFBa0I7QUFDL0U7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLE9BQU87QUFDeEU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsT0FBTztBQUMxRTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixTQUFTO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxPQUFPO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxPQUFPO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixPQUFPO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsT0FBTztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsT0FBTztBQUN0RjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQ0FBK0MsUUFBUTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJGQUEyRixPQUFPO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixPQUFPO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixPQUFPO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxQ0FBcUMsZ0JBQWdCLGFBQWE7QUFDMUY7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixPQUFPO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLE9BQU87QUFDeEY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsT0FBTztBQUNyRjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdEQUFnRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4RUFBOEU7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBCQUEwQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0VBQW9FO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhEQUE4RDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0RUFBNEU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdGQUFnRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEZBQTRGO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0RUFBNEU7O0FBRTdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELDREQUFXO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixRQUFRLEVBQUUsS0FBSztBQUNqQztBQUNBO0FBQ0Esa0NBQWtDLCtEQUFlO0FBQ2pELGtDQUFrQyw0REFBZ0I7QUFDbEQsc0JBQXNCLDhEQUFtQixVQUFVLDZEQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyx1RUFBdUI7QUFDekQsa0NBQWtDLDREQUFnQjtBQUNsRCxzQkFBc0Isc0VBQTJCLFVBQVUsNkRBQWE7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsUUFBUTtBQUNsQztBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFFBQVE7QUFDdkc7QUFDQSxhQUFhO0FBQ2IsdUJBQXVCLG9EQUFTO0FBQ2hDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsUUFBUTtBQUN2RztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsUUFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFFBQVE7QUFDdkc7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsNEJBQTRCLElBQUksUUFBUTtBQUMzRjtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFFBQVE7QUFDdkc7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixRQUFRO0FBQ3ZHO0FBQ0EsYUFBYTtBQUNiLGlEQUFpRCx1QkFBdUIsYUFBYSxvREFBUyw0QkFBNEI7QUFDMUgsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixRQUFRO0FBQ3ZHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFFBQVE7QUFDM0c7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGtDQUFrQyxrRUFBaUIsa0JBQWtCLDREQUFXO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsUUFBUTtBQUN2RztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0sb0JBQW9CLEdBQUcsR0FBRyxLQUFLO0FBQ3pHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsUUFBUTtBQUN2RztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGdDQUFnQztBQUMvRjtBQUNBLDhCQUE4QixtQ0FBbUM7QUFDakUsb0VBQW9FLGtDQUFrQztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELFdBQVcsNElBQTRJO0FBQ3BOLHFCQUFxQjtBQUNyQixpQ0FBaUM7QUFDakMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixRQUFRO0FBQ3ZHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixlQUFlO0FBQzFDLDJCQUEyQiw4REFBOEQ7QUFDekY7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUTtBQUM3QjtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsSUFBSSxRQUFRO0FBQ3pDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxJQUFJLFFBQVE7QUFDNUM7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsU0FBUztBQUNsQztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEM7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsNENBQTRDLG9EQUFTO0FBQ3JEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWE7QUFDYjtBQUNBLHNDQUFzQyxvREFBUztBQUMvQyxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixRQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsU0FBUztBQUN4RztBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNO0FBQzFFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDhCQUE4QjtBQUM1QztBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhLGtCQUFrQixnQkFBZ0I7QUFDL0MsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWEsa0JBQWtCLGdCQUFnQjtBQUMvQyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVztBQUMxRDtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVEsZ0JBQWdCLFVBQVUsa0JBQWtCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWEsV0FBVyxNQUFNO0FBQzlCO0FBQ0EscUNBQXFDLG9EQUFTO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxtQkFBbUI7QUFDdEQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixTQUFTO0FBQ2xDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLG1CQUFtQixHQUFHO0FBQ2hHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFNBQVM7QUFDeEc7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTTtBQUMxRTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsUUFBUTtBQUMzQztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixXQUFXO0FBQzFHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFFBQVE7QUFDdkQ7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsV0FBVyxTQUFTLFdBQVc7QUFDOUg7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFFBQVE7QUFDNUM7QUFDQTtBQUNBLCtDQUErQyxXQUFXLFVBQVUsTUFBTSxxQkFBcUIsU0FBUztBQUN4RztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixTQUFTO0FBQ3hHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixxQ0FBcUMsZ0JBQWdCLGFBQWE7QUFDM0Y7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU0scUJBQXFCLFNBQVM7QUFDeEc7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0EsK0NBQStDLFdBQVcsVUFBVSxNQUFNLHFCQUFxQixTQUFTO0FBQ3hHO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVztBQUMxRDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRO0FBQzFDO0FBQ0E7QUFDQSwrQ0FBK0MsV0FBVyxVQUFVLE1BQU07QUFDMUU7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7O0FBRW1YO0FBQ25YIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXlhcHAvLi9ub2RlX21vZHVsZXMvQHRhcXVpdG8vcnBjL2Rpc3QvdGFxdWl0by1ycGMuZXM2LmpzP2IzM2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEJhY2tlbmQsIEh0dHBSZXNwb25zZUVycm9yLCBTVEFUVVNfQ09ERSB9IGZyb20gJ0B0YXF1aXRvL2h0dHAtdXRpbHMnO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tICdiaWdudW1iZXIuanMnO1xuaW1wb3J0IHsgdmFsaWRhdGVBZGRyZXNzLCBWYWxpZGF0aW9uUmVzdWx0LCBpbnZhbGlkRGV0YWlsLCB2YWxpZGF0ZUNvbnRyYWN0QWRkcmVzcyB9IGZyb20gJ0B0YXF1aXRvL3V0aWxzJztcbmltcG9ydCB7IEludmFsaWRBZGRyZXNzRXJyb3IsIEludmFsaWRDb250cmFjdEFkZHJlc3NFcnJvciB9IGZyb20gJ0B0YXF1aXRvL2NvcmUnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sICovXHJcblxyXG5cclxuZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG50eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcclxuICAgIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xyXG4gICAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcclxufTtcblxuY29uc3QgZGVmYXVsdENoYWluID0gJ21haW4nO1xuY29uc3QgZGVmYXVsdFJQQ09wdGlvbnMgPSB7IGJsb2NrOiAnaGVhZCcgfTtcbnZhciBSUENNZXRob2ROYW1lO1xuKGZ1bmN0aW9uIChSUENNZXRob2ROYW1lKSB7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9CQUtJTkdfUklHSFRTXCJdID0gXCJnZXRCYWtpbmdSaWdodHNcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0JBTExPVFNcIl0gPSBcImdldEJhbGxvdHNcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0JBTExPVF9MSVNUXCJdID0gXCJnZXRCYWxsb3RMaXN0XCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9CSUdfTUFQX0tFWVwiXSA9IFwiZ2V0QmlnTWFwS2V5XCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9CSUdfTUFQX0VYUFJcIl0gPSBcImdldEJpZ01hcEV4cHJcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0JMT0NLX0hBU0hcIl0gPSBcImdldEJsb2NrSGFzaFwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfQkxPQ0tcIl0gPSBcImdldEJsb2NrXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9CTE9DS19IRUFERVJcIl0gPSBcImdldEJsb2NrSGVhZGVyXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9CTE9DS19NRVRBREFUQVwiXSA9IFwiZ2V0QmxvY2tNZXRhZGF0YVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfQkFMQU5DRVwiXSA9IFwiZ2V0QmFsYW5jZVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfQ0hBSU5fSURcIl0gPSBcImdldENoYWluSWRcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0NPTlNUQU5UU1wiXSA9IFwiZ2V0Q29uc3RhbnRzXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9DT05UUkFDVFwiXSA9IFwiZ2V0Q29udHJhY3RcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0NVUlJFTlRfUEVSSU9EXCJdID0gXCJnZXRDdXJyZW50UGVyaW9kXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9DVVJSRU5UX1BST1BPU0FMXCJdID0gXCJnZXRDdXJyZW50UHJvcG9zYWxcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0NVUlJFTlRfUVVPUlVNXCJdID0gXCJnZXRDdXJyZW50UXVvcnVtXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9ERUxFR0FURVwiXSA9IFwiZ2V0RGVsZWdhdGVcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0RFTEVHQVRFU1wiXSA9IFwiZ2V0RGVsZWdhdGVzXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9WT1RJTkdfSU5GT1wiXSA9IFwiZ2V0Vm90aW5nSW5mb1wiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfRU5ET1JTSU5HX1JJR0hUU1wiXSA9IFwiZ2V0RW5kb3JzaW5nUmlnaHRzXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9FTlRSWVBPSU5UU1wiXSA9IFwiZ2V0RW50cnlwb2ludHNcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX0xJVkVfQkxPQ0tTXCJdID0gXCJnZXRMaXZlQmxvY2tzXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9NQU5BR0VSX0tFWVwiXSA9IFwiZ2V0TWFuYWdlcktleVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfTk9STUFMSVpFRF9TQ1JJUFRcIl0gPSBcImdldE5vcm1hbGl6ZWRTY3JpcHRcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX1BST1BPU0FMU1wiXSA9IFwiZ2V0UHJvcG9zYWxzXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9QUk9UT0NPTFNcIl0gPSBcImdldFByb3RvY29sc1wiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfU0FQTElOR19ESUZGX0JZX0NPTlRSQUNUXCJdID0gXCJnZXRTYXBsaW5nRGlmZkJ5Q29udHJhY3RcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX1NBUExJTkdfRElGRl9CWV9JRFwiXSA9IFwiZ2V0U2FwbGluZ0RpZmZCeUlkXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9TQ1JJUFRcIl0gPSBcImdldFNjcmlwdFwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfU1RPUkFHRVwiXSA9IFwiZ2V0U3RvcmFnZVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfU1VDQ0VTU09SX1BFUklPRFwiXSA9IFwiZ2V0U3VjY2Vzc29yUGVyaW9kXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9UWF9ST0xMVVBfSU5CT1hcIl0gPSBcImdldFR4Um9sbHVwSW5ib3hcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX1RYX1JPTExVUF9TVEFURVwiXSA9IFwiZ2V0VHhSb2xsdXBTdGF0ZVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfVk9URVNfTElTVElOR1NcIl0gPSBcImdldFZvdGVzTGlzdGluZ3NcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiUEFDS19EQVRBXCJdID0gXCJwYWNrRGF0YVwiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfU1RPUkFHRV9VU0VEX1NQQUNFXCJdID0gXCJnZXRTdG9yYWdlVXNlZFNwYWNlXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9TVE9SQUdFX1BBSURfU1BBQ0VcIl0gPSBcImdldFN0b3JhZ2VQYWlkU3BhY2VcIjtcbiAgICBSUENNZXRob2ROYW1lW1wiR0VUX1RJQ0tFVF9CQUxBTkNFXCJdID0gXCJnZXRUaWNrZXRCYWxhbmNlXCI7XG4gICAgUlBDTWV0aG9kTmFtZVtcIkdFVF9BTExfVElDS0VUX0JBTEFOQ0VTXCJdID0gXCJnZXRBbGxUaWNrZXRCYWxhbmNlc1wiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfUEVORElOR19PUEVSQVRJT05TXCJdID0gXCJnZXRQZW5kaW5nT3BlcmF0aW9uc1wiO1xuICAgIFJQQ01ldGhvZE5hbWVbXCJHRVRfT1JJR0lOQVRJT05fUFJPT0ZcIl0gPSBcImdldE9yaWdpbmF0aW9uUHJvb2ZcIjtcbn0pKFJQQ01ldGhvZE5hbWUgfHwgKFJQQ01ldGhvZE5hbWUgPSB7fSkpO1xuXG4vKipcbiAqIENhc3RzIG9iamVjdC9hcnJheSBpdGVtcyB0byBCaWdOdW1iZXJcbiAqIEBwYXJhbSBkYXRhIGlucHV0IG9iamVjdCBvciBhcnJheVxuICogQHBhcmFtIGtleXMga2V5cyBmb3IgcHJvY2Vzc2luZyBvciBhbGwgaXRlbXMgaWYgbm90IGRlZmluZWRcbiAqXG4gKi9cbmZ1bmN0aW9uIGNhc3RUb0JpZ051bWJlcihkYXRhLCBrZXlzKSB7XG4gICAgY29uc3QgcmV0dXJuQXJyYXkgPSBBcnJheS5pc0FycmF5KGRhdGEpO1xuICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IHJldHVybkFycmF5ID8gW10gOiB7fTtcbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtrZXldO1xuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgICAgIHJlcyA9IGNhc3RUb0JpZ051bWJlcihpdGVtKTtcbiAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSByZXM7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbmV3IEJpZ051bWJlcihpdGVtKTtcbiAgICAgICAgcmVzcG9uc2Vba2V5XSA9IHJlcztcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbmNvbnN0IGRlZmF1bHRUdGwgPSAxMDAwO1xuLyoqKlxuICogQGRlc2NyaXB0aW9uIFJwY0NsaWVudENhY2hlIGFjdHMgYXMgYSBkZWNvcmF0b3Igb3ZlciB0aGUgUnBjQ2xpZW50IGluc3RhbmNlIGJ5IGNhY2hpbmcgcmVzcG9uc2VzIGZvciB0aGUgcGVyaW9kIGRlZmluZWQgYnkgdGhlIHR0bC5cbiAqL1xuY2xhc3MgUnBjQ2xpZW50Q2FjaGUge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHJwY0NsaWVudCBycGNDbGllbnQgcmVzcG9uc2libGUgb2YgdGhlIGludGVyYWN0aW9uIHdpdGggVGV6b3MgbmV0d29yayB0aHJvdWdoIGFuIHJwYyBub2RlXG4gICAgICogQHBhcmFtIHR0bCBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSB0aW1lIHRvIGxpdmUgKGRlZmF1bHQgMTAwMCBtaWxsaXNlY29uZHMpXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBuZXcgUnBjQ2xpZW50Q2FjaGUobmV3IFJwY0NsaWVudCgnaHR0cHM6Ly9tYWlubmV0LmVjYWRpbmZyYS5jb20vJykpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocnBjQ2xpZW50LCB0dGwgPSBkZWZhdWx0VHRsKSB7XG4gICAgICAgIHRoaXMucnBjQ2xpZW50ID0gcnBjQ2xpZW50O1xuICAgICAgICB0aGlzLnR0bCA9IHR0bDtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgZ2V0QWxsQ2FjaGVkRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIGFsbCB0aGUgZGF0YSBpbiB0aGUgY2FjaGUuXG4gICAgICpcbiAgICAgKi9cbiAgICBkZWxldGVBbGxDYWNoZWREYXRhKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jYWNoZSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhY2hlW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybWF0Q2FjaGVLZXkocnBjVXJsLCBycGNNZXRob2ROYW1lLCBycGNNZXRob2RQYXJhbXMsIHJwY01ldGhvZERhdGEpIHtcbiAgICAgICAgbGV0IHBhcmFtc1RvU3RyaW5nID0gJyc7XG4gICAgICAgIHJwY01ldGhvZFBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICAgICAgcGFyYW1zVG9TdHJpbmcgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBwYXJhbSA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJhbXNUb1N0cmluZyArIEpTT04uc3RyaW5naWZ5KHBhcmFtKSArICcvJ1xuICAgICAgICAgICAgICAgICAgICA6IHBhcmFtc1RvU3RyaW5nICsgcGFyYW0gKyAnLyc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcnBjTWV0aG9kRGF0YVxuICAgICAgICAgICAgPyBgJHtycGNVcmx9LyR7cnBjTWV0aG9kTmFtZX0vJHtwYXJhbXNUb1N0cmluZ30ke0pTT04uc3RyaW5naWZ5KHJwY01ldGhvZERhdGEpfS9gXG4gICAgICAgICAgICA6IGAke3JwY1VybH0vJHtycGNNZXRob2ROYW1lfS8ke3BhcmFtc1RvU3RyaW5nfWA7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB0aGlzLl9jYWNoZTtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVba2V5XS5yZXNwb25zZTtcbiAgICB9XG4gICAgcHV0KGtleSwgcmVzcG9uc2UpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmUoa2V5KTtcbiAgICAgICAgfSwgdGhpcy50dGwpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuX2NhY2hlLCB7IFtrZXldOiB7IGhhbmRsZSwgcmVzcG9uc2UgfSB9KTtcbiAgICB9XG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIHRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcykge1xuICAgICAgICBjb25zdCBhZGRyZXNzVmFsaWRhdGlvbiA9IHZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgaWYgKGFkZHJlc3NWYWxpZGF0aW9uICE9PSBWYWxpZGF0aW9uUmVzdWx0LlZBTElEKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcihhZGRyZXNzLCBpbnZhbGlkRGV0YWlsKGFkZHJlc3NWYWxpZGF0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGVDb250cmFjdChhZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3NWYWxpZGF0aW9uID0gdmFsaWRhdGVDb250cmFjdEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgIGlmIChhZGRyZXNzVmFsaWRhdGlvbiAhPT0gVmFsaWRhdGlvblJlc3VsdC5WQUxJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb250cmFjdEFkZHJlc3NFcnJvcihhZGRyZXNzLCBpbnZhbGlkRGV0YWlsKGFkZHJlc3NWYWxpZGF0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEdldCB0aGUgYmxvY2sncyBoYXNoLCBpdHMgdW5pcXVlIGlkZW50aWZpZXIuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtaGFzaFxuICAgICAqL1xuICAgIGdldEJsb2NrSGFzaCh7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQkxPQ0tfSEFTSCwgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRCbG9ja0hhc2goeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gTGlzdCB0aGUgYW5jZXN0b3JzIG9mIHRoZSBnaXZlbiBibG9jayB3aGljaCwgaWYgcmVmZXJyZWQgdG8gYXMgdGhlIGJyYW5jaCBpbiBhbiBvcGVyYXRpb24gaGVhZGVyLCBhcmUgcmVjZW50IGVub3VnaCBmb3IgdGhhdCBvcGVyYXRpb24gdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGN1cnJlbnQgYmxvY2suXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtbGl2ZS1ibG9ja3NcbiAgICAgKi9cbiAgICBnZXRMaXZlQmxvY2tzKHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9MSVZFX0JMT0NLUywgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRMaXZlQmxvY2tzKHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBhZGRyZXNzIGZyb20gd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZSB0aGUgYmFsYW5jZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQWNjZXNzIHRoZSBiYWxhbmNlIG9mIGEgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtYmFsYW5jZVxuICAgICAqL1xuICAgIGdldEJhbGFuY2UoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQkFMQU5DRSwgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJhbGFuY2UoYWRkcmVzcywgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBzdG9yYWdlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKiBAdGhyb3dzIHtAbGluayBJbnZhbGlkQ29udHJhY3RBZGRyZXNzRXJyb3J9XG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgZGF0YSBvZiB0aGUgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtc3RvcmFnZVxuICAgICAqL1xuICAgIGdldFN0b3JhZ2UoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVDb250cmFjdChhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1NUT1JBR0UsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRTdG9yYWdlKGFkZHJlc3MsIHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBjb250cmFjdCBhZGRyZXNzIGZyb20gd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZSB0aGUgc2NyaXB0XG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKiBAdGhyb3dzIHtAbGluayBJbnZhbGlkQ29udHJhY3RBZGRyZXNzRXJyb3J9XG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgY29kZSBhbmQgZGF0YSBvZiB0aGUgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtc2NyaXB0XG4gICAgICovXG4gICAgZ2V0U2NyaXB0KGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQ29udHJhY3QoYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9TQ1JJUFQsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRTY3JpcHQoYWRkcmVzcywgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBzY3JpcHRcbiAgICAgKiBAcGFyYW0gdW5wYXJzaW5nTW9kZSBkZWZhdWx0IGlzIHsgdW5wYXJzaW5nX21vZGU6IFwiUmVhZGFibGVcIiB9XG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKiBAdGhyb3dzIHtAbGluayBJbnZhbGlkQ29udHJhY3RBZGRyZXNzRXJyb3J9XG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgc2NyaXB0IG9mIHRoZSBjb250cmFjdCBhbmQgbm9ybWFsaXplIGl0IHVzaW5nIHRoZSByZXF1ZXN0ZWQgdW5wYXJzaW5nIG1vZGUuXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXROb3JtYWxpemVkU2NyaXB0KGFkZHJlc3MsIHVucGFyc2luZ01vZGUgPSB7IHVucGFyc2luZ19tb2RlOiAnUmVhZGFibGUnIH0sIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQ29udHJhY3QoYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9OT1JNQUxJWkVEX1NDUklQVCwgW2Jsb2NrLCBhZGRyZXNzXSwgdW5wYXJzaW5nTW9kZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXROb3JtYWxpemVkU2NyaXB0KGFkZHJlc3MsIHVucGFyc2luZ01vZGUsIHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBjb250cmFjdCBhZGRyZXNzIGZyb20gd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQWNjZXNzIHRoZSBjb21wbGV0ZSBzdGF0dXMgb2YgYSBjb250cmFjdC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZFxuICAgICAqL1xuICAgIGdldENvbnRyYWN0KGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX0NPTlRSQUNULCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0Q29udHJhY3QoYWRkcmVzcywgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBtYW5hZ2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIG1hbmFnZXIga2V5IG9mIGEgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtbWFuYWdlci1rZXlcbiAgICAgKi9cbiAgICBnZXRNYW5hZ2VyS2V5KGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX01BTkFHRVJfS0VZLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0TWFuYWdlcktleShhZGRyZXNzLCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgY29udHJhY3QgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmUgdGhlIGRlbGVnYXRlIChiYWtlcilcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgZGVsZWdhdGUgb2YgYSBjb250cmFjdCwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWRlbGVnYXRlXG4gICAgICovXG4gICAgZ2V0RGVsZWdhdGUoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfREVMRUdBVEUsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXREZWxlZ2F0ZShhZGRyZXNzLCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgY29udHJhY3QgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmUgdGhlIGJpZyBtYXAga2V5XG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhIGtleSBpbiB0aGUgYmlnIG1hcCBzdG9yYWdlIG9mIHRoZSBjb250cmFjdC5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZ2V0QmlnTWFwS2V5QnlJRFxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjcG9zdC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZC1iaWctbWFwLWdldFxuICAgICAqL1xuICAgIGdldEJpZ01hcEtleShhZGRyZXNzLCBrZXksIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGtleVVybCA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX0JJR19NQVBfS0VZLCBbYmxvY2ssIGFkZHJlc3NdLCBrZXkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleVVybCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5VXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0QmlnTWFwS2V5KGFkZHJlc3MsIGtleSwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXlVcmwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBCaWcgTWFwIElEXG4gICAgICogQHBhcmFtIGV4cHIgRXhwcmVzc2lvbiBoYXNoIHRvIHF1ZXJ5IChBIGI1OGNoZWNrIGVuY29kZWQgQmxha2UyYiBoYXNoIG9mIHRoZSBleHByZXNzaW9uIChUaGUgZXhwcmVzc2lvbiBjYW4gYmUgcGFja2VkIHVzaW5nIHRoZSBwYWNrX2RhdGEgbWV0aG9kKSlcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEga2V5IGluIGEgYmlnIG1hcC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWJpZy1tYXBzLWJpZy1tYXAtaWQtc2NyaXB0LWV4cHJcbiAgICAgKi9cbiAgICBnZXRCaWdNYXBFeHByKGlkLCBleHByLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQklHX01BUF9FWFBSLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgZXhwcixcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0QmlnTWFwRXhwcihpZCwgZXhwciwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGRlbGVnYXRlIGFkZHJlc3Mgd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRmV0Y2hlcyBpbmZvcm1hdGlvbiBhYm91dCBhIGRlbGVnYXRlIGZyb20gUlBDLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtZGVsZWdhdGVzLXBraFxuICAgICAqL1xuICAgIGdldERlbGVnYXRlcyhhZGRyZXNzLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9ERUxFR0FURVMsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXREZWxlZ2F0ZXMoYWRkcmVzcywgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGRlbGVnYXRlIGFkZHJlc3Mgd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgZGVsZWdhdGUgaW5mbyAoZS5nLiB2b3RpbmcgcG93ZXIpIGZvdW5kIGluIHRoZSBsaXN0aW5ncyBvZiB0aGUgY3VycmVudCB2b3RpbmcgcGVyaW9kLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9rYXRobWFuZHUvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtZGVsZWdhdGVzLXBraC12b3RpbmctaW5mb1xuICAgICAqL1xuICAgIGdldFZvdGluZ0luZm8oYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfVk9USU5HX0lORk8sIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRWb3RpbmdJbmZvKGFkZHJlc3MsIHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFsbCBjb25zdGFudHNcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnN0YW50c1xuICAgICAqL1xuICAgIGdldENvbnN0YW50cyh7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQ09OU1RBTlRTLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldENvbnN0YW50cyh7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHMuIFNlZSBleGFtcGxlcyBmb3IgdmFyaW91cyBhdmFpbGFibGUgc3l0YXhlcy5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBbGwgdGhlIGluZm9ybWF0aW9uIGFib3V0IGEgYmxvY2tcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZFxuICAgICAqIEBleGFtcGxlIGdldEJsb2NrKCkgd2lsbCBkZWZhdWx0IHRvIC9tYWluL2NoYWlucy9ibG9jay9oZWFkLlxuICAgICAqIEBleGFtcGxlIGdldEJsb2NrKHsgYmxvY2s6IGhlYWR+MiB9KSB3aWxsIHJldHVybiBhbiBvZmZzZXQgb2YgMiBibG9ja3MuXG4gICAgICogQGV4YW1wbGUgZ2V0QmxvY2soeyBibG9jazogQkw4ZlRpV2NTeFdDamlNVm5Ea2JoNkV1aHFWUFp6Z1doZUoyZHF3cnhZUm05QWVwaFhofjIgfSkgd2lsbCByZXR1cm4gYW4gb2Zmc2V0IG9mIDIgYmxvY2tzIGZyb20gZ2l2ZW4gYmxvY2sgaGFzaC4uXG4gICAgICovXG4gICAgZ2V0QmxvY2soeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX0JMT0NLLCBbYmxvY2tdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJsb2NrKHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSB3aG9sZSBibG9jayBoZWFkZXJcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1oZWFkZXJcbiAgICAgKi9cbiAgICBnZXRCbG9ja0hlYWRlcih7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQkxPQ0tfSEVBREVSLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJsb2NrSGVhZGVyKHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFsbCB0aGUgbWV0YWRhdGEgYXNzb2NpYXRlZCB0byB0aGUgYmxvY2tcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1tZXRhZGF0YVxuICAgICAqL1xuICAgIGdldEJsb2NrTWV0YWRhdGEoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX0JMT0NLX01FVEFEQVRBLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJsb2NrTWV0YWRhdGEoeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIGNvbnRhaW5zIG9wdGlvbmFsIHF1ZXJ5IGFyZ3VtZW50c1xuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0cmlldmVzIHRoZSBsaXN0IG9mIGRlbGVnYXRlcyBhbGxvd2VkIHRvIGJha2UgYSBibG9jay5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1oZWxwZXJzLWJha2luZy1yaWdodHNcbiAgICAgKi9cbiAgICBnZXRCYWtpbmdSaWdodHMoYXJncyA9IHt9LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQkFLSU5HX1JJR0hUUywgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJha2luZ1JpZ2h0cyhhcmdzLCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgY29udGFpbnMgb3B0aW9uYWwgcXVlcnkgYXJndW1lbnRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIGxpc3Qgb2YgZGVsZWdhdGVzIGFsbG93ZWQgdG8gYmFrZSBhIGJsb2NrLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWhlbHBlcnMtZW5kb3JzaW5nLXJpZ2h0c1xuICAgICAqL1xuICAgIGdldEVuZG9yc2luZ1JpZ2h0cyhhcmdzID0ge30sIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9FTkRPUlNJTkdfUklHSFRTLCBbYmxvY2ssIGFyZ3NdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEVuZG9yc2luZ1JpZ2h0cyhhcmdzLCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQmFsbG90cyBjYXN0ZWQgc28gZmFyIGR1cmluZyBhIHZvdGluZyBwZXJpb2RcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC12b3Rlcy1iYWxsb3QtbGlzdFxuICAgICAqL1xuICAgIGdldEJhbGxvdExpc3QoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX0JBTExPVF9MSVNULCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJhbGxvdExpc3QoeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU3VtIG9mIGJhbGxvdHMgY2FzdGVkIHNvIGZhciBkdXJpbmcgYSB2b3RpbmcgcGVyaW9kLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLWJhbGxvdHNcbiAgICAgKi9cbiAgICBnZXRCYWxsb3RzKHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9CQUxMT1RTLCBbYmxvY2tdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEJhbGxvdHMoeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3VycmVudCBwcm9wb3NhbCB1bmRlciBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLWN1cnJlbnQtcHJvcG9zYWxcbiAgICAgKi9cbiAgICBnZXRDdXJyZW50UHJvcG9zYWwoeyBibG9jaywgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9DVVJSRU5UX1BST1BPU0FMLCBbYmxvY2tdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldEN1cnJlbnRQcm9wb3NhbCh7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBDdXJyZW50IGV4cGVjdGVkIHF1b3J1bS5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC12b3Rlcy1jdXJyZW50LXF1b3J1bVxuICAgICAqL1xuICAgIGdldEN1cnJlbnRRdW9ydW0oeyBibG9jaywgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9DVVJSRU5UX1FVT1JVTSwgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRDdXJyZW50UXVvcnVtKHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIExpc3Qgb2YgZGVsZWdhdGVzIHdpdGggdGhlaXIgdm90aW5nIHdlaWdodCwgaW4gbnVtYmVyIG9mIHJvbGxzLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLWxpc3RpbmdzXG4gICAgICovXG4gICAgZ2V0Vm90ZXNMaXN0aW5ncyh7IGJsb2NrLCB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1ZPVEVTX0xJU1RJTkdTLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFZvdGVzTGlzdGluZ3MoeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gTGlzdCBvZiBwcm9wb3NhbHMgd2l0aCBudW1iZXIgb2Ygc3VwcG9ydGVycy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC12b3Rlcy1wcm9wb3NhbHNcbiAgICAgKi9cbiAgICBnZXRQcm9wb3NhbHMoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1BST1BPU0FMUywgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRQcm9wb3NhbHMoeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIG9wZXJhdGlvbiBjb250ZW50cyB0byBmb3JnZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gRm9yZ2UgYW4gb3BlcmF0aW9uIHJldHVybmluZyB0aGUgdW5zaWduZWQgYnl0ZXNcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI3Bvc3QtYmxvY2staWQtaGVscGVycy1mb3JnZS1vcGVyYXRpb25zXG4gICAgICovXG4gICAgZm9yZ2VPcGVyYXRpb25zKGRhdGEsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQuZm9yZ2VPcGVyYXRpb25zKGRhdGEsIHsgYmxvY2sgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaWduZWRPcEJ5dGVzIHNpZ25lZCBieXRlcyB0byBpbmplY3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBJbmplY3QgYW4gb3BlcmF0aW9uIGluIG5vZGUgYW5kIGJyb2FkY2FzdCBpdC4gUmV0dXJucyB0aGUgSUQgb2YgdGhlIG9wZXJhdGlvbi4gVGhlIGBzaWduZWRPcGVyYXRpb25Db250ZW50c2Agc2hvdWxkIGJlIGNvbnN0cnVjdGVkIHVzaW5nIGEgY29udGV4dHVhbCBSUENzIGZyb20gdGhlIGxhdGVzdCBibG9jayBhbmQgc2lnbmVkIGJ5IHRoZSBjbGllbnQuIEJ5IGRlZmF1bHQsIHRoZSBSUEMgd2lsbCB3YWl0IGZvciB0aGUgb3BlcmF0aW9uIHRvIGJlIChwcmUtKXZhbGlkYXRlZCBiZWZvcmUgYW5zd2VyaW5nLiBTZWUgUlBDcyB1bmRlciAvYmxvY2tzL3ByZXZhbGlkYXRpb24gZm9yIG1vcmUgZGV0YWlscyBvbiB0aGUgcHJldmFsaWRhdGlvbiBjb250ZXh0LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjcG9zdC1pbmplY3Rpb24tb3BlcmF0aW9uXG4gICAgICovXG4gICAgaW5qZWN0T3BlcmF0aW9uKHNpZ25lZE9wQnl0ZXMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJwY0NsaWVudC5pbmplY3RPcGVyYXRpb24oc2lnbmVkT3BCeXRlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHMgT3BlcmF0aW9ucyB0byBhcHBseVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU2ltdWxhdGUgdGhlIHZhbGlkYXRpb24gb2YgYW4gb3BlcmF0aW9uXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWJsb2NrLWlkLWhlbHBlcnMtcHJlYXBwbHktb3BlcmF0aW9uc1xuICAgICAqL1xuICAgIHByZWFwcGx5T3BlcmF0aW9ucyhvcHMsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQucHJlYXBwbHlPcGVyYXRpb25zKG9wcywgeyBibG9jayB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IHdlIHdhbnQgdG8gZ2V0IHRoZSBlbnRyeXBvaW50cyBvZlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHVybiB0aGUgbGlzdCBvZiBlbnRyeXBvaW50cyBvZiB0aGUgY29udHJhY3RcbiAgICAgKiBAdGhyb3dzIHtAbGluayBJbnZhbGlkQ29udHJhY3RBZGRyZXNzRXJyb3J9XG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWVudHJ5cG9pbnRzXG4gICAgICpcbiAgICAgKiBAdmVyc2lvbiAwMDVfUHNCQUJZNUhcbiAgICAgKi9cbiAgICBnZXRFbnRyeXBvaW50cyhjb250cmFjdCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVDb250cmFjdChjb250cmFjdCk7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9FTlRSWVBPSU5UUywgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgICAgIGNvbnRyYWN0LFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRFbnRyeXBvaW50cyhjb250cmFjdCwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3AgT3BlcmF0aW9uIHRvIHJ1blxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUnVuIGFuIG9wZXJhdGlvbiB3aXRob3V0IHNpZ25hdHVyZSBjaGVja3NcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI3Bvc3QtYmxvY2staWQtaGVscGVycy1zY3JpcHRzLXJ1bi1vcGVyYXRpb25cbiAgICAgKi9cbiAgICBydW5PcGVyYXRpb24ob3AsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQucnVuT3BlcmF0aW9uKG9wLCB7IGJsb2NrIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9wIE9wZXJhdGlvbiB0byBzaW11bGF0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU2ltdWxhdGUgYW4gb3BlcmF0aW9uXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0bGFiLmNvbS90ZXpvcy90ZXpvcy8tL2Jsb2IvbWFzdGVyL2RvY3MvYXBpL25haXJvYmktb3BlbmFwaS5qc29uXG4gICAgICovXG4gICAgc2ltdWxhdGVPcGVyYXRpb24ob3AsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQuc2ltdWxhdGVPcGVyYXRpb24ob3AsIHsgYmxvY2sgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29kZSBDb2RlIHRvIHJ1blxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUnVuIGEgcGllY2Ugb2YgY29kZSBpbiB0aGUgY3VycmVudCBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWJsb2NrLWlkLWhlbHBlcnMtc2NyaXB0cy1ydW4tY29kZVxuICAgICAqL1xuICAgIHJ1bkNvZGUoY29kZSwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJwY0NsaWVudC5ydW5Db2RlKGNvZGUsIHsgYmxvY2sgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmlld1NjcmlwdFBhcmFtcyBQYXJhbWV0ZXJzIG9mIHRoZSBzY3JpcHQgdmlldyB0byBydW5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNpbXVsYXRlIGEgY2FsbCB0byBhIG1pY2hlbHNvbiB2aWV3XG4gICAgICpcbiAgICAgKi9cbiAgICBydW5TY3JpcHRWaWV3KF9hLCBfYikge1xuICAgICAgICB2YXIgeyB1bnBhcnNpbmdfbW9kZSA9ICdSZWFkYWJsZScgfSA9IF9hLCByZXN0ID0gX19yZXN0KF9hLCBbXCJ1bnBhcnNpbmdfbW9kZVwiXSk7XG4gICAgICAgIHZhciBfYyA9IF9iID09PSB2b2lkIDAgPyBkZWZhdWx0UlBDT3B0aW9ucyA6IF9iLCBibG9jayA9IF9jLmJsb2NrO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucnBjQ2xpZW50LnJ1blNjcmlwdFZpZXcoT2JqZWN0LmFzc2lnbih7IHVucGFyc2luZ19tb2RlIH0sIHJlc3QpLCB7IGJsb2NrIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZpZXdQYXJhbXMgUGFyYW1ldGVycyBvZiB0aGUgdmlldyB0byBydW5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNpbXVsYXRlIGEgY2FsbCB0byBhIHZpZXcgZm9sbG93aW5nIHRoZSBUWklQLTQgc3RhbmRhcmQuIFNlZSBodHRwczovL2dpdGxhYi5jb20vdHppcC90emlwLy0vYmxvYi9tYXN0ZXIvcHJvcG9zYWxzL3R6aXAtNC90emlwLTQubWQjdmlldy1lbnRyeXBvaW50cy5cbiAgICAgKlxuICAgICAqL1xuICAgIHJ1blZpZXcoX2EsIF9iKSB7XG4gICAgICAgIHZhciB7IHVucGFyc2luZ19tb2RlID0gJ1JlYWRhYmxlJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInVucGFyc2luZ19tb2RlXCJdKTtcbiAgICAgICAgdmFyIF9jID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRSUENPcHRpb25zIDogX2IsIGJsb2NrID0gX2MuYmxvY2s7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQucnVuVmlldyhPYmplY3QuYXNzaWduKHsgdW5wYXJzaW5nX21vZGUgfSwgcmVzdCksIHsgYmxvY2sgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRDaGFpbklkKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQ0hBSU5fSUQsIFtdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldENoYWluSWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gcGFja1xuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29tcHV0ZXMgdGhlIHNlcmlhbGl6ZWQgdmVyc2lvbiBvZiBhIGRhdGEgZXhwcmVzc2lvbiB1c2luZyB0aGUgc2FtZSBhbGdvcml0aG0gYXMgc2NyaXB0IGluc3RydWN0aW9uIFBBQ0tcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIHBhY2tEYXRhKHsgZGF0YTogeyBzdHJpbmc6IFwidGVzdFwiIH0sIHR5cGU6IHsgcHJpbTogXCJzdHJpbmdcIiB9IH0pXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWJsb2NrLWlkLWhlbHBlcnMtc2NyaXB0cy1wYWNrLWRhdGFcbiAgICAgKi9cbiAgICBwYWNrRGF0YShkYXRhLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5QQUNLX0RBVEEsIFtibG9ja10sIGRhdGEpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQucGFja0RhdGEoZGF0YSwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm4gcnBjIHJvb3QgdXJsXG4gICAgICovXG4gICAgZ2V0UnBjVXJsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBWb3RpbmcgcGVyaW9kIG9mIGN1cnJlbnQgYmxvY2suXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBnZXRDdXJyZW50UGVyaW9kKCkgd2lsbCBkZWZhdWx0IHRvIGN1cnJlbnQgdm90aW5nIHBlcmlvZCBmb3IgL21haW4vY2hhaW5zL2Jsb2NrL2hlYWQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtY3VycmVudC1wZXJpb2RcbiAgICAgKi9cbiAgICBnZXRDdXJyZW50UGVyaW9kKHsgYmxvY2ssIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQ1VSUkVOVF9QRVJJT0QsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0Q3VycmVudFBlcmlvZCh7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBWb3RpbmcgcGVyaW9kIG9mIG5leHQgYmxvY2suXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBnZXRTdWNjZXNzb3JQZXJpb2QoKSB3aWxsIGRlZmF1bHQgdG8gc3VjY2Vzc29yIHZvdGluZyBwZXJpb2QgZm9yIC9tYWluL2NoYWlucy9ibG9jay9oZWFkLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLXN1Y2Nlc3Nvci1wZXJpb2RcbiAgICAgKi9cbiAgICBnZXRTdWNjZXNzb3JQZXJpb2QoeyBibG9jaywgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9TVUNDRVNTT1JfUEVSSU9ELCBbYmxvY2tdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFN1Y2Nlc3NvclBlcmlvZCh7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIFNhcGxpbmcgc3RhdGUgSURcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEgc2FwbGluZyBzdGF0ZSBJRC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYWN0aXZlL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LXNhcGxpbmctc2FwbGluZy1zdGF0ZS1pZC1nZXQtZGlmZlxuICAgICAqL1xuICAgIGdldFNhcGxpbmdEaWZmQnlJZChpZCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1NBUExJTkdfRElGRl9CWV9JRCwgW2Jsb2NrLCBpZF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0U2FwbGluZ0RpZmZCeUlkKGlkLCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IHdlIHdhbnQgdG8gZ2V0IHRoZSBzYXBsaW5nIGRpZmZcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEgc2FwbGluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYWN0aXZlL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZC1zaW5nbGUtc2FwbGluZy1nZXQtZGlmZlxuICAgICAqL1xuICAgIGdldFNhcGxpbmdEaWZmQnlDb250cmFjdChjb250cmFjdCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1NBUExJTkdfRElGRl9CWV9DT05UUkFDVCwgW2Jsb2NrLCBjb250cmFjdF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0U2FwbGluZ0RpZmZCeUNvbnRyYWN0KGNvbnRyYWN0LCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFByb3RvY29scyh7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfUFJPVE9DT0xTLCBbXG4gICAgICAgICAgICAgICAgYmxvY2ssXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFByb3RvY29scyh7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFR4Um9sbHVwU3RhdGUodHhSb2xsdXBJZCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1RYX1JPTExVUF9TVEFURSwgW1xuICAgICAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgICAgIHR4Um9sbHVwSWQsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFR4Um9sbHVwU3RhdGUodHhSb2xsdXBJZCwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRUeFJvbGx1cEluYm94KHR4Um9sbHVwSWQsIGJsb2NrTGV2ZWwsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9UWF9ST0xMVVBfSU5CT1gsIFtcbiAgICAgICAgICAgICAgICBibG9jayxcbiAgICAgICAgICAgICAgICB0eFJvbGx1cElkLFxuICAgICAgICAgICAgICAgIGJsb2NrTGV2ZWwsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFR4Um9sbHVwSW5ib3godHhSb2xsdXBJZCwgYmxvY2tMZXZlbCwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB3ZSB3YW50IHRvIHJldHJpZXZlIHN0b3JhZ2UgaW5mb3JtYXRpb24gb2ZcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgYW1vdW50IG9mIHVzZWQgc3BhY2UgdXNlZCBpbiBhIGNvbnRyYWN0J3Mgc3RvcmFnZVxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9saW1hL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZC1zdG9yYWdlXG4gICAgICovXG4gICAgZ2V0U3RvcmFnZVVzZWRTcGFjZShjb250cmFjdCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZm9ybWF0Q2FjaGVLZXkodGhpcy5ycGNDbGllbnQuZ2V0UnBjVXJsKCksIFJQQ01ldGhvZE5hbWUuR0VUX1NUT1JBR0VfVVNFRF9TUEFDRSwgW2Jsb2NrLCBjb250cmFjdF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0U3RvcmFnZVVzZWRTcGFjZShjb250cmFjdCwgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB3ZSB3YW50IHRvIHJldHJpZXZlIHN0b3JhZ2UgaW5mb3JtYXRpb24gb2ZcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgYW1vdW50IG9mIHBhaWQgc3BhY2UgaW4gYSBjb250cmFjdCdzIHN0b3JhZ2VcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vbGltYS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtc3RvcmFnZVxuICAgICAqL1xuICAgIGdldFN0b3JhZ2VQYWlkU3BhY2UoY29udHJhY3QsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmZvcm1hdENhY2hlS2V5KHRoaXMucnBjQ2xpZW50LmdldFJwY1VybCgpLCBSUENNZXRob2ROYW1lLkdFVF9TVE9SQUdFX1BBSURfU1BBQ0UsIFtibG9jaywgY29udHJhY3RdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucnBjQ2xpZW50LmdldFN0b3JhZ2VQYWlkU3BhY2UoY29udHJhY3QsIHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udHJhY3QgYWRkcmVzcyBvZiB0aGUgY29udHJhY3Qgd2Ugd2FudCB0byByZXRyaWV2ZSB0aWNrZXQgYmFsYW5jZSBvZlxuICAgICAqIEBwYXJhbSB0aWNrZXQgVGlja2V0IHRva2VuIHBhcmFtZXRlciBvYmplY3QgdGhhdCBjb250YWlucyB0aWNrZXRlciwgY29udGVudCB0eXBlLCBhbmQgY29udGVudFxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgY29udHJhY3QncyBiYWxhbmNlIG9mIHRpY2tldCB3aXRoIHNwZWNpZmllZCB0aWNrZXRlciwgY29udGVudCB0eXBlLCBhbmQgY29udGVudC5cbiAgICAgKiBAZXhhbXBsZSB0aWNrZXR7IHRpY2tldGVyOiAnYWRkcmVzcycsIGNvbnRlbnRfdHlwZTogeyBwcmltOiBcInN0cmluZ1wiIH0sIGNvbnRlbnQ6IHsgc3RyaW5nOiAndGlja2V0MScgfSB9XG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9wcm90b2NvbHMvMDE2X211bWJhaS5odG1sI3JwYy1jaGFuZ2VzXG4gICAgICovXG4gICAgZ2V0VGlja2V0QmFsYW5jZShjb250cmFjdCwgdGlja2V0LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfVElDS0VUX0JBTEFOQ0UsIFtibG9jaywgY29udHJhY3RdLCB0aWNrZXQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0VGlja2V0QmFsYW5jZShjb250cmFjdCwgdGlja2V0LCB7IGJsb2NrIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHV0KGtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IHRvIHJldHJpZXZlIGFsbCB0aWNrZXQgYmFsYW5jZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgY29tcGxldGUgbGlzdCBvZiB0aWNrZXRzIG93bmVkIGJ5IHRoZSBnaXZlbiBjb250cmFjdCBieSBzY2FubmluZyB0aGUgY29udHJhY3QncyBzdG9yYWdlLlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vcHJvdG9jb2xzLzAxNl9tdW1iYWkuaHRtbCNycGMtY2hhbmdlc1xuICAgICAqL1xuICAgIGdldEFsbFRpY2tldEJhbGFuY2VzKGNvbnRyYWN0LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfQUxMX1RJQ0tFVF9CQUxBTkNFUywgW2Jsb2NrLCBjb250cmFjdF0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0QWxsVGlja2V0QmFsYW5jZXMoY29udHJhY3QsIHsgYmxvY2sgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIExpc3QgdGhlIHByZXZhbGlkYXRlZCBvcGVyYXRpb25zIGluIG1lbXBvb2wgKGFjY2Vzc2liaWxpdHkgb2YgbWVtcG9vbCBkZXBlbmRzIG9uIGVhY2ggcnBjIGVuZHBvaW50KVxuICAgICAqIEBwYXJhbSBhcmdzIGhhcyA1IG9wdGlvbmFsIHByb3BlcnRpZXMuIFdlIHN1cHBvcnQgdmVyc2lvbiAxIHdpdGggbmV3IGVuY29kaW5nIGFzIHZlcnNpb24gMCB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbi4gVGhlIHJlc3Qgb2YgdGhlIHByb3BlcnRpZXMgaXMgdG8gZmlsdGVyIHBlbmRpbmcgb3BlcmF0aW9ucyByZXNwb25zZVxuICAgICAqIEBkZWZhdWx0IGFyZ3MgeyB2ZXJzaW9uOiAnMScsIGFwcGxpZWQ6IHRydWUsIHJlZnVzZWQ6IHRydWUsIG91dGRhdGVkLCB0cnVlLCBicmFuY2hSZWZ1c2VkOiB0cnVlLCBicmFuY2hEZWxheWVkOiB0cnVlLCB2YWxpZGF0aW9uUGFzczogdW5kZWZpbmVkIH1cbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL0NIQU5HRVMuaHRtbD9oaWdobGlnaHQ9cGVuZGluZ19vcGVyYXRpb25zI2lkNFxuICAgICAqL1xuICAgIGdldFBlbmRpbmdPcGVyYXRpb25zKGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfUEVORElOR19PUEVSQVRJT05TLCBbYXJnc10pO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5ycGNDbGllbnQuZ2V0UGVuZGluZ09wZXJhdGlvbnMoYXJncyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoa2V5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIGNvbnRhaW5zIHRoZSBQVk0ga2luZCBhbmQga2VybmVsIHRvIGdlbmVyYXRlIHRoZSBvcmlnaW5hdGlvbiBwcm9vZiBmcm9tXG4gICAgICogQGRlc2NyaXB0aW9uIHJwYyBjYWxsIHRvIGdlbmVyYXRlIHRoZSBvcmlnaW5hdGlvbiBwcm9vZiBuZWVkZWQgZm9yIHRoZSBzbWFydCByb2xsdXAgb3JpZ2luYXRlIG9wZXJhdGlvblxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vcHJvdG9jb2xzLzAxNl9tdW1iYWkuaHRtbCNycGMtY2hhbmdlc1xuICAgICAqL1xuICAgIGdldE9yaWdpbmF0aW9uUHJvb2YocGFyYW1zLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5mb3JtYXRDYWNoZUtleSh0aGlzLnJwY0NsaWVudC5nZXRScGNVcmwoKSwgUlBDTWV0aG9kTmFtZS5HRVRfT1JJR0lOQVRJT05fUFJPT0YsIFtibG9jaywgcGFyYW1zXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnJwY0NsaWVudC5nZXRPcmlnaW5hdGlvblByb29mKHBhcmFtcywgeyBibG9jayB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1dChrZXksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxudmFyIE9QRVJBVElPTl9NRVRBREFUQTtcbihmdW5jdGlvbiAoT1BFUkFUSU9OX01FVEFEQVRBKSB7XG4gICAgT1BFUkFUSU9OX01FVEFEQVRBW1wiVE9PX0xBUkdFXCJdID0gXCJ0b28gbGFyZ2VcIjtcbn0pKE9QRVJBVElPTl9NRVRBREFUQSB8fCAoT1BFUkFUSU9OX01FVEFEQVRBID0ge30pKTtcbnZhciBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUlk7XG4oZnVuY3Rpb24gKE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWSkge1xuICAgIE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWVtcIkJBS0lOR19SRVdBUkRTXCJdID0gXCJiYWtpbmcgcmV3YXJkc1wiO1xuICAgIE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWVtcIlJFV0FSRFNcIl0gPSBcInJld2FyZHNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJGRUVTXCJdID0gXCJmZWVzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiREVQT1NJVFNcIl0gPSBcImRlcG9zaXRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiTEVHQUNZX1JFV0FSRFNcIl0gPSBcImxlZ2FjeV9yZXdhcmRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiTEVHQUNZX0ZFRVNcIl0gPSBcImxlZ2FjeV9mZWVzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiTEVHQUNZX0RFUE9TSVRTXCJdID0gXCJsZWdhY3lfZGVwb3NpdHNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJCTE9DS19GRUVTXCJdID0gXCJibG9jayBmZWVzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiTk9OQ0VfUkVWRUxBVElPTl9SRVdBUkRTXCJdID0gXCJub25jZSByZXZlbGF0aW9uIHJld2FyZHNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJET1VCTEVfU0lHTklOR19FVklERU5DRV9SRVdBUkRTXCJdID0gXCJkb3VibGUgc2lnbmluZyBldmlkZW5jZSByZXdhcmRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiRU5ET1JTSU5HX1JFV0FSRFNcIl0gPSBcImVuZG9yc2luZyByZXdhcmRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiQkFLSU5HX0JPTlVTRVNcIl0gPSBcImJha2luZyBib251c2VzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiU1RPUkFHRV9GRUVTXCJdID0gXCJzdG9yYWdlIGZlZXNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJQVU5JU0hNRU5UU1wiXSA9IFwicHVuaXNobWVudHNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJMT1NUX0VORE9SU0lOR19SRVdBUkRTXCJdID0gXCJsb3N0IGVuZG9yc2luZyByZXdhcmRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiU1VCU0lEWVwiXSA9IFwic3Vic2lkeVwiO1xuICAgIE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWVtcIkJVUk5FRFwiXSA9IFwiYnVybmVkXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiQ09NTUlUTUVOVFwiXSA9IFwiY29tbWl0bWVudFwiO1xuICAgIE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWVtcIkJPT1RTVFJBUFwiXSA9IFwiYm9vdHN0cmFwXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiSU5WT0lDRVwiXSA9IFwiaW52b2ljZVwiO1xuICAgIE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWVtcIk1JTlRFRFwiXSA9IFwibWludGVkXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiVFhfUk9MTFVQX1JFSkVDVElPTl9SRVdBUkRTXCJdID0gXCJ0eF9yb2xsdXBfcmVqZWN0aW9uX3Jld2FyZHNcIjtcbiAgICBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUllbXCJUWF9ST0xMVVBfUkVKRUNUSU9OX1BVTklTSE1FTlRTXCJdID0gXCJ0eF9yb2xsdXBfcmVqZWN0aW9uX3B1bmlzaG1lbnRzXCI7XG4gICAgTUVUQURBVEFfQkFMQU5DRV9VUERBVEVTX0NBVEVHT1JZW1wiQk9ORFNcIl0gPSBcImJvbmRzXCI7XG59KShNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUlkgfHwgKE1FVEFEQVRBX0JBTEFOQ0VfVVBEQVRFU19DQVRFR09SWSA9IHt9KSk7XG52YXIgUHZtS2luZDtcbihmdW5jdGlvbiAoUHZtS2luZCkge1xuICAgIFB2bUtpbmRbXCJXQVNNMlwiXSA9IFwid2FzbV8yXzBfMFwiO1xuICAgIFB2bUtpbmRbXCJBUklUSFwiXSA9IFwiYXJpdGhcIjtcbn0pKFB2bUtpbmQgfHwgKFB2bUtpbmQgPSB7fSkpO1xudmFyIFNtYXJ0Um9sbHVwUmVmdXRhdGlvbk9wdGlvbnM7XG4oZnVuY3Rpb24gKFNtYXJ0Um9sbHVwUmVmdXRhdGlvbk9wdGlvbnMpIHtcbiAgICBTbWFydFJvbGx1cFJlZnV0YXRpb25PcHRpb25zW1wiU1RBUlRcIl0gPSBcInN0YXJ0XCI7XG4gICAgU21hcnRSb2xsdXBSZWZ1dGF0aW9uT3B0aW9uc1tcIk1PVkVcIl0gPSBcIm1vdmVcIjtcbn0pKFNtYXJ0Um9sbHVwUmVmdXRhdGlvbk9wdGlvbnMgfHwgKFNtYXJ0Um9sbHVwUmVmdXRhdGlvbk9wdGlvbnMgPSB7fSkpO1xudmFyIFNtYXJ0Um9sbHVwSW5wdXRQcm9vZktpbmQ7XG4oZnVuY3Rpb24gKFNtYXJ0Um9sbHVwSW5wdXRQcm9vZktpbmQpIHtcbiAgICBTbWFydFJvbGx1cElucHV0UHJvb2ZLaW5kW1wiSU5CT1hfUFJPT0ZcIl0gPSBcImluYm94X3Byb29mXCI7XG4gICAgU21hcnRSb2xsdXBJbnB1dFByb29mS2luZFtcIlJFVkVBTF9QUk9PRlwiXSA9IFwicmV2ZWFsX3Byb29mXCI7XG4gICAgU21hcnRSb2xsdXBJbnB1dFByb29mS2luZFtcIkZJUlNUX0lOUFVUXCJdID0gXCJmaXJzdF9pbnB1dFwiO1xufSkoU21hcnRSb2xsdXBJbnB1dFByb29mS2luZCB8fCAoU21hcnRSb2xsdXBJbnB1dFByb29mS2luZCA9IHt9KSk7XG52YXIgU21hcnRSb2xsdXBSZWZ1dGVSZXZlYWxQcm9vZktpbmQ7XG4oZnVuY3Rpb24gKFNtYXJ0Um9sbHVwUmVmdXRlUmV2ZWFsUHJvb2ZLaW5kKSB7XG4gICAgU21hcnRSb2xsdXBSZWZ1dGVSZXZlYWxQcm9vZktpbmRbXCJSQVdfREFUQV9QUk9PRlwiXSA9IFwicmF3X2RhdGFfcHJvb2ZcIjtcbiAgICBTbWFydFJvbGx1cFJlZnV0ZVJldmVhbFByb29mS2luZFtcIk1FVEFEQVRBX1BST09GXCJdID0gXCJtZXRhZGF0YV9wcm9vZlwiO1xuICAgIFNtYXJ0Um9sbHVwUmVmdXRlUmV2ZWFsUHJvb2ZLaW5kW1wiREFMX1BBR0VfUFJPT0ZcIl0gPSBcImRhbF9wYWdlX3Byb29mXCI7XG59KShTbWFydFJvbGx1cFJlZnV0ZVJldmVhbFByb29mS2luZCB8fCAoU21hcnRSb2xsdXBSZWZ1dGVSZXZlYWxQcm9vZktpbmQgPSB7fSkpO1xudmFyIFNtYXJ0Um9sbHVwUmVmdXRlR2FtZVN0YXR1c09wdGlvbnM7XG4oZnVuY3Rpb24gKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZVN0YXR1c09wdGlvbnMpIHtcbiAgICBTbWFydFJvbGx1cFJlZnV0ZUdhbWVTdGF0dXNPcHRpb25zW1wiT05HT0lOR1wiXSA9IFwib25nb2luZ1wiO1xuICAgIFNtYXJ0Um9sbHVwUmVmdXRlR2FtZVN0YXR1c09wdGlvbnNbXCJFTkRFRFwiXSA9IFwiZW5kZWRcIjtcbn0pKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZVN0YXR1c09wdGlvbnMgfHwgKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZVN0YXR1c09wdGlvbnMgPSB7fSkpO1xudmFyIFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUGxheWVyT3V0Y29tZXM7XG4oZnVuY3Rpb24gKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUGxheWVyT3V0Y29tZXMpIHtcbiAgICBTbWFydFJvbGx1cFJlZnV0ZUdhbWVFbmRlZFBsYXllck91dGNvbWVzW1wiTE9TRVJcIl0gPSBcImxvc2VyXCI7XG4gICAgU21hcnRSb2xsdXBSZWZ1dGVHYW1lRW5kZWRQbGF5ZXJPdXRjb21lc1tcIkRSQVdcIl0gPSBcImRyYXdcIjtcbn0pKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUGxheWVyT3V0Y29tZXMgfHwgKFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUGxheWVyT3V0Y29tZXMgPSB7fSkpO1xudmFyIFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUmVhc29uO1xuKGZ1bmN0aW9uIChTbWFydFJvbGx1cFJlZnV0ZUdhbWVFbmRlZFJlYXNvbikge1xuICAgIFNtYXJ0Um9sbHVwUmVmdXRlR2FtZUVuZGVkUmVhc29uW1wiQ09ORkxJQ1RfUkVTT0xWRURcIl0gPSBcImNvbmZsaWN0X3Jlc29sdmVkXCI7XG4gICAgU21hcnRSb2xsdXBSZWZ1dGVHYW1lRW5kZWRSZWFzb25bXCJUSU1FT1VUXCJdID0gXCJ0aW1lb3V0XCI7XG59KShTbWFydFJvbGx1cFJlZnV0ZUdhbWVFbmRlZFJlYXNvbiB8fCAoU21hcnRSb2xsdXBSZWZ1dGVHYW1lRW5kZWRSZWFzb24gPSB7fSkpO1xuXG52YXIgT3BLaW5kO1xuKGZ1bmN0aW9uIChPcEtpbmQpIHtcbiAgICBPcEtpbmRbXCJPUklHSU5BVElPTlwiXSA9IFwib3JpZ2luYXRpb25cIjtcbiAgICBPcEtpbmRbXCJERUxFR0FUSU9OXCJdID0gXCJkZWxlZ2F0aW9uXCI7XG4gICAgT3BLaW5kW1wiUkVWRUFMXCJdID0gXCJyZXZlYWxcIjtcbiAgICBPcEtpbmRbXCJUUkFOU0FDVElPTlwiXSA9IFwidHJhbnNhY3Rpb25cIjtcbiAgICBPcEtpbmRbXCJBQ1RJVkFUSU9OXCJdID0gXCJhY3RpdmF0ZV9hY2NvdW50XCI7XG4gICAgT3BLaW5kW1wiRU5ET1JTRU1FTlRcIl0gPSBcImVuZG9yc2VtZW50XCI7XG4gICAgT3BLaW5kW1wiUFJFRU5ET1JTRU1FTlRcIl0gPSBcInByZWVuZG9yc2VtZW50XCI7XG4gICAgT3BLaW5kW1wiU0VUX0RFUE9TSVRTX0xJTUlUXCJdID0gXCJzZXRfZGVwb3NpdHNfbGltaXRcIjtcbiAgICBPcEtpbmRbXCJET1VCTEVfUFJFRU5ET1JTRU1FTlRfRVZJREVOQ0VcIl0gPSBcImRvdWJsZV9wcmVlbmRvcnNlbWVudF9ldmlkZW5jZVwiO1xuICAgIE9wS2luZFtcIkVORE9SU0VNRU5UX1dJVEhfU0xPVFwiXSA9IFwiZW5kb3JzZW1lbnRfd2l0aF9zbG90XCI7XG4gICAgT3BLaW5kW1wiU0VFRF9OT05DRV9SRVZFTEFUSU9OXCJdID0gXCJzZWVkX25vbmNlX3JldmVsYXRpb25cIjtcbiAgICBPcEtpbmRbXCJET1VCTEVfRU5ET1JTRU1FTlRfRVZJREVOQ0VcIl0gPSBcImRvdWJsZV9lbmRvcnNlbWVudF9ldmlkZW5jZVwiO1xuICAgIE9wS2luZFtcIkRPVUJMRV9CQUtJTkdfRVZJREVOQ0VcIl0gPSBcImRvdWJsZV9iYWtpbmdfZXZpZGVuY2VcIjtcbiAgICBPcEtpbmRbXCJQUk9QT1NBTFNcIl0gPSBcInByb3Bvc2Fsc1wiO1xuICAgIE9wS2luZFtcIkJBTExPVFwiXSA9IFwiYmFsbG90XCI7XG4gICAgT3BLaW5kW1wiRkFJTElOR19OT09QXCJdID0gXCJmYWlsaW5nX25vb3BcIjtcbiAgICBPcEtpbmRbXCJSRUdJU1RFUl9HTE9CQUxfQ09OU1RBTlRcIl0gPSBcInJlZ2lzdGVyX2dsb2JhbF9jb25zdGFudFwiO1xuICAgIE9wS2luZFtcIlRYX1JPTExVUF9PUklHSU5BVElPTlwiXSA9IFwidHhfcm9sbHVwX29yaWdpbmF0aW9uXCI7XG4gICAgT3BLaW5kW1wiVFhfUk9MTFVQX1NVQk1JVF9CQVRDSFwiXSA9IFwidHhfcm9sbHVwX3N1Ym1pdF9iYXRjaFwiO1xuICAgIE9wS2luZFtcIlRYX1JPTExVUF9DT01NSVRcIl0gPSBcInR4X3JvbGx1cF9jb21taXRcIjtcbiAgICBPcEtpbmRbXCJUWF9ST0xMVVBfUkVUVVJOX0JPTkRcIl0gPSBcInR4X3JvbGx1cF9yZXR1cm5fYm9uZFwiO1xuICAgIE9wS2luZFtcIlRYX1JPTExVUF9GSU5BTElaRV9DT01NSVRNRU5UXCJdID0gXCJ0eF9yb2xsdXBfZmluYWxpemVfY29tbWl0bWVudFwiO1xuICAgIE9wS2luZFtcIlRYX1JPTExVUF9SRU1PVkVfQ09NTUlUTUVOVFwiXSA9IFwidHhfcm9sbHVwX3JlbW92ZV9jb21taXRtZW50XCI7XG4gICAgT3BLaW5kW1wiVFhfUk9MTFVQX1JFSkVDVElPTlwiXSA9IFwidHhfcm9sbHVwX3JlamVjdGlvblwiO1xuICAgIE9wS2luZFtcIlRYX1JPTExVUF9ESVNQQVRDSF9USUNLRVRTXCJdID0gXCJ0eF9yb2xsdXBfZGlzcGF0Y2hfdGlja2V0c1wiO1xuICAgIE9wS2luZFtcIlRSQU5TRkVSX1RJQ0tFVFwiXSA9IFwidHJhbnNmZXJfdGlja2V0XCI7XG4gICAgT3BLaW5kW1wiSU5DUkVBU0VfUEFJRF9TVE9SQUdFXCJdID0gXCJpbmNyZWFzZV9wYWlkX3N0b3JhZ2VcIjtcbiAgICBPcEtpbmRbXCJVUERBVEVfQ09OU0VOU1VTX0tFWVwiXSA9IFwidXBkYXRlX2NvbnNlbnN1c19rZXlcIjtcbiAgICBPcEtpbmRbXCJEUkFJTl9ERUxFR0FURVwiXSA9IFwiZHJhaW5fZGVsZWdhdGVcIjtcbiAgICBPcEtpbmRbXCJWREZfUkVWRUxBVElPTlwiXSA9IFwidmRmX3JldmVsYXRpb25cIjtcbiAgICBPcEtpbmRbXCJFVkVOVFwiXSA9IFwiZXZlbnRcIjtcbiAgICBPcEtpbmRbXCJUSUNLRVRfVVBEQVRFU1wiXSA9IFwidGlja2V0X3VwZGF0ZXNcIjtcbiAgICBPcEtpbmRbXCJTTUFSVF9ST0xMVVBfT1JJR0lOQVRFXCJdID0gXCJzbWFydF9yb2xsdXBfb3JpZ2luYXRlXCI7XG4gICAgT3BLaW5kW1wiU01BUlRfUk9MTFVQX0FERF9NRVNTQUdFU1wiXSA9IFwic21hcnRfcm9sbHVwX2FkZF9tZXNzYWdlc1wiO1xuICAgIE9wS2luZFtcIlNNQVJUX1JPTExVUF9FWEVDVVRFX09VVEJPWF9NRVNTQUdFXCJdID0gXCJzbWFydF9yb2xsdXBfZXhlY3V0ZV9vdXRib3hfbWVzc2FnZVwiO1xuICAgIE9wS2luZFtcIlNNQVJUX1JPTExVUF9QVUJMSVNIXCJdID0gXCJzbWFydF9yb2xsdXBfcHVibGlzaFwiO1xuICAgIE9wS2luZFtcIlNNQVJUX1JPTExVUF9DRU1FTlRcIl0gPSBcInNtYXJ0X3JvbGx1cF9jZW1lbnRcIjtcbiAgICBPcEtpbmRbXCJTTUFSVF9ST0xMVVBfUkVDT1ZFUl9CT05EXCJdID0gXCJzbWFydF9yb2xsdXBfcmVjb3Zlcl9ib25kXCI7XG4gICAgT3BLaW5kW1wiU01BUlRfUk9MTFVQX1JFRlVURVwiXSA9IFwic21hcnRfcm9sbHVwX3JlZnV0ZVwiO1xuICAgIE9wS2luZFtcIlNNQVJUX1JPTExVUF9USU1FT1VUXCJdID0gXCJzbWFydF9yb2xsdXBfdGltZW91dFwiO1xufSkoT3BLaW5kIHx8IChPcEtpbmQgPSB7fSkpO1xuXG4vLyBJTVBPUlRBTlQ6IFRISVMgRklMRSBJUyBBVVRPIEdFTkVSQVRFRCEgRE8gTk9UIE1BTlVBTExZIEVESVQgT1IgQ0hFQ0tJTiFcbmNvbnN0IFZFUlNJT04gPSB7XG4gICAgXCJjb21taXRIYXNoXCI6IFwiNDZhNTM1ZWVhNzhkNzdlYmI1NTA5Y2NkMWQxY2JkMDEwNzVjNzQ2MVwiLFxuICAgIFwidmVyc2lvblwiOiBcIjE3LjUuMlwiXG59O1xuXG4vKioqXG4gKiBAZGVzY3JpcHRpb24gUnBjQ2xpZW50IGFsbG93cyBpbnRlcmFjdGlvbiB3aXRoIFRlem9zIG5ldHdvcmsgdGhyb3VnaCBhbiBycGMgbm9kZVxuICovXG5jbGFzcyBScGNDbGllbnQge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCBycGMgcm9vdCB1cmxcbiAgICAgKiBAcGFyYW0gY2hhaW4gY2hhaW4gKGRlZmF1bHQgbWFpbilcbiAgICAgKiBAcGFyYW0gaHR0cEJhY2tlbmQgSHR0cCBiYWNrZW5kIHRoYXQgaXNzdWUgaHR0cCByZXF1ZXN0LlxuICAgICAqIFlvdSBjYW4gb3ZlcnJpZGUgaXQgYnkgcHJvdmlkaW5nIHlvdXIgb3duIGlmIHlvdSB3aGljaCB0byBob29rIGluIHRoZSByZXF1ZXN0L3Jlc3BvbnNlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBuZXcgUnBjQ2xpZW50KCdodHRwczovL21haW5uZXQuZWNhZGluZnJhLmNvbS8nLCAnbWFpbicpIHRoaXMgd2lsbCB1c2UgaHR0cHM6Ly9tYWlubmV0LmVjYWRpbmZyYS5jb20vL2NoYWlucy9tYWluXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJsLCBjaGFpbiA9IGRlZmF1bHRDaGFpbiwgaHR0cEJhY2tlbmQgPSBuZXcgSHR0cEJhY2tlbmQoKSkge1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5jaGFpbiA9IGNoYWluO1xuICAgICAgICB0aGlzLmh0dHBCYWNrZW5kID0gaHR0cEJhY2tlbmQ7XG4gICAgfVxuICAgIGNyZWF0ZVVSTChwYXRoKSB7XG4gICAgICAgIC8vIFRyaW0gdHJhaWxpbmcgc2xhc2hlcyBiZWNhdXNlIGl0IGlzIGFzc3VtZWQgdG8gYmUgaW5jbHVkZWQgaW4gcGF0aFxuICAgICAgICAvLyB0aGUgcmVnZXggc29sdXRpb24gaXMgcHJvbmUgdG8gUmVEb1MuIFBsZWFzZSBzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY2ODA4MjUvcmV0dXJuLXN0cmluZy13aXRob3V0LXRyYWlsaW5nLXNsYXNoI2NvbW1lbnQxMjQzMDY2OThfNjY4MDg3N1xuICAgICAgICAvLyBXZSBhbHNvIGdvdCBhIENvZGVRTCBlcnJvciBmb3IgdGhlIHJlZ2V4IGJhc2VkIHNvbHV0aW9uXG4gICAgICAgIGxldCByb290VXJsID0gdGhpcy51cmw7XG4gICAgICAgIHdoaWxlIChyb290VXJsLmVuZHNXaXRoKCcvJykpIHtcbiAgICAgICAgICAgIHJvb3RVcmwgPSByb290VXJsLnNsaWNlKDAsIC0xKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7cm9vdFVybH0ke3BhdGh9YDtcbiAgICB9XG4gICAgdmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAgICAgY29uc3QgYWRkcmVzc1ZhbGlkYXRpb24gPSB2YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgIGlmIChhZGRyZXNzVmFsaWRhdGlvbiAhPT0gVmFsaWRhdGlvblJlc3VsdC5WQUxJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBZGRyZXNzRXJyb3IoYWRkcmVzcywgaW52YWxpZERldGFpbChhZGRyZXNzVmFsaWRhdGlvbikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbGlkYXRlQ29udHJhY3QoYWRkcmVzcykge1xuICAgICAgICBjb25zdCBhZGRyZXNzVmFsaWRhdGlvbiA9IHZhbGlkYXRlQ29udHJhY3RBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICBpZiAoYWRkcmVzc1ZhbGlkYXRpb24gIT09IFZhbGlkYXRpb25SZXN1bHQuVkFMSUQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29udHJhY3RBZGRyZXNzRXJyb3IoYWRkcmVzcywgaW52YWxpZERldGFpbChhZGRyZXNzVmFsaWRhdGlvbikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIGJsb2NrJ3MgaGFzaCwgaXRzIHVuaXF1ZSBpZGVudGlmaWVyLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWhhc2hcbiAgICAgKi9cbiAgICBnZXRCbG9ja0hhc2goeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vaGFzaGApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIExpc3QgdGhlIGFuY2VzdG9ycyBvZiB0aGUgZ2l2ZW4gYmxvY2sgd2hpY2gsIGlmIHJlZmVycmVkIHRvIGFzIHRoZSBicmFuY2ggaW4gYW4gb3BlcmF0aW9uIGhlYWRlciwgYXJlIHJlY2VudCBlbm91Z2ggZm9yIHRoYXQgb3BlcmF0aW9uIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBjdXJyZW50IGJsb2NrLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWxpdmUtYmxvY2tzXG4gICAgICovXG4gICAgZ2V0TGl2ZUJsb2Nrcyh7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgYmxvY2tzID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2xpdmVfYmxvY2tzYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrcztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmUgdGhlIGJhbGFuY2VcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgYmFsYW5jZSBvZiBhIGNvbnRyYWN0LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWJhbGFuY2VcbiAgICAgKi9cbiAgICBnZXRCYWxhbmNlKGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIGNvbnN0IGJhbGFuY2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9jb250cmFjdHMvJHthZGRyZXNzfS9iYWxhbmNlYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoYmFsYW5jZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBzdG9yYWdlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIGRhdGEgb2YgdGhlIGNvbnRyYWN0LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLXN0b3JhZ2VcbiAgICAgKi9cbiAgICBnZXRTdG9yYWdlKGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQ29udHJhY3QoYWRkcmVzcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvY29udHJhY3RzLyR7YWRkcmVzc30vc3RvcmFnZWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgY29udHJhY3QgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmUgdGhlIHNjcmlwdFxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQWNjZXNzIHRoZSBjb2RlIGFuZCBkYXRhIG9mIHRoZSBjb250cmFjdC5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZC1zY3JpcHRcbiAgICAgKi9cbiAgICBnZXRTY3JpcHQoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVDb250cmFjdChhZGRyZXNzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9jb250cmFjdHMvJHthZGRyZXNzfS9zY3JpcHRgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBzY3JpcHRcbiAgICAgKiBAcGFyYW0gdW5wYXJzaW5nTW9kZSBkZWZhdWx0IGlzIHsgdW5wYXJzaW5nX21vZGU6IFwiUmVhZGFibGVcIiB9XG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIHNjcmlwdCBvZiB0aGUgY29udHJhY3QgYW5kIG5vcm1hbGl6ZSBpdCB1c2luZyB0aGUgcmVxdWVzdGVkIHVucGFyc2luZyBtb2RlLlxuICAgICAqXG4gICAgICovXG4gICAgZ2V0Tm9ybWFsaXplZFNjcmlwdChhZGRyZXNzLCB1bnBhcnNpbmdNb2RlID0geyB1bnBhcnNpbmdfbW9kZTogJ1JlYWRhYmxlJyB9LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUNvbnRyYWN0KGFkZHJlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnRyYWN0cy8ke2FkZHJlc3N9L3NjcmlwdC9ub3JtYWxpemVkYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCB1bnBhcnNpbmdNb2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgY29udHJhY3QgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgY29tcGxldGUgc3RhdHVzIG9mIGEgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWRcbiAgICAgKi9cbiAgICBnZXRDb250cmFjdChhZGRyZXNzLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBjb25zdCBjb250cmFjdFJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvY29udHJhY3RzLyR7YWRkcmVzc31gKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb250cmFjdFJlc3BvbnNlKSwgeyBiYWxhbmNlOiBuZXcgQmlnTnVtYmVyKGNvbnRyYWN0UmVzcG9uc2UuYmFsYW5jZSkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGNvbnRyYWN0IGFkZHJlc3MgZnJvbSB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlIHRoZSBtYW5hZ2VyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIG1hbmFnZXIga2V5IG9mIGEgY29udHJhY3QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtbWFuYWdlci1rZXlcbiAgICAgKi9cbiAgICBnZXRNYW5hZ2VyS2V5KGFkZHJlc3MsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlQWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9jb250cmFjdHMvJHthZGRyZXNzfS9tYW5hZ2VyX2tleWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgY29udHJhY3QgYWRkcmVzcyBmcm9tIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmUgdGhlIGRlbGVnYXRlIChiYWtlcilcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgZGVsZWdhdGUgb2YgYSBjb250cmFjdCwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWRlbGVnYXRlXG4gICAgICovXG4gICAgZ2V0RGVsZWdhdGUoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgbGV0IGRlbGVnYXRlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWxlZ2F0ZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9jb250cmFjdHMvJHthZGRyZXNzfS9kZWxlZ2F0ZWApLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlRXJyb3IgJiYgZXguc3RhdHVzID09PSBTVEFUVVNfQ09ERS5OT1RfRk9VTkQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBjb250cmFjdCBhZGRyZXNzIGZyb20gd2hpY2ggd2Ugd2FudCB0byByZXRyaWV2ZSB0aGUgYmlnIG1hcCBrZXlcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEga2V5IGluIHRoZSBiaWcgbWFwIHN0b3JhZ2Ugb2YgdGhlIGNvbnRyYWN0LlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBnZXRCaWdNYXBLZXlCeUlEXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWJpZy1tYXAtZ2V0XG4gICAgICovXG4gICAgZ2V0QmlnTWFwS2V5KGFkZHJlc3MsIGtleSwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnRyYWN0cy8ke2FkZHJlc3N9L2JpZ19tYXBfZ2V0YCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBrZXkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgQmlnIE1hcCBJRFxuICAgICAqIEBwYXJhbSBleHByIEV4cHJlc3Npb24gaGFzaCB0byBxdWVyeSAoQSBiNThjaGVjayBlbmNvZGVkIEJsYWtlMmIgaGFzaCBvZiB0aGUgZXhwcmVzc2lvbiAoVGhlIGV4cHJlc3Npb24gY2FuIGJlIHBhY2tlZCB1c2luZyB0aGUgcGFja19kYXRhIG1ldGhvZCkpXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhIGtleSBpbiBhIGJpZyBtYXAuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1iaWctbWFwcy1iaWctbWFwLWlkLXNjcmlwdC1leHByXG4gICAgICovXG4gICAgZ2V0QmlnTWFwRXhwcihpZCwgZXhwciwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9iaWdfbWFwcy8ke2lkfS8ke2V4cHJ9YCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBkZWxlZ2F0ZSBhZGRyZXNzIHdoaWNoIHdlIHdhbnQgdG8gcmV0cmlldmVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEZldGNoZXMgaW5mb3JtYXRpb24gYWJvdXQgYSBkZWxlZ2F0ZSBmcm9tIFJQQy5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWRlbGVnYXRlcy1wa2hcbiAgICAgKi9cbiAgICBnZXREZWxlZ2F0ZXMoYWRkcmVzcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9kZWxlZ2F0ZXMvJHthZGRyZXNzfWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNhc3RlZFJlc3BvbnNlID0gY2FzdFRvQmlnTnVtYmVyKHJlc3BvbnNlLCBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdmdWxsX2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdjdXJyZW50X2Zyb3plbl9kZXBvc2l0cycsXG4gICAgICAgICAgICAgICAgJ2Zyb3plbl9kZXBvc2l0cycsXG4gICAgICAgICAgICAgICAgJ2Zyb3plbl9iYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnZnJvemVuX2RlcG9zaXRzX2xpbWl0JyxcbiAgICAgICAgICAgICAgICAnc3Rha2luZ19iYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnZGVsZWdhdGVkX2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICd2b3RpbmdfcG93ZXInLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlKSwgY2FzdGVkUmVzcG9uc2UpLCB7IGZyb3plbl9iYWxhbmNlX2J5X2N5Y2xlOiByZXNwb25zZS5mcm96ZW5fYmFsYW5jZV9ieV9jeWNsZVxuICAgICAgICAgICAgICAgICAgICA/IHJlc3BvbnNlLmZyb3plbl9iYWxhbmNlX2J5X2N5Y2xlLm1hcCgoX2EpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB7IGRlcG9zaXQsIGRlcG9zaXRzLCBmZWVzLCByZXdhcmRzIH0gPSBfYSwgcmVzdCA9IF9fcmVzdChfYSwgW1wiZGVwb3NpdFwiLCBcImRlcG9zaXRzXCIsIFwiZmVlc1wiLCBcInJld2FyZHNcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FzdGVkVG9CaWdOdW1iZXIgPSBjYXN0VG9CaWdOdW1iZXIoeyBkZXBvc2l0LCBkZXBvc2l0cywgZmVlcywgcmV3YXJkcyB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXBvc2l0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZlZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZXdhcmRzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdCksIHsgZGVwb3NpdDogY2FzdGVkVG9CaWdOdW1iZXIuZGVwb3NpdCwgZGVwb3NpdHM6IGNhc3RlZFRvQmlnTnVtYmVyLmRlcG9zaXRzLCBmZWVzOiBjYXN0ZWRUb0JpZ051bWJlci5mZWVzLCByZXdhcmRzOiBjYXN0ZWRUb0JpZ051bWJlci5yZXdhcmRzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFkZHJlc3MgZGVsZWdhdGUgYWRkcmVzcyB3aGljaCB3ZSB3YW50IHRvIHJldHJpZXZlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXR1cm5zIHRoZSBkZWxlZ2F0ZSBpbmZvIChlLmcuIHZvdGluZyBwb3dlcikgZm91bmQgaW4gdGhlIGxpc3RpbmdzIG9mIHRoZSBjdXJyZW50IHZvdGluZyBwZXJpb2QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2thdGhtYW5kdS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1kZWxlZ2F0ZXMtcGtoLXZvdGluZy1pbmZvXG4gICAgICovXG4gICAgZ2V0Vm90aW5nSW5mbyhhZGRyZXNzLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvZGVsZWdhdGVzLyR7YWRkcmVzc30vdm90aW5nX2luZm9gKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQWxsIGNvbnN0YW50c1xuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29uc3RhbnRzXG4gICAgICovXG4gICAgZ2V0Q29uc3RhbnRzKHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnN0YW50c2ApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNhc3RlZFJlc3BvbnNlID0gY2FzdFRvQmlnTnVtYmVyKHJlc3BvbnNlLCBbXG4gICAgICAgICAgICAgICAgJ3RpbWVfYmV0d2Vlbl9ibG9ja3MnLFxuICAgICAgICAgICAgICAgICdoYXJkX2dhc19saW1pdF9wZXJfb3BlcmF0aW9uJyxcbiAgICAgICAgICAgICAgICAnaGFyZF9nYXNfbGltaXRfcGVyX2Jsb2NrJyxcbiAgICAgICAgICAgICAgICAncHJvb2Zfb2Zfd29ya190aHJlc2hvbGQnLFxuICAgICAgICAgICAgICAgICd0b2tlbnNfcGVyX3JvbGwnLFxuICAgICAgICAgICAgICAgICdzZWVkX25vbmNlX3JldmVsYXRpb25fdGlwJyxcbiAgICAgICAgICAgICAgICAnYmxvY2tfc2VjdXJpdHlfZGVwb3NpdCcsXG4gICAgICAgICAgICAgICAgJ2VuZG9yc2VtZW50X3NlY3VyaXR5X2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICdibG9ja19yZXdhcmQnLFxuICAgICAgICAgICAgICAgICdlbmRvcnNlbWVudF9yZXdhcmQnLFxuICAgICAgICAgICAgICAgICdjb3N0X3Blcl9ieXRlJyxcbiAgICAgICAgICAgICAgICAnaGFyZF9zdG9yYWdlX2xpbWl0X3Blcl9vcGVyYXRpb24nLFxuICAgICAgICAgICAgICAgICd0ZXN0X2NoYWluX2R1cmF0aW9uJyxcbiAgICAgICAgICAgICAgICAnYmFraW5nX3Jld2FyZF9wZXJfZW5kb3JzZW1lbnQnLFxuICAgICAgICAgICAgICAgICdkZWxheV9wZXJfbWlzc2luZ19lbmRvcnNlbWVudCcsXG4gICAgICAgICAgICAgICAgJ21pbmltYWxfYmxvY2tfZGVsYXknLFxuICAgICAgICAgICAgICAgICdsaXF1aWRpdHlfYmFraW5nX3N1YnNpZHknLFxuICAgICAgICAgICAgICAgICdjYWNoZV9sYXlvdXQnLFxuICAgICAgICAgICAgICAgICdiYWtpbmdfcmV3YXJkX2ZpeGVkX3BvcnRpb24nLFxuICAgICAgICAgICAgICAgICdiYWtpbmdfcmV3YXJkX2JvbnVzX3Blcl9zbG90JyxcbiAgICAgICAgICAgICAgICAnZW5kb3JzaW5nX3Jld2FyZF9wZXJfc2xvdCcsXG4gICAgICAgICAgICAgICAgJ2RvdWJsZV9iYWtpbmdfcHVuaXNobWVudCcsXG4gICAgICAgICAgICAgICAgJ2RlbGF5X2luY3JlbWVudF9wZXJfcm91bmQnLFxuICAgICAgICAgICAgICAgICd0eF9yb2xsdXBfY29tbWl0bWVudF9ib25kJyxcbiAgICAgICAgICAgICAgICAndmRmX2RpZmZpY3VsdHknLFxuICAgICAgICAgICAgICAgICdzY19yb2xsdXBfc3Rha2VfYW1vdW50JyxcbiAgICAgICAgICAgICAgICAnbWluaW1hbF9zdGFrZScsXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlKSwgY2FzdGVkUmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxscy4gU2VlIGV4YW1wbGVzIGZvciB2YXJpb3VzIGF2YWlsYWJsZSBzeW50YXhlcy5cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBbGwgdGhlIGluZm9ybWF0aW9uIGFib3V0IGEgYmxvY2tcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZFxuICAgICAqIEBleGFtcGxlIGdldEJsb2NrKCkgd2lsbCBkZWZhdWx0IHRvIC9tYWluL2NoYWlucy9ibG9jay9oZWFkLlxuICAgICAqIEBleGFtcGxlIGdldEJsb2NrKHsgYmxvY2s6IGhlYWR+MiB9KSB3aWxsIHJldHVybiBhbiBvZmZzZXQgb2YgMiBibG9ja3MuXG4gICAgICogQGV4YW1wbGUgZ2V0QmxvY2soeyBibG9jazogQkw4ZlRpV2NTeFdDamlNVm5Ea2JoNkV1aHFWUFp6Z1doZUoyZHF3cnhZUm05QWVwaFhofjIgfSkgd2lsbCByZXR1cm4gYW4gb2Zmc2V0IG9mIDIgYmxvY2tzIGZyb20gZ2l2ZW4gYmxvY2sgaGFzaC4uXG4gICAgICovXG4gICAgZ2V0QmxvY2soeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9YCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSB3aG9sZSBibG9jayBoZWFkZXJcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1oZWFkZXJcbiAgICAgKi9cbiAgICBnZXRCbG9ja0hlYWRlcih7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vaGVhZGVyYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFsbCB0aGUgbWV0YWRhdGEgYXNzb2NpYXRlZCB0byB0aGUgYmxvY2tcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI2dldC1ibG9jay1pZC1tZXRhZGF0YVxuICAgICAqL1xuICAgIGdldEJsb2NrTWV0YWRhdGEoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L21ldGFkYXRhYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyBjb250YWlucyBvcHRpb25hbCBxdWVyeSBhcmd1bWVudHNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgbGlzdCBvZiBkZWxlZ2F0ZXMgYWxsb3dlZCB0byBiYWtlIGEgYmxvY2suXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtaGVscGVycy1iYWtpbmctcmlnaHRzXG4gICAgICovXG4gICAgZ2V0QmFraW5nUmlnaHRzKGFyZ3MgPSB7fSwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2hlbHBlcnMvYmFraW5nX3JpZ2h0c2ApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgcXVlcnk6IGFyZ3MsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgY29udGFpbnMgb3B0aW9uYWwgcXVlcnkgYXJndW1lbnRzXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZXMgdGhlIGxpc3Qgb2YgZGVsZWdhdGVzIGFsbG93ZWQgdG8gYmFrZSBhIGJsb2NrLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWhlbHBlcnMtZW5kb3JzaW5nLXJpZ2h0c1xuICAgICAqL1xuICAgIGdldEVuZG9yc2luZ1JpZ2h0cyhhcmdzID0ge30sIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9oZWxwZXJzL2VuZG9yc2luZ19yaWdodHNgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBhcmdzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEJhbGxvdHMgY2FzdGVkIHNvIGZhciBkdXJpbmcgYSB2b3RpbmcgcGVyaW9kXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtYmFsbG90LWxpc3RcbiAgICAgKi9cbiAgICBnZXRCYWxsb3RMaXN0KHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS92b3Rlcy9iYWxsb3RfbGlzdGApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBTdW0gb2YgYmFsbG90cyBjYXN0ZWQgc28gZmFyIGR1cmluZyBhIHZvdGluZyBwZXJpb2QuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtYmFsbG90c1xuICAgICAqL1xuICAgIGdldEJhbGxvdHMoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L3ZvdGVzL2JhbGxvdHNgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBjYXN0ZWQgPSBjYXN0VG9CaWdOdW1iZXIocmVzcG9uc2UsIFsneWF5JywgJ25heScsICdwYXNzJ10pO1xuICAgICAgICAgICAgcmV0dXJuIGNhc3RlZDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBDdXJyZW50IHByb3Bvc2FsIHVuZGVyIGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtY3VycmVudC1wcm9wb3NhbFxuICAgICAqL1xuICAgIGdldEN1cnJlbnRQcm9wb3NhbCh7IGJsb2NrLCB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L3ZvdGVzL2N1cnJlbnRfcHJvcG9zYWxgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ3VycmVudCBleHBlY3RlZCBxdW9ydW0uXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtY3VycmVudC1xdW9ydW1cbiAgICAgKi9cbiAgICBnZXRDdXJyZW50UXVvcnVtKHsgYmxvY2ssIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vdm90ZXMvY3VycmVudF9xdW9ydW1gKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gTGlzdCBvZiBkZWxlZ2F0ZXMgd2l0aCB0aGVpciB2b3Rpbmcgd2VpZ2h0LCBpbiBudW1iZXIgb2Ygcm9sbHMuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtbGlzdGluZ3NcbiAgICAgKi9cbiAgICBnZXRWb3Rlc0xpc3RpbmdzKHsgYmxvY2ssIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vdm90ZXMvbGlzdGluZ3NgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNwb25zZS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS52b3RpbmdfcG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52b3RpbmdfcG93ZXIgPSBuZXcgQmlnTnVtYmVyKGl0ZW0udm90aW5nX3Bvd2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBMaXN0IG9mIHByb3Bvc2FscyB3aXRoIG51bWJlciBvZiBzdXBwb3J0ZXJzLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLXByb3Bvc2Fsc1xuICAgICAqL1xuICAgIGdldFByb3Bvc2Fscyh7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vdm90ZXMvcHJvcG9zYWxzYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzcG9uc2UubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtWzFdID0gbmV3IEJpZ051bWJlcihpdGVtWzFdKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgb3BlcmF0aW9uIGNvbnRlbnRzIHRvIGZvcmdlXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBGb3JnZSBhbiBvcGVyYXRpb24gcmV0dXJuaW5nIHRoZSB1bnNpZ25lZCBieXRlc1xuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjcG9zdC1ibG9jay1pZC1oZWxwZXJzLWZvcmdlLW9wZXJhdGlvbnNcbiAgICAgKi9cbiAgICBmb3JnZU9wZXJhdGlvbnMoZGF0YSwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vaGVscGVycy9mb3JnZS9vcGVyYXRpb25zYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpZ25lZE9wQnl0ZXMgc2lnbmVkIGJ5dGVzIHRvIGluamVjdFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEluamVjdCBhbiBvcGVyYXRpb24gaW4gbm9kZSBhbmQgYnJvYWRjYXN0IGl0LiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgb3BlcmF0aW9uLiBUaGUgYHNpZ25lZE9wZXJhdGlvbkNvbnRlbnRzYCBzaG91bGQgYmUgY29uc3RydWN0ZWQgdXNpbmcgYSBjb250ZXh0dWFsIFJQQ3MgZnJvbSB0aGUgbGF0ZXN0IGJsb2NrIGFuZCBzaWduZWQgYnkgdGhlIGNsaWVudC4gQnkgZGVmYXVsdCwgdGhlIFJQQyB3aWxsIHdhaXQgZm9yIHRoZSBvcGVyYXRpb24gdG8gYmUgKHByZS0pdmFsaWRhdGVkIGJlZm9yZSBhbnN3ZXJpbmcuIFNlZSBSUENzIHVuZGVyIC9ibG9ja3MvcHJldmFsaWRhdGlvbiBmb3IgbW9yZSBkZXRhaWxzIG9uIHRoZSBwcmV2YWxpZGF0aW9uIGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWluamVjdGlvbi1vcGVyYXRpb25cbiAgICAgKi9cbiAgICBpbmplY3RPcGVyYXRpb24oc2lnbmVkT3BCeXRlcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2luamVjdGlvbi9vcGVyYXRpb25gKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIH0sIHNpZ25lZE9wQnl0ZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3BzIE9wZXJhdGlvbnMgdG8gYXBwbHlcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNpbXVsYXRlIHRoZSB2YWxpZGF0aW9uIG9mIGFuIG9wZXJhdGlvblxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjcG9zdC1ibG9jay1pZC1oZWxwZXJzLXByZWFwcGx5LW9wZXJhdGlvbnNcbiAgICAgKi9cbiAgICBwcmVhcHBseU9wZXJhdGlvbnMob3BzLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vaGVscGVycy9wcmVhcHBseS9vcGVyYXRpb25zYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBvcHMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udHJhY3QgYWRkcmVzcyBvZiB0aGUgY29udHJhY3Qgd2Ugd2FudCB0byBnZXQgdGhlIGVudHJ5cG9pbnRzIG9mXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJuIHRoZSBsaXN0IG9mIGVudHJ5cG9pbnRzIG9mIHRoZSBjb250cmFjdFxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLWVudHJ5cG9pbnRzXG4gICAgICpcbiAgICAgKiBAdmVyc2lvbiAwMDVfUHNCQUJZNUhcbiAgICAgKi9cbiAgICBnZXRFbnRyeXBvaW50cyhjb250cmFjdCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVDb250cmFjdChjb250cmFjdCk7XG4gICAgICAgICAgICBjb25zdCBjb250cmFjdFJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvY29udHJhY3RzLyR7Y29udHJhY3R9L2VudHJ5cG9pbnRzYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyYWN0UmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb3AgT3BlcmF0aW9uIHRvIHJ1blxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUnVuIGFuIG9wZXJhdGlvbiB3aXRob3V0IHNpZ25hdHVyZSBjaGVja3NcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI3Bvc3QtYmxvY2staWQtaGVscGVycy1zY3JpcHRzLXJ1bi1vcGVyYXRpb25cbiAgICAgKi9cbiAgICBydW5PcGVyYXRpb24ob3AsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9oZWxwZXJzL3NjcmlwdHMvcnVuX29wZXJhdGlvbmApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgfSwgb3ApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG9wIE9wZXJhdGlvbiB0byBzaW11bGF0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gU2ltdWxhdGUgYW4gb3BlcmF0aW9uIG9uIHRoZSBibG9ja2NoYWluXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0bGFiLmNvbS90ZXpvcy90ZXpvcy8tL2Jsb2IvbWFzdGVyL2RvY3MvYXBpL25haXJvYmktb3BlbmFwaS5qc29uXG4gICAgICovXG4gICAgc2ltdWxhdGVPcGVyYXRpb24ob3AsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9oZWxwZXJzL3NjcmlwdHMvc2ltdWxhdGVfb3BlcmF0aW9uYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBvcCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29kZSBDb2RlIHRvIHJ1blxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUnVuIGEgcGllY2Ugb2YgY29kZSBpbiB0aGUgY3VycmVudCBjb250ZXh0XG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNwb3N0LWJsb2NrLWlkLWhlbHBlcnMtc2NyaXB0cy1ydW4tY29kZVxuICAgICAqL1xuICAgIHJ1bkNvZGUoY29kZSwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2hlbHBlcnMvc2NyaXB0cy9ydW5fY29kZWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgfSwgY29kZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmlld1NjcmlwdFBhcmFtcyBQYXJhbWV0ZXJzIG9mIHRoZSBzY3JpcHQgdmlldyB0byBydW5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNpbXVsYXRlIGEgY2FsbCB0byBhIG1pY2hlbHNvbiB2aWV3XG4gICAgICpcbiAgICAgKi9cbiAgICBydW5TY3JpcHRWaWV3KF9hLCBfYikge1xuICAgICAgICB2YXIgeyB1bnBhcnNpbmdfbW9kZSA9ICdSZWFkYWJsZScgfSA9IF9hLCByZXN0ID0gX19yZXN0KF9hLCBbXCJ1bnBhcnNpbmdfbW9kZVwiXSk7XG4gICAgICAgIHZhciBfYyA9IF9iID09PSB2b2lkIDAgPyBkZWZhdWx0UlBDT3B0aW9ucyA6IF9iLCBibG9jayA9IF9jLmJsb2NrO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9oZWxwZXJzL3NjcmlwdHMvcnVuX3NjcmlwdF92aWV3YCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBPYmplY3QuYXNzaWduKHsgdW5wYXJzaW5nX21vZGUgfSwgcmVzdCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZpZXdQYXJhbXMgUGFyYW1ldGVycyBvZiB0aGUgdmlldyB0byBydW5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFNpbXVsYXRlIGEgY2FsbCB0byBhIHZpZXcgZm9sbG93aW5nIHRoZSBUWklQLTQgc3RhbmRhcmQuIFNlZSBodHRwczovL2dpdGxhYi5jb20vdHppcC90emlwLy0vYmxvYi9tYXN0ZXIvcHJvcG9zYWxzL3R6aXAtNC90emlwLTQubWQjdmlldy1lbnRyeXBvaW50cy5cbiAgICAgKlxuICAgICAqL1xuICAgIHJ1blZpZXcoX2EsIF9iKSB7XG4gICAgICAgIHZhciB7IHVucGFyc2luZ19tb2RlID0gJ1JlYWRhYmxlJyB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInVucGFyc2luZ19tb2RlXCJdKTtcbiAgICAgICAgdmFyIF9jID0gX2IgPT09IHZvaWQgMCA/IGRlZmF1bHRSUENPcHRpb25zIDogX2IsIGJsb2NrID0gX2MuYmxvY2s7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2hlbHBlcnMvc2NyaXB0cy9ydW5fdmlld2ApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgfSwgT2JqZWN0LmFzc2lnbih7IHVucGFyc2luZ19tb2RlIH0sIHJlc3QpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldENoYWluSWQoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vY2hhaW5faWRgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIERhdGEgdG8gcGFja1xuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gQ29tcHV0ZXMgdGhlIHNlcmlhbGl6ZWQgdmVyc2lvbiBvZiBhIGRhdGEgZXhwcmVzc2lvbiB1c2luZyB0aGUgc2FtZSBhbGdvcml0aG0gYXMgc2NyaXB0IGluc3RydWN0aW9uIFBBQ0tcbiAgICAgKiBOb3RlOiBZb3Ugc2hvdWxkIGFsd2F5cyB2ZXJpZnkgdGhlIHBhY2tlZCBieXRlcyBiZWZvcmUgc2lnbmluZyBvciByZXF1ZXN0aW5nIHRoYXQgdGhleSBiZSBzaWduZWQgd2hlbiB1c2luZyB0aGUgdGhlIFJQQyB0byBwYWNrLlxuICAgICAqIFRoaXMgcHJlY2F1dGlvbiBoZWxwcyBwcm90ZWN0IHlvdSBhbmQgeW91ciBhcHBsaWNhdGlvbnMgdXNlcnMgZnJvbSBSUEMgbm9kZXMgdGhhdCBoYXZlIGJlZW4gY29tcHJvbWlzZWQuXG4gICAgICogQSBub2RlIHRoYXQgaXMgb3BlcmF0ZWQgYnkgYSBiYWQgYWN0b3IsIG9yIGNvbXByb21pc2VkIGJ5IGEgYmFkIGFjdG9yIGNvdWxkIHJldHVybiBhIGZ1bGx5IGZvcm1lZCBvcGVyYXRpb24gdGhhdCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBpbnB1dCBwcm92aWRlZCB0byB0aGUgUlBDIGVuZHBvaW50LlxuICAgICAqIEEgc2FmZXIgc29sdXRpb24gdG8gcGFjayBhbmQgc2lnbiBkYXRhIHdvdWxkIGJlIHRvIHVzZSB0aGUgYHBhY2tEYXRhQnl0ZXNgIGZ1bmN0aW9uIGF2YWlsYWJsZSBpbiB0aGUgYEB0YXF1aXRvL21pY2hlbC1jb2RlY2AgcGFja2FnZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIHBhY2tEYXRhKHsgZGF0YTogeyBzdHJpbmc6IFwidGVzdFwiIH0sIHR5cGU6IHsgcHJpbTogXCJzdHJpbmdcIiB9IH0pXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYXBpL3JwYy5odG1sI3Bvc3QtYmxvY2staWQtaGVscGVycy1zY3JpcHRzLXBhY2stZGF0YVxuICAgICAqL1xuICAgIHBhY2tEYXRhKGRhdGEsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBfYSA9IHlpZWxkIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9oZWxwZXJzL3NjcmlwdHMvcGFja19kYXRhYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9LCBkYXRhKSwgeyBnYXMgfSA9IF9hLCByZXN0ID0gX19yZXN0KF9hLCBbXCJnYXNcIl0pO1xuICAgICAgICAgICAgbGV0IGZvcm1hdHRlZEdhcyA9IGdhcztcbiAgICAgICAgICAgIGNvbnN0IHRyeUJpZ051bWJlciA9IG5ldyBCaWdOdW1iZXIoZ2FzIHx8ICcnKTtcbiAgICAgICAgICAgIGlmICghdHJ5QmlnTnVtYmVyLmlzTmFOKCkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRHYXMgPSB0cnlCaWdOdW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGdhczogZm9ybWF0dGVkR2FzIH0sIHJlc3QpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJuIHJwYyByb290IHVybFxuICAgICAqL1xuICAgIGdldFJwY1VybCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb24gVm90aW5nIHBlcmlvZCBvZiBjdXJyZW50IGJsb2NrLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgZ2V0Q3VycmVudFBlcmlvZCgpIHdpbGwgZGVmYXVsdCB0byBjdXJyZW50IHZvdGluZyBwZXJpb2QgZm9yIC9tYWluL2NoYWlucy9ibG9jay9oZWFkLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9hcGkvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLXZvdGVzLWN1cnJlbnQtcGVyaW9kXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFBlcmlvZCh7IGJsb2NrLCB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L3ZvdGVzL2N1cnJlbnRfcGVyaW9kYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIFZvdGluZyBwZXJpb2Qgb2YgbmV4dCBibG9jay5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIGdldFN1Y2Nlc3NvclBlcmlvZCgpIHdpbGwgZGVmYXVsdCB0byBzdWNjZXNzb3Igdm90aW5nIHBlcmlvZCBmb3IgL21haW4vY2hhaW5zL2Jsb2NrL2hlYWQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FwaS9ycGMuaHRtbCNnZXQtYmxvY2staWQtdm90ZXMtc3VjY2Vzc29yLXBlcmlvZFxuICAgICAqL1xuICAgIGdldFN1Y2Nlc3NvclBlcmlvZCh7IGJsb2NrLCB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L3ZvdGVzL3N1Y2Nlc3Nvcl9wZXJpb2RgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBTYXBsaW5nIHN0YXRlIElEXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBhIHNhcGxpbmcgc3RhdGUgSUQuXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2FjdGl2ZS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1zYXBsaW5nLXNhcGxpbmctc3RhdGUtaWQtZ2V0LWRpZmZcbiAgICAgKi9cbiAgICBnZXRTYXBsaW5nRGlmZkJ5SWQoaWQsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvc2FwbGluZy8ke2lkfS9nZXRfZGlmZmApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IHdlIHdhbnQgdG8gZ2V0IHRoZSBzYXBsaW5nIGRpZmZcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGEgc2FwbGluZyBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vYWN0aXZlL3JwYy5odG1sI2dldC1ibG9jay1pZC1jb250ZXh0LWNvbnRyYWN0cy1jb250cmFjdC1pZC1zaW5nbGUtc2FwbGluZy1nZXQtZGlmZlxuICAgICAqL1xuICAgIGdldFNhcGxpbmdEaWZmQnlDb250cmFjdChjb250cmFjdCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9jb250cmFjdHMvJHtjb250cmFjdH0vc2luZ2xlX3NhcGxpbmdfZ2V0X2RpZmZgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRQcm90b2NvbHMoeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vcHJvdG9jb2xzYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhfcm9sbHVwX2lkIHRoZSB0cmFuc2FjdGlvbiByb2xsdXAgSURcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgc3RhdGUgb2YgYSByb2xsdXBcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vamFrYXJ0YS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC10eC1yb2xsdXAtdHgtcm9sbHVwLWlkLXN0YXRlXG4gICAgICovXG4gICAgZ2V0VHhSb2xsdXBTdGF0ZSh0eFJvbGx1cElkLCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L3R4X3JvbGx1cC8ke3R4Um9sbHVwSWR9L3N0YXRlYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhfcm9sbHVwX2lkIHRoZSB0cmFuc2FjdGlvbiByb2xsdXAgSURcbiAgICAgKiBAcGFyYW0gYmxvY2tfbGV2ZWwgdGhlIGJsb2NrIGxldmVsXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIGluYm94IG9mIGEgdHJhbnNhY3Rpb24gcm9sbHVwXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2pha2FydGEvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtdHgtcm9sbHVwLXR4LXJvbGx1cC1pZC1pbmJveC1ibG9jay1sZXZlbFxuICAgICAqL1xuICAgIGdldFR4Um9sbHVwSW5ib3godHhSb2xsdXBJZCwgYmxvY2tMZXZlbCwgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC90eF9yb2xsdXAvJHt0eFJvbGx1cElkfS9pbmJveC8ke2Jsb2NrTGV2ZWx9YCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udHJhY3QgYWRkcmVzcyBvZiB0aGUgY29udHJhY3Qgd2Ugd2FudCB0byByZXRyaWV2ZSBzdG9yYWdlIGluZm9ybWF0aW9uIG9mXG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvbiBBY2Nlc3MgdGhlIGFtb3VudCBvZiB1c2VkIHNwYWNlIGluIGEgY29udHJhY3QncyBzdG9yYWdlXG4gICAgICpcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL2xpbWEvcnBjLmh0bWwjZ2V0LWJsb2NrLWlkLWNvbnRleHQtY29udHJhY3RzLWNvbnRyYWN0LWlkLXN0b3JhZ2VcbiAgICAgKi9cbiAgICBnZXRTdG9yYWdlVXNlZFNwYWNlKGNvbnRyYWN0LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnRyYWN0cy8ke2NvbnRyYWN0fS9zdG9yYWdlL3VzZWRfc3BhY2VgKSxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250cmFjdCBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCB3ZSB3YW50IHRvIHJldHJpZXZlIHN0b3JhZ2UgaW5mb3JtYXRpb24gb2ZcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBjb250YWlucyBnZW5lcmljIGNvbmZpZ3VyYXRpb24gZm9yIHJwYyBjYWxsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgYW1vdW50IG9mIHBhaWQgc3BhY2UgaW4gYSBjb250cmFjdCdzIHN0b3JhZ2VcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vbGltYS9ycGMuaHRtbCNnZXQtYmxvY2staWQtY29udGV4dC1jb250cmFjdHMtY29udHJhY3QtaWQtc3RvcmFnZVxuICAgICAqL1xuICAgIGdldFN0b3JhZ2VQYWlkU3BhY2UoY29udHJhY3QsIHsgYmxvY2sgfSA9IGRlZmF1bHRSUENPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQmFja2VuZC5jcmVhdGVSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuY3JlYXRlVVJMKGAvY2hhaW5zLyR7dGhpcy5jaGFpbn0vYmxvY2tzLyR7YmxvY2t9L2NvbnRleHQvY29udHJhY3RzLyR7Y29udHJhY3R9L3N0b3JhZ2UvcGFpZF9zcGFjZWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IGltcGxpY2l0IG9yIG9yaWdpbmF0ZWQgYWRkcmVzcyB3ZSB3YW50IHRvIHJldHJpZXZlIHRpY2tldCBiYWxhbmNlIG9mXG4gICAgICogQHBhcmFtIHRpY2tldCBvYmplY3QgdG8gc3BlY2lmeSBhIHRpY2tldCBieSB0aWNrZXRlciwgY29udGVudCB0eXBlIGFuZCBjb250ZW50XG4gICAgICogQHBhcmFtIG9wdGlvbnMgY29udGFpbnMgZ2VuZXJpYyBjb25maWd1cmF0aW9uIGZvciBycGMgY2FsbHNcbiAgICAgKiBAZGVzY3JpcHRpb24gQWNjZXNzIHRoZSBjb250cmFjdCdzIGJhbGFuY2Ugb2YgdGlja2V0IHdpdGggc3BlY2lmaWVkIHRpY2tldGVyLCBjb250ZW50IHR5cGUsIGFuZCBjb250ZW50LlxuICAgICAqIEBleGFtcGxlIHRpY2tldCB7IHRpY2tldGVyOiAnYWRkcmVzcycsIGNvbnRlbnRfdHlwZTogeyBwcmltOiBcInN0cmluZ1wiIH0sIGNvbnRlbnQ6IHsgc3RyaW5nOiAndGlja2V0MScgfSB9XG4gICAgICogQHNlZSBodHRwczovL3Rlem9zLmdpdGxhYi5pby9wcm90b2NvbHMvMDE2X211bWJhaS5odG1sI3JwYy1jaGFuZ2VzXG4gICAgICovXG4gICAgZ2V0VGlja2V0QmFsYW5jZShjb250cmFjdCwgdGlja2V0LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnRyYWN0cy8ke2NvbnRyYWN0fS90aWNrZXRfYmFsYW5jZWApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgfSwgdGlja2V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRyYWN0IG9yaWdpbmF0ZWQgYWRkcmVzcyB3ZSB3YW50IHRvIHJldHJpZXZlIHRpY2tldCBiYWxhbmNlcyBvZlxuICAgICAqIEBwYXJhbSBvcHRpb25zIGNvbnRhaW5zIGdlbmVyaWMgY29uZmlndXJhdGlvbiBmb3IgcnBjIGNhbGxzXG4gICAgICogQGRlc2NyaXB0aW9uIEFjY2VzcyB0aGUgY29tcGxldGUgbGlzdCBvZiB0aWNrZXRzIG93bmVkIGJ5IHRoZSBnaXZlbiBjb250cmFjdCBieSBzY2FubmluZyB0aGUgY29udHJhY3QncyBzdG9yYWdlLlxuICAgICAqIEBzZWUgaHR0cHM6Ly90ZXpvcy5naXRsYWIuaW8vcHJvdG9jb2xzLzAxNl9tdW1iYWkuaHRtbCNycGMtY2hhbmdlc1xuICAgICAqL1xuICAgIGdldEFsbFRpY2tldEJhbGFuY2VzKGNvbnRyYWN0LCB7IGJsb2NrIH0gPSBkZWZhdWx0UlBDT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L2Jsb2Nrcy8ke2Jsb2NrfS9jb250ZXh0L2NvbnRyYWN0cy8ke2NvbnRyYWN0fS9hbGxfdGlja2V0X2JhbGFuY2VzYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIExpc3QgdGhlIHByZXZhbGlkYXRlZCBvcGVyYXRpb25zIGluIG1lbXBvb2wgKGFjY2Vzc2liaWxpdHkgb2YgbWVtcG9vbCBkZXBlbmRzIG9uIGVhY2ggcnBjIGVuZHBvaW50KVxuICAgICAqIEBwYXJhbSBhcmdzIGhhcyA1IG9wdGlvbmFsIHByb3BlcnRpZXMuIFdlIHN1cHBvcnQgdmVyc2lvbiAxIHdpdGggbmV3IGVuY29kaW5nIGFzIHZlcnNpb24gMCB3aWxsIGJlIGRlcHJlY2F0ZWQgc29vbi4gVGhlIHJlc3Qgb2YgdGhlIHByb3BlcnRpZXMgaXMgdG8gZmlsdGVyIHBlbmRpbmcgb3BlcmF0aW9ucyByZXNwb25zZVxuICAgICAqIEBkZWZhdWx0IGFyZ3MgeyB2ZXJzaW9uOiAnMScsIGFwcGxpZWQ6IHRydWUsIHJlZnVzZWQ6IHRydWUsIG91dGRhdGVkLCB0cnVlLCBicmFuY2hSZWZ1c2VkOiB0cnVlLCBicmFuY2hEZWxheWVkOiB0cnVlLCB2YWxpZGF0aW9uUGFzczogdW5kZWZpbmVkIH1cbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL0NIQU5HRVMuaHRtbD9oaWdobGlnaHQ9cGVuZGluZ19vcGVyYXRpb25zI2lkNFxuICAgICAqL1xuICAgIGdldFBlbmRpbmdPcGVyYXRpb25zKGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cEJhY2tlbmQuY3JlYXRlUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLmNyZWF0ZVVSTChgL2NoYWlucy8ke3RoaXMuY2hhaW59L21lbXBvb2wvcGVuZGluZ19vcGVyYXRpb25zYCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICBxdWVyeTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIGNvbnRhaW5zIHRoZSBQVk0ga2luZCBhbmQga2VybmVsIHRvIGdlbmVyYXRlIHRoZSBvcmlnaW5hdGlvbiBwcm9vZiBmcm9tXG4gICAgICogQGRlc2NyaXB0aW9uIHJwYyBjYWxsIHRvIGdlbmVyYXRlIHRoZSBvcmlnaW5hdGlvbiBwcm9vZiBuZWVkZWQgZm9yIGEgc21hcnQgcm9sbHVwIG9yaWdpbmF0ZSBvcGVyYXRpb25cbiAgICAgKiBAc2VlIGh0dHBzOi8vdGV6b3MuZ2l0bGFiLmlvL3Byb3RvY29scy8wMTZfbXVtYmFpLmh0bWwjcnBjLWNoYW5nZXNcbiAgICAgKi9cbiAgICBnZXRPcmlnaW5hdGlvblByb29mKHBhcmFtcywgeyBibG9jayB9ID0gZGVmYXVsdFJQQ09wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmNyZWF0ZVJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5jcmVhdGVVUkwoYC9jaGFpbnMvJHt0aGlzLmNoYWlufS9ibG9ja3MvJHtibG9ja30vY29udGV4dC9zbWFydF9yb2xsdXBzL2FsbC9vcmlnaW5hdGlvbl9wcm9vZmApLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgfSwgcGFyYW1zKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBNRVRBREFUQV9CQUxBTkNFX1VQREFURVNfQ0FURUdPUlksIE9QRVJBVElPTl9NRVRBREFUQSwgT3BLaW5kLCBQdm1LaW5kLCBScGNDbGllbnQsIFJwY0NsaWVudENhY2hlLCBTbWFydFJvbGx1cElucHV0UHJvb2ZLaW5kLCBTbWFydFJvbGx1cFJlZnV0YXRpb25PcHRpb25zLCBTbWFydFJvbGx1cFJlZnV0ZUdhbWVFbmRlZFBsYXllck91dGNvbWVzLCBTbWFydFJvbGx1cFJlZnV0ZUdhbWVFbmRlZFJlYXNvbiwgU21hcnRSb2xsdXBSZWZ1dGVHYW1lU3RhdHVzT3B0aW9ucywgU21hcnRSb2xsdXBSZWZ1dGVSZXZlYWxQcm9vZktpbmQsIFZFUlNJT04sIGNhc3RUb0JpZ051bWJlciwgZGVmYXVsdENoYWluLCBkZWZhdWx0UlBDT3B0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFxdWl0by1ycGMuZXM2LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/rpc/dist/taquito-rpc.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/taquito/dist/taquito.es6.js":
/*!***********************************************************!*\
  !*** ./node_modules/@taquito/taquito/dist/taquito.es6.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BallotOperation: () => (/* binding */ BallotOperation),\n/* harmony export */   BatchOperation: () => (/* binding */ BatchOperation),\n/* harmony export */   BigMapAbstraction: () => (/* binding */ BigMapAbstraction),\n/* harmony export */   COST_PER_BYTE: () => (/* binding */ COST_PER_BYTE),\n/* harmony export */   ChainIds: () => (/* binding */ ChainIds),\n/* harmony export */   CompositeForger: () => (/* binding */ CompositeForger),\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   ContractAbstraction: () => (/* binding */ ContractAbstraction),\n/* harmony export */   ContractMethod: () => (/* binding */ ContractMethod),\n/* harmony export */   ContractMethodObject: () => (/* binding */ ContractMethodObject),\n/* harmony export */   ContractView: () => (/* binding */ ContractView),\n/* harmony export */   DEFAULT_FEE: () => (/* binding */ DEFAULT_FEE),\n/* harmony export */   DEFAULT_GAS_LIMIT: () => (/* binding */ DEFAULT_GAS_LIMIT),\n/* harmony export */   DEFAULT_SMART_CONTRACT_METHOD_NAME: () => (/* binding */ DEFAULT_SMART_CONTRACT_METHOD_NAME),\n/* harmony export */   DEFAULT_STORAGE_LIMIT: () => (/* binding */ DEFAULT_STORAGE_LIMIT),\n/* harmony export */   DefaultGlobalConstantsProvider: () => (/* binding */ DefaultGlobalConstantsProvider),\n/* harmony export */   DelegateOperation: () => (/* binding */ DelegateOperation),\n/* harmony export */   DelegationWalletOperation: () => (/* binding */ DelegationWalletOperation),\n/* harmony export */   DrainDelegateOperation: () => (/* binding */ DrainDelegateOperation),\n/* harmony export */   Estimate: () => (/* binding */ Estimate),\n/* harmony export */   GlobalConstantNotFound: () => (/* binding */ GlobalConstantNotFound),\n/* harmony export */   InvalidBalanceError: () => (/* binding */ InvalidBalanceError),\n/* harmony export */   InvalidCodeParameter: () => (/* binding */ InvalidCodeParameter),\n/* harmony export */   InvalidDelegationSource: () => (/* binding */ InvalidDelegationSource),\n/* harmony export */   InvalidEstimateValueError: () => (/* binding */ InvalidEstimateValueError),\n/* harmony export */   InvalidInitParameter: () => (/* binding */ InvalidInitParameter),\n/* harmony export */   InvalidParameterError: () => (/* binding */ InvalidParameterError),\n/* harmony export */   InvalidViewSimulationContext: () => (/* binding */ InvalidViewSimulationContext),\n/* harmony export */   LegacyWalletProvider: () => (/* binding */ LegacyWalletProvider),\n/* harmony export */   MANAGER_LAMBDA: () => (/* binding */ MANAGER_LAMBDA),\n/* harmony export */   MichelCodecPacker: () => (/* binding */ MichelCodecPacker),\n/* harmony export */   MichelCodecParser: () => (/* binding */ MichelCodecParser),\n/* harmony export */   MichelsonMap: () => (/* reexport safe */ _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.MichelsonMap),\n/* harmony export */   NoopParser: () => (/* binding */ NoopParser),\n/* harmony export */   ObservableSubscription: () => (/* binding */ ObservableSubscription),\n/* harmony export */   OpKind: () => (/* reexport safe */ _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind),\n/* harmony export */   Operation: () => (/* binding */ Operation),\n/* harmony export */   OperationBatch: () => (/* binding */ OperationBatch),\n/* harmony export */   OriginationOperation: () => (/* binding */ OriginationOperation),\n/* harmony export */   OriginationParameterError: () => (/* binding */ OriginationParameterError),\n/* harmony export */   OriginationWalletOperation: () => (/* binding */ OriginationWalletOperation),\n/* harmony export */   PollingSubscribeProvider: () => (/* binding */ PollingSubscribeProvider),\n/* harmony export */   PrepareProvider: () => (/* binding */ PrepareProvider),\n/* harmony export */   Protocols: () => (/* binding */ Protocols),\n/* harmony export */   RPCEstimateProvider: () => (/* binding */ RPCEstimateProvider),\n/* harmony export */   RevealEstimateError: () => (/* binding */ RevealEstimateError),\n/* harmony export */   RevealOperationError: () => (/* binding */ RevealOperationError),\n/* harmony export */   RpcForger: () => (/* binding */ RpcForger),\n/* harmony export */   RpcInjector: () => (/* binding */ RpcInjector),\n/* harmony export */   RpcPacker: () => (/* binding */ RpcPacker),\n/* harmony export */   RpcReadAdapter: () => (/* binding */ RpcReadAdapter),\n/* harmony export */   SaplingStateAbstraction: () => (/* binding */ SaplingStateAbstraction),\n/* harmony export */   TaquitoLocalForger: () => (/* binding */ TaquitoLocalForger),\n/* harmony export */   TezosOperationError: () => (/* binding */ TezosOperationError),\n/* harmony export */   TezosPreapplyFailureError: () => (/* binding */ TezosPreapplyFailureError),\n/* harmony export */   TezosToolkit: () => (/* binding */ TezosToolkit),\n/* harmony export */   TransactionOperation: () => (/* binding */ TransactionOperation),\n/* harmony export */   TransactionWalletOperation: () => (/* binding */ TransactionWalletOperation),\n/* harmony export */   UnconfiguredGlobalConstantsProviderError: () => (/* binding */ UnconfiguredGlobalConstantsProviderError),\n/* harmony export */   UnitValue: () => (/* reexport safe */ _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.UnitValue),\n/* harmony export */   VIEW_LAMBDA: () => (/* binding */ VIEW_LAMBDA),\n/* harmony export */   ViewSimulationError: () => (/* binding */ ViewSimulationError),\n/* harmony export */   Wallet: () => (/* binding */ Wallet),\n/* harmony export */   WalletOperation: () => (/* binding */ WalletOperation),\n/* harmony export */   WalletOperationBatch: () => (/* binding */ WalletOperationBatch),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   createActivationOperation: () => (/* binding */ createActivationOperation),\n/* harmony export */   createBallotOperation: () => (/* binding */ createBallotOperation),\n/* harmony export */   createDrainDelegateOperation: () => (/* binding */ createDrainDelegateOperation),\n/* harmony export */   createIncreasePaidStorageOperation: () => (/* binding */ createIncreasePaidStorageOperation),\n/* harmony export */   createOriginationOperation: () => (/* binding */ createOriginationOperation),\n/* harmony export */   createProposalsOperation: () => (/* binding */ createProposalsOperation),\n/* harmony export */   createRegisterDelegateOperation: () => (/* binding */ createRegisterDelegateOperation),\n/* harmony export */   createRegisterGlobalConstantOperation: () => (/* binding */ createRegisterGlobalConstantOperation),\n/* harmony export */   createRevealOperation: () => (/* binding */ createRevealOperation),\n/* harmony export */   createSetDelegateOperation: () => (/* binding */ createSetDelegateOperation),\n/* harmony export */   createSmartRollupAddMessagesOperation: () => (/* binding */ createSmartRollupAddMessagesOperation),\n/* harmony export */   createSmartRollupOriginateOperation: () => (/* binding */ createSmartRollupOriginateOperation),\n/* harmony export */   createTransferOperation: () => (/* binding */ createTransferOperation),\n/* harmony export */   createTransferTicketOperation: () => (/* binding */ createTransferTicketOperation),\n/* harmony export */   createUpdateConsensusKeyOperation: () => (/* binding */ createUpdateConsensusKeyOperation),\n/* harmony export */   defaultConfigConfirmation: () => (/* binding */ defaultConfigConfirmation),\n/* harmony export */   getRevealGasLimit: () => (/* binding */ getRevealGasLimit),\n/* harmony export */   protocols: () => (/* binding */ protocols),\n/* harmony export */   smartContractAbstractionSemantic: () => (/* binding */ smartContractAbstractionSemantic),\n/* harmony export */   validateAndExtractFailwith: () => (/* binding */ validateAndExtractFailwith)\n/* harmony export */ });\n/* harmony import */ var _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @taquito/rpc */ \"(ssr)/./node_modules/@taquito/rpc/dist/taquito-rpc.es6.js\");\n/* harmony import */ var _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @taquito/http-utils */ \"(ssr)/./node_modules/@taquito/http-utils/dist/taquito-http-utils.es6.js\");\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n/* harmony import */ var _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @taquito/michelson-encoder */ \"(ssr)/./node_modules/@taquito/michelson-encoder/dist/taquito-michelson-encoder.es6.js\");\n/* harmony import */ var _taquito_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @taquito/utils */ \"(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var _taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @taquito/michel-codec */ \"(ssr)/./node_modules/@taquito/michel-codec/dist/taquito-michel-codec.es6.js\");\n/* harmony import */ var _taquito_local_forging__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @taquito/local-forging */ \"(ssr)/./node_modules/@taquito/local-forging/dist/taquito-local-forging.es6.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction formatErrorMessage(error, stringToReplace) {\n    const body = JSON.parse(error.body);\n    if (body[0] && body[0].kind && body[0].msg) {\n        const newBody = JSON.stringify({\n            kind: body[0].kind,\n            id: body[0].id,\n            msg: body[0].msg.replace(stringToReplace, ''),\n        });\n        return new _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpResponseError(`Http error response: (${error.status}) ${newBody}`, error.status, error.statusText, newBody, error.url);\n    }\n    else {\n        return error;\n    }\n}\n\nclass RpcInjector {\n    constructor(context) {\n        this.context = context;\n    }\n    inject(signedOperationBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let hash;\n            try {\n                hash = yield this.context.rpc.injectOperation(signedOperationBytes);\n            }\n            catch (error) {\n                const stringToStrip = '. You may want to use --replace to provide adequate fee and replace it';\n                if (error instanceof _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpResponseError && error.message.includes(stringToStrip)) {\n                    throw formatErrorMessage(error, stringToStrip);\n                }\n                else {\n                    throw error;\n                }\n            }\n            return hash;\n        });\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates no signer has been configured in the TezosToolkit instance\n */\nclass UnconfiguredSignerError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TezosToolkitConfigError {\n    constructor() {\n        super();\n        this.name = 'UnconfiguredSignerError';\n        this.message =\n            'No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.';\n    }\n}\n\n/**\n * @description Default signer implementation which does nothing and produce invalid signature\n * @throw {@link UnconfiguredSignerError}\n */\nclass NoopSigner {\n    publicKey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UnconfiguredSignerError();\n        });\n    }\n    publicKeyHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UnconfiguredSignerError();\n        });\n    }\n    secretKey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UnconfiguredSignerError();\n        });\n    }\n    sign(_bytes, _watermark) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UnconfiguredSignerError();\n        });\n    }\n}\n\nfunction createObservableFromSubscription(sub) {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable((subscriber) => {\n        sub.on('data', (data) => {\n            subscriber.next(data);\n        });\n        sub.on('error', (error) => {\n            subscriber.error(error);\n        });\n        sub.on('close', () => {\n            subscriber.complete();\n        });\n        return () => {\n            sub.close();\n        };\n    });\n}\n\nconst DEFAULT_GAS_LIMIT = {\n    DELEGATION: 10600,\n    ORIGINATION: 10600,\n    TRANSFER: 10600,\n    /* This is used for gas_limit. There is no harm in setting a higher limit.\n     Only if an account has a balance that is very close to the total gas consumption,\n     then this margin can fail the operation.\n     Another benefit of this higher value is that then Dapps build with Taquito 17 can\n     still work with Mumbainet, as this value is higher than the reveal cost in Mumbai.\n    */\n    REVEAL_TZ1: 1000,\n    REVEAL_TZ2: 1000,\n    REVEAL_TZ3: 2000,\n    REVEAL_TZ4: 2000,\n};\nconst DEFAULT_FEE = {\n    DELEGATION: 1257,\n    ORIGINATION: 10000,\n    TRANSFER: 10000,\n    REVEAL: 374,\n};\nconst DEFAULT_STORAGE_LIMIT = {\n    DELEGATION: 0,\n    ORIGINATION: 257,\n    TRANSFER: 257,\n    REVEAL: 0,\n};\nconst COST_PER_BYTE = 250;\nvar Protocols;\n(function (Protocols) {\n    Protocols[\"Pt24m4xi\"] = \"Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd\";\n    Protocols[\"PsBABY5H\"] = \"PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU\";\n    Protocols[\"PsBabyM1\"] = \"PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS\";\n    Protocols[\"PsCARTHA\"] = \"PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb\";\n    Protocols[\"PsDELPH1\"] = \"PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo\";\n    Protocols[\"PtEdo2Zk\"] = \"PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA\";\n    Protocols[\"PsFLorena\"] = \"PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i\";\n    Protocols[\"PtGRANADs\"] = \"PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV\";\n    Protocols[\"PtHangz2\"] = \"PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx\";\n    Protocols[\"PsiThaCa\"] = \"PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP\";\n    Protocols[\"Psithaca2\"] = \"Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A\";\n    Protocols[\"PtJakart2\"] = \"PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY\";\n    Protocols[\"PtKathman\"] = \"PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg\";\n    Protocols[\"PtLimaPtL\"] = \"PtLimaPtLMwfNinJi9rCfDPWea8dFgTZ1MeJ9f1m2SRic6ayiwW\";\n    Protocols[\"PtMumbaii\"] = \"PtMumbaiiFFEGbew1rRjzSPyzRbA51Tm3RVZL5suHPxSZYDhCEc\";\n    Protocols[\"PtMumbai2\"] = \"PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1\";\n    Protocols[\"PtNairobi\"] = \"PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf\";\n    Protocols[\"ProtoALpha\"] = \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\";\n})(Protocols || (Protocols = {}));\nconst protocols = {\n    '004': [Protocols.Pt24m4xi],\n    '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n    '006': [Protocols.PsCARTHA],\n    '007': [Protocols.PsDELPH1],\n    '008': [Protocols.PtEdo2Zk],\n    '009': [Protocols.PsFLorena],\n    '010': [Protocols.PtGRANADs],\n    '011': [Protocols.PtHangz2],\n    '012': [Protocols.PsiThaCa, Protocols.Psithaca2],\n    '013': [Protocols.PtJakart2],\n    '014': [Protocols.PtKathman],\n    '015': [Protocols.PtLimaPtL],\n    '016': [Protocols.PtMumbai2],\n    '017': [Protocols.PtNairobi],\n    '018': [Protocols.ProtoALpha],\n};\nvar ChainIds;\n(function (ChainIds) {\n    ChainIds[\"MAINNET\"] = \"NetXdQprcVkpaWU\";\n    ChainIds[\"CARTHAGENET\"] = \"NetXjD3HPJJjmcd\";\n    ChainIds[\"DELPHINET\"] = \"NetXm8tYqnMWky1\";\n    ChainIds[\"EDONET\"] = \"NetXSgo1ZT2DRUG\";\n    ChainIds[\"FLORENCENET\"] = \"NetXxkAx4woPLyu\";\n    ChainIds[\"GRANADANET\"] = \"NetXz969SFaFn8k\";\n    ChainIds[\"HANGZHOUNET\"] = \"NetXZSsxBpMQeAT\";\n    ChainIds[\"ITHACANET\"] = \"NetXbhmtAbMukLc\";\n    ChainIds[\"ITHACANET2\"] = \"NetXnHfVqm9iesp\";\n    ChainIds[\"JAKARTANET2\"] = \"NetXLH1uAxK7CCh\";\n    ChainIds[\"KATHMANDUNET\"] = \"NetXazhm4yetmff\";\n    ChainIds[\"LIMANET\"] = \"NetXizpkH94bocH\";\n    ChainIds[\"MUMBAINET\"] = \"NetXQw6nWSnrJ5t\";\n    ChainIds[\"MUMBAINET2\"] = \"NetXgbcrNtXD2yA\";\n    ChainIds[\"NAIROBINET\"] = \"NetXyuzvDo2Ugzb\";\n})(ChainIds || (ChainIds = {}));\nconst getRevealGasLimit = (address) => Math.round((getRevealGasLimitInternal(address) * 11) / 10);\nconst getRevealGasLimitInternal = (address) => {\n    switch (address.substring(0, 3)) {\n        case 'tz1':\n            return DEFAULT_GAS_LIMIT.REVEAL_TZ1;\n        case 'tz2':\n            return DEFAULT_GAS_LIMIT.REVEAL_TZ2;\n        case 'tz3':\n            return DEFAULT_GAS_LIMIT.REVEAL_TZ3;\n        case 'tz4':\n            return DEFAULT_GAS_LIMIT.REVEAL_TZ4;\n        default:\n            throw new Error(`Cannot estimate reveal gas limit for ${address}`);\n    }\n};\n\n/**\n *  @category Error\n *  @description Error that indicates invalid smart contract parameters being passed or used\n */\nclass InvalidParameterError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(smartContractMethodName, sigs, invalidParams) {\n        super();\n        this.smartContractMethodName = smartContractMethodName;\n        this.sigs = sigs;\n        this.invalidParams = invalidParams;\n        this.name = 'InvalidParameterError';\n        this.message = `${smartContractMethodName} Received ${invalidParams.length} arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid delegation source contract address being passed or used\n */\nclass InvalidDelegationSource extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(source) {\n        super();\n        this.source = source;\n        this.name = `InvalidDelegationSource`;\n        this.message = `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid smart contract code parameter being passed or used\n */\nclass InvalidCodeParameter extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(message, data) {\n        super();\n        this.message = message;\n        this.data = data;\n        this.name = 'InvalidCodeParameter';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates invalid smart contract init parameter being passed or used\n */\nclass InvalidInitParameter extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(message, data) {\n        super();\n        this.message = message;\n        this.data = data;\n        this.name = 'InvalidInitParameter';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a failure when conducting a view simulation\n */\nclass ViewSimulationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.RpcError {\n    constructor(message, viewName, failWith, cause) {\n        super();\n        this.message = message;\n        this.viewName = viewName;\n        this.failWith = failWith;\n        this.cause = cause;\n        this.name = 'ViewSimulationError';\n    }\n}\nconst validateAndExtractFailwith = (error) => {\n    if (isJsonString(error.body)) {\n        const parsedError = JSON.parse(error.body);\n        if (Array.isArray(parsedError) && 'with' in parsedError[parsedError.length - 1]) {\n            return parsedError[parsedError.length - 1].with;\n        }\n    }\n};\nconst isJsonString = (str) => {\n    try {\n        JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n};\n/**\n *  @category Error\n *  @description Error that indicates invalid or unconfigured context when executing a view\n */\nclass InvalidViewSimulationContext extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(info) {\n        super();\n        this.info = info;\n        this.name = 'InvalidViewSimulationContext';\n        this.message = `${info} Please configure the context of the view execution in the executeView method.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a mistake happening during the reveal operation\n */\nclass RevealOperationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.RpcError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'RevealOperationError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a mistake in the parameters in the preparation of an Origination operation\n */\nclass OriginationParameterError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid balance being passed or used\n */\nclass InvalidBalanceError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'InvalidBalanceError';\n    }\n}\n\nconst createActivationOperation = ({ pkh, secret }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ACTIVATION,\n        pkh,\n        secret,\n    };\n});\nconst createOriginationOperation = ({ code, init, balance = '0', delegate, storage, fee = DEFAULT_FEE.ORIGINATION, gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION, storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION, mutez = false, }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (storage !== undefined && init !== undefined) {\n        throw new OriginationParameterError('Storage and Init cannot be set a the same time. Please either use storage or init but not both.');\n    }\n    if (!Array.isArray(code)) {\n        throw new InvalidCodeParameter('Wrong code parameter type, expected an array', code);\n    }\n    let contractStorage;\n    if (storage !== undefined) {\n        const storageType = code.find((p) => 'prim' in p && p.prim === 'storage');\n        if ((storageType === null || storageType === void 0 ? void 0 : storageType.args) === undefined) {\n            throw new InvalidCodeParameter('The storage section is missing from the script', code);\n        }\n        const schema = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema(storageType.args[0]); // TODO\n        contractStorage = schema.Encode(storage);\n    }\n    else if (init !== undefined && typeof init === 'object') {\n        contractStorage = init;\n    }\n    else {\n        throw new InvalidInitParameter('Wrong init parameter type, expected JSON Michelson', init);\n    }\n    const script = {\n        code,\n        storage: contractStorage,\n    };\n    if (isNaN(Number(balance))) {\n        throw new InvalidBalanceError(`Invalid Balance \"${balance}\", cannot be converted to a number`);\n    }\n    const operation = {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        balance: mutez ? balance.toString() : (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.format)('tz', 'mutez', balance).toString(),\n        script,\n    };\n    if (delegate) {\n        operation.delegate = delegate;\n    }\n    return operation;\n});\nconst createTransferOperation = ({ to, amount, parameter, fee = DEFAULT_FEE.TRANSFER, gasLimit = DEFAULT_GAS_LIMIT.TRANSFER, storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER, mutez = false, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const operation = {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        amount: mutez ? amount.toString() : (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.format)('tz', 'mutez', amount).toString(),\n        destination: to,\n        parameters: parameter,\n    };\n    return operation;\n});\nconst createSetDelegateOperation = ({ delegate, source, fee = DEFAULT_FEE.DELEGATION, gasLimit = DEFAULT_GAS_LIMIT.DELEGATION, storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const operation = {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION,\n        source,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        delegate,\n    };\n    return operation;\n});\nconst createRegisterDelegateOperation = ({ fee = DEFAULT_FEE.DELEGATION, gasLimit = DEFAULT_GAS_LIMIT.DELEGATION, storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION, }, source) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        delegate: source,\n    };\n});\nconst createRevealOperation = ({ fee = DEFAULT_FEE.REVEAL, gasLimit = undefined, storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL, }, source, publicKey) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL,\n        fee,\n        public_key: publicKey,\n        source,\n        gas_limit: gasLimit !== null && gasLimit !== void 0 ? gasLimit : getRevealGasLimit(source),\n        storage_limit: storageLimit,\n    };\n});\nconst createRegisterGlobalConstantOperation = ({ value, source, fee, gasLimit, storageLimit, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT,\n        value,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        source,\n    };\n});\nconst createTransferTicketOperation = ({ ticketContents, ticketTy, ticketTicketer, ticketAmount, destination, entrypoint, source, fee, gasLimit, storageLimit, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        source,\n        ticket_contents: ticketContents,\n        ticket_ty: ticketTy,\n        ticket_ticketer: ticketTicketer,\n        ticket_amount: ticketAmount,\n        destination,\n        entrypoint,\n    };\n});\nconst createIncreasePaidStorageOperation = ({ source, fee, gasLimit, storageLimit, amount, destination, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE,\n        source,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        amount,\n        destination,\n    };\n});\nconst createDrainDelegateOperation = ({ consensus_key, delegate, destination, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DRAIN_DELEGATE,\n        consensus_key,\n        delegate,\n        destination,\n    };\n});\nconst createBallotOperation = ({ source, proposal, ballot }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.BALLOT,\n        source,\n        proposal,\n        ballot,\n    };\n});\nconst createProposalsOperation = ({ source, proposals }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.PROPOSALS,\n        source,\n        proposals,\n    };\n});\nconst createUpdateConsensusKeyOperation = ({ source, fee, gasLimit, storageLimit, pk, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.UPDATE_CONSENSUS_KEY,\n        source,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        pk,\n    };\n});\nconst createSmartRollupAddMessagesOperation = ({ source, fee, gasLimit, storageLimit, message, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES,\n        source,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        message,\n    };\n});\nconst createSmartRollupOriginateOperation = ({ source, fee, gasLimit, storageLimit, pvmKind, kernel, originationProof, parametersType, }) => __awaiter(void 0, void 0, void 0, function* () {\n    return {\n        kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE,\n        source,\n        fee,\n        gas_limit: gasLimit,\n        storage_limit: storageLimit,\n        pvm_kind: pvmKind,\n        kernel,\n        origination_proof: originationProof,\n        parameters_ty: parametersType,\n    };\n});\n\nconst attachKind = (op, kind) => {\n    return Object.assign(Object.assign({}, op), { kind });\n};\nconst findWithKind = (arr, kind) => {\n    if (Array.isArray(arr)) {\n        const found = arr.find((op) => op.kind === kind);\n        if (found && isKind(found, kind)) {\n            return found;\n        }\n    }\n};\nconst isKind = (op, kind) => {\n    return op.kind === kind;\n};\nconst isOpWithFee = (op) => {\n    return ([\n        'transaction',\n        'delegation',\n        'origination',\n        'reveal',\n        'register_global_constant',\n        'increase_paid_storage',\n        'tx_rollup_origination',\n        'tx_rollup_submit_batch',\n        'transfer_ticket',\n        'update_consensus_key',\n        'smart_rollup_add_messages',\n        'smart_rollup_originate',\n    ].indexOf(op.kind) !== -1);\n};\nconst isOpRequireReveal = (op) => {\n    return ([\n        'transaction',\n        'delegation',\n        'origination',\n        'register_global_constant',\n        'increase_paid_storage',\n        'tx_rollup_origination',\n        'tx_rollup_submit_batch',\n        'transfer_ticket',\n        'update_consensus_key',\n        'smart_rollup_add_messages',\n        'smart_rollup_originate',\n    ].indexOf(op.kind) !== -1);\n};\nconst hasMetadata = (op) => {\n    return 'metadata' in op;\n};\nconst hasMetadataWithResult = (op) => {\n    return hasMetadata(op) && 'operation_result' in op.metadata;\n};\nconst hasMetadataWithInternalOperationResult = (op) => {\n    return hasMetadata(op) && 'internal_operation_results' in op.metadata;\n};\n\nconst isErrorWithMessage = (error) => {\n    return 'with' in error;\n};\n/**\n *  @category Error\n *  @description Generic tezos error that will be thrown when a mistake occurs when doing an operation; more details here https://tezos.gitlab.io/api/errors.html\n */\nclass TezosOperationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.RpcError {\n    constructor(errors, errorDetails) {\n        super();\n        this.errors = errors;\n        this.errorDetails = errorDetails;\n        this.name = 'TezosOperationError';\n        // Last error is 'often' the one with more detail\n        const lastError = errors[errors.length - 1];\n        this.id = lastError.id;\n        this.kind = lastError.kind;\n        this.message = `(${this.kind}) ${this.id}`;\n        if (isErrorWithMessage(lastError)) {\n            if (lastError.with.string) {\n                this.message = lastError.with.string;\n            }\n            else if (lastError.with.int) {\n                this.message = lastError.with.int;\n            }\n            else {\n                this.message = JSON.stringify(lastError.with);\n            }\n        }\n    }\n}\n/**\n *  @category Error\n *  @description Tezos error that will be thrown when a mistake happens during the preapply stage\n */\nclass TezosPreapplyFailureError extends Error {\n    constructor(result) {\n        super();\n        this.result = result;\n        this.name = 'TezosPreapplyFailureError';\n        this.message = 'Preapply returned an unexpected result';\n    }\n}\n// Flatten all operation content results and internal operation results into a single array\n// Some cases where we can have multiple operation results or internal operation results are:\n// - When an operation includes a reveal operation\n// - When an operation is made using the batch API\n// - Smart contract call can contains internal operation results when they call other smart contract internally or originate contracts\nconst flattenOperationResult = (response) => {\n    const results = Array.isArray(response) ? response : [response];\n    const returnedResults = [];\n    for (let i = 0; i < results.length; i++) {\n        for (let j = 0; j < results[i].contents.length; j++) {\n            const content = results[i].contents[j];\n            if (hasMetadataWithResult(content) && 'fee' in content) {\n                returnedResults.push(Object.assign({ fee: content.fee }, content.metadata.operation_result));\n                if (Array.isArray(content.metadata.internal_operation_results)) {\n                    content.metadata.internal_operation_results.forEach((x) => returnedResults.push(x.result));\n                }\n            }\n        }\n    }\n    return returnedResults;\n};\n/***\n * @description Flatten all error from preapply response (including internal error)\n */\nconst flattenErrors = (response, status = 'failed') => {\n    const results = Array.isArray(response) ? response : [response];\n    let errors = [];\n    // Transaction that do not fail will be backtracked in case one failure occur\n    for (let i = 0; i < results.length; i++) {\n        for (let j = 0; j < results[i].contents.length; j++) {\n            const content = results[i].contents[j];\n            if (hasMetadata(content)) {\n                if (hasMetadataWithResult(content) &&\n                    content.metadata.operation_result.status === status) {\n                    errors = errors.concat(content.metadata.operation_result.errors || []);\n                }\n                if (hasMetadataWithInternalOperationResult(content) &&\n                    Array.isArray(content.metadata.internal_operation_results)) {\n                    for (const internalResult of content.metadata.internal_operation_results) {\n                        if ('result' in internalResult && internalResult.result.status === status) {\n                            errors = errors.concat(internalResult.result.errors || []);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return errors;\n};\n/**\n *  @category Error\n *  @description Error that indicates a general failure happening during an origination operation\n */\nclass OriginationOperationError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TaquitoError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'OriginationOperationError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid estimate value being passed\n */\nclass InvalidEstimateValueError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'InvalidEstimateValueError';\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid confirmation count has been passed or configured\n */\nclass InvalidConfirmationCountError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(invalidConfirmations) {\n        super();\n        this.invalidConfirmations = invalidConfirmations;\n        this.name = 'InvalidConfirmationCountError';\n        this.message = `Invalid confirmation count ${invalidConfirmations} expecting at least 1`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates that confirmation polling timed out\n */\nclass ConfirmationTimeoutError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.NetworkError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'ConfirmationTimeoutError';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an error being returned from the RPC response\n */\nclass RPCResponseError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.RpcError {\n    constructor(message, cause) {\n        super();\n        this.message = message;\n        this.cause = cause;\n        this.name = 'RPCResponseError';\n    }\n}\n\n/**\n * @description Utility class to interact with Tezos operations\n */\nclass Operation {\n    get includedInBlock() {\n        return this._foundAt;\n    }\n    /**\n     *\n     * @param hash Operation hash\n     * @param raw Raw operation that was injected\n     * @param context Taquito context allowing access to rpc and signer\n     * @throws {@link InvalidOperationHashError}\n     */\n    constructor(hash, raw, results, context) {\n        this.hash = hash;\n        this.raw = raw;\n        this.results = results;\n        this.context = context;\n        this._pollingConfig$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1);\n        this.currentHead$ = this._pollingConfig$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((config) => {\n            return new rxjs__WEBPACK_IMPORTED_MODULE_8__.BehaviorSubject(config).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.timeout)({\n                each: config.timeout * 1000,\n                with: () => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)(() => new ConfirmationTimeoutError(`Confirmation polling timed out`)),\n            }));\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)(() => {\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.defer)(() => createObservableFromSubscription(this.context.stream.subscribeBlock('head'))).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((newHead) => {\n                var _a, _b;\n                const prevHead = (_b = (_a = this.lastHead) === null || _a === void 0 ? void 0 : _a.header.level) !== null && _b !== void 0 ? _b : newHead.header.level - 1;\n                return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.range)(prevHead + 1, newHead.header.level - prevHead - 1).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.concatMap)((level) => this.context.readProvider.getBlock(level)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.endWith)(newHead));\n            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.tap)((newHead) => (this.lastHead = newHead)));\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.shareReplay)({ refCount: true }));\n        // Observable that emit once operation is seen in a block\n        this.confirmed$ = this.currentHead$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((head) => {\n            for (let i = 3; i >= 0; i--) {\n                head.operations[i].forEach((op) => {\n                    if (op.hash === this.hash) {\n                        this._foundAt = head.header.level;\n                    }\n                });\n            }\n            if (head.header.level - this._foundAt >= 0) {\n                return this._foundAt;\n            }\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((x) => x !== undefined), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.shareReplay)());\n        this._foundAt = Number.POSITIVE_INFINITY;\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(this.hash) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationHashError(this.hash);\n        }\n        this.confirmed$\n            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.catchError)(() => {\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(rxjs__WEBPACK_IMPORTED_MODULE_8__.EMPTY);\n        }))\n            .subscribe();\n    }\n    get revealOperation() {\n        return (Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'reveal'));\n    }\n    get revealStatus() {\n        if (this.revealOperation) {\n            return this.revealOperation.metadata.operation_result.status;\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    get status() {\n        return (this.results.map((result) => {\n            if (hasMetadataWithResult(result)) {\n                return result.metadata.operation_result.status;\n            }\n            else {\n                return 'unknown';\n            }\n        })[0] || 'unknown');\n    }\n    /**\n     *\n     * @param confirmations [0] Number of confirmation to wait for\n     * @param timeout [180] Timeout\n     */\n    confirmation(confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof confirmations !== 'undefined' && confirmations < 1) {\n                throw new InvalidConfirmationCountError(confirmations);\n            }\n            const { defaultConfirmationCount, confirmationPollingTimeoutSecond } = this.context.config;\n            this._pollingConfig$.next({\n                timeout: timeout || confirmationPollingTimeoutSecond,\n            });\n            const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n            return new Promise((resolve, reject) => {\n                this.confirmed$\n                    .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)(() => this.currentHead$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((head) => head.header.level - this._foundAt >= conf - 1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)())\n                    .subscribe((_) => {\n                    resolve(this._foundAt + (conf - 1));\n                }, reject);\n            });\n        });\n    }\n}\n\nclass BatchOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    sumProp(arr, prop) {\n        return arr.reduce((prev, current) => {\n            return prop in current ? Number(current[prop]) + prev : prev;\n        }, 0);\n    }\n    getOriginatedContractAddresses() {\n        const originationOpResults = this.results.filter((x) => x.kind === 'origination');\n        let addresses = [];\n        for (const res of originationOpResults) {\n            if (res.metadata.operation_result.originated_contracts) {\n                addresses = [...addresses, ...res.metadata.operation_result.originated_contracts];\n            }\n        }\n        return addresses;\n    }\n    get status() {\n        return (this.results\n            .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n            .map((result) => {\n            if (hasMetadataWithResult(result)) {\n                const opResult = result.metadata.operation_result;\n                return opResult.status;\n            }\n            else {\n                return 'unknown';\n            }\n        })[0] || 'unknown');\n    }\n    get fee() {\n        return this.sumProp(this.params, 'fee');\n    }\n    get gasLimit() {\n        return this.sumProp(this.params, 'gas_limit');\n    }\n    get storageLimit() {\n        return this.sumProp(this.params, 'storage_limit');\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ROUND_UP });\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.consumedMilliGas).dividedBy(1000).toString();\n    }\n    get consumedMilliGas() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'consumed_milligas'));\n    }\n    get storageDiff() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'paid_storage_size_diff'));\n    }\n    get errors() {\n        return flattenErrors({ contents: this.results });\n    }\n}\n\nclass Provider {\n    get rpc() {\n        return this.context.rpc;\n    }\n    get signer() {\n        return this.context.signer;\n    }\n    constructor(context) {\n        this.context = context;\n    }\n    forge({ opOb: { branch, contents, protocol }, counter }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const forgedBytes = yield this.context.forger.forge({ branch, contents });\n            return {\n                opbytes: forgedBytes,\n                opOb: {\n                    branch,\n                    contents,\n                    protocol,\n                },\n                counter,\n            };\n        });\n    }\n    estimate(_a, estimator) {\n        var { fee, gasLimit, storageLimit } = _a, rest = __rest(_a, [\"fee\", \"gasLimit\", \"storageLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            let calculatedFee = fee;\n            let calculatedGas = gasLimit;\n            let calculatedStorage = storageLimit;\n            if (calculatedFee && calculatedFee % 1 !== 0) {\n                throw new InvalidEstimateValueError(`Fee value must not be a decimal: ${calculatedFee}`);\n            }\n            if (calculatedGas && calculatedGas % 1 !== 0) {\n                throw new InvalidEstimateValueError(`Gas Limit value must not be a decimal: ${calculatedGas}`);\n            }\n            if (calculatedStorage && calculatedStorage % 1 !== 0) {\n                throw new InvalidEstimateValueError(`Storage Limit value must not be a decimal: ${calculatedStorage}`);\n            }\n            if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n                const estimation = yield estimator(Object.assign({ fee, gasLimit, storageLimit }, rest));\n                calculatedFee !== null && calculatedFee !== void 0 ? calculatedFee : (calculatedFee = estimation.suggestedFeeMutez);\n                calculatedGas !== null && calculatedGas !== void 0 ? calculatedGas : (calculatedGas = estimation.gasLimit);\n                calculatedStorage !== null && calculatedStorage !== void 0 ? calculatedStorage : (calculatedStorage = estimation.storageLimit);\n            }\n            return {\n                fee: calculatedFee,\n                gasLimit: calculatedGas,\n                storageLimit: calculatedStorage,\n            };\n        });\n    }\n    getRPCOp(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (param.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION:\n                    return createTransferOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    return createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign({}, param)));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                    return createSetDelegateOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT:\n                    return createRegisterGlobalConstantOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    return createIncreasePaidStorageOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET:\n                    return createTransferTicketOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES:\n                    return createSmartRollupAddMessagesOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE:\n                    return createSmartRollupOriginateOperation(Object.assign({}, param));\n                default:\n                    throw new _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.InvalidOperationKindError(param.kind);\n            }\n        });\n    }\n    runOperation(op) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                opResponse: yield this.rpc.runOperation(op),\n                op,\n                context: this.context.clone(),\n            };\n        });\n    }\n    simulate(op) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return {\n                opResponse: yield this.rpc.simulateOperation(op),\n                op,\n                context: this.context.clone(),\n            };\n        });\n    }\n    isRevealOpNeeded(op, pkh) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return !(yield this.isAccountRevealRequired(pkh)) || !this.isRevealRequiredForOpType(op)\n                ? false\n                : true;\n        });\n    }\n    isAccountRevealRequired(publicKeyHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return !(yield this.context.readProvider.isAccountRevealed(publicKeyHash, 'head'));\n        });\n    }\n    isRevealRequiredForOpType(op) {\n        let opRequireReveal = false;\n        for (const operation of op) {\n            if (isOpRequireReveal(operation)) {\n                opRequireReveal = true;\n            }\n        }\n        return opRequireReveal;\n    }\n    signAndInject(forgedBytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signed = yield this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n            forgedBytes.opbytes = signed.sbytes;\n            forgedBytes.opOb.signature = signed.prefixSig;\n            const opResponse = [];\n            const results = yield this.rpc.preapplyOperations([forgedBytes.opOb]);\n            if (!Array.isArray(results)) {\n                throw new TezosPreapplyFailureError(results);\n            }\n            for (let i = 0; i < results.length; i++) {\n                for (let j = 0; j < results[i].contents.length; j++) {\n                    opResponse.push(results[i].contents[j]);\n                }\n            }\n            const errors = flattenErrors(results);\n            if (errors.length) {\n                throw new TezosOperationError(errors, 'Error occurred during validation simulation of operation');\n            }\n            return {\n                hash: yield this.context.injector.inject(forgedBytes.opbytes),\n                forgedBytes,\n                opResponse,\n                context: this.context.clone(),\n            };\n        });\n    }\n}\n\nclass WalletOperationBatch {\n    constructor(walletProvider, context) {\n        this.walletProvider = walletProvider;\n        this.context = context;\n        this.operations = [];\n    }\n    /**\n     *\n     * @description Add a transaction operation to the batch\n     *\n     * @param params Transfer operation parameter\n     */\n    withTransfer(params) {\n        const toValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.to);\n        if (toValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.to, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(toValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add a contract call to the batch\n     *\n     * @param params Call a contract method\n     * @param options Generic operation parameters\n     */\n    withContractCall(params, options = {}) {\n        return this.withTransfer(params.toTransferParams(options));\n    }\n    /**\n     *\n     * @description Add a delegation operation to the batch\n     *\n     * @param params Delegation operation parameter\n     */\n    withDelegation(params) {\n        var _a;\n        const delegateValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.delegate) !== null && _a !== void 0 ? _a : '');\n        if (params.delegate && delegateValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.delegate, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(delegateValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add an origination operation to the batch\n     *\n     * @param params Origination operation parameter\n     */\n    withOrigination(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add an IncreasePaidStorage operation to the batch\n     *\n     * @param param IncreasePaidStorage operation parameter\n     */\n    withIncreasePaidStorage(params) {\n        const destinationValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.destination);\n        if (destinationValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.destination, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(destinationValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE }, params));\n        return this;\n    }\n    mapOperation(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (param.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION:\n                    return this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () { return param; }));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    return this.walletProvider.mapOriginateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n                        return this.context.parser.prepareCodeOrigination(Object.assign({}, param));\n                    }));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                    return this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () { return param; }));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    return this.walletProvider.mapIncreasePaidStorageWalletParams(() => __awaiter(this, void 0, void 0, function* () { return param; }));\n                default:\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationKindError(JSON.stringify(param.kind));\n            }\n        });\n    }\n    /**\n     *\n     * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n     *\n     * @param params Operations parameter\n     * @throws {@link InvalidOperationKindError}\n     */\n    with(params) {\n        for (const param of params) {\n            switch (param.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION:\n                    this.withTransfer(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    this.withOrigination(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                    this.withDelegation(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    this.withIncreasePaidStorage(param);\n                    break;\n                default:\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationKindError(JSON.stringify(param.kind));\n            }\n        }\n        return this;\n    }\n    /**\n     *\n     * @description Submit batch operation to wallet\n     *\n     */\n    send() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const ops = [];\n            for (const op of this.operations) {\n                ops.push(yield this.mapOperation(op));\n            }\n            const opHash = yield this.walletProvider.sendOperations(ops);\n            return this.context.operationFactory.createBatchOperation(opHash);\n        });\n    }\n}\nclass Wallet {\n    constructor(context) {\n        this.context = context;\n        this.walletCommand = (send) => {\n            return {\n                send,\n            };\n        };\n    }\n    get walletProvider() {\n        return this.context.walletProvider;\n    }\n    /**\n     * @description Retrieve the PKH of the account that is currently in use by the wallet\n     *\n     * @param option Option to use while fetching the PKH.\n     * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet\n     */\n    pkh({ forceRefetch } = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._pkh || forceRefetch) {\n                this._pkh = yield this.walletProvider.getPKH();\n            }\n            return this._pkh;\n        });\n    }\n    /**\n     * @description Retrieve the PK of the account that is currently in use by the wallet\n     *\n     * @param option Option to use while fetching the PK.\n     * If forceRefetch is specified the wallet provider implementation will refetch the PK from the wallet\n     */\n    pk({ forceRefetch } = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._pk || forceRefetch) {\n                this._pk = yield this.walletProvider.getPK();\n            }\n            return this._pk;\n        });\n    }\n    /**\n     *\n     * @description Originate a new contract according to the script in parameters.\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param originateParams Originate operation parameter\n     */\n    originate(params) {\n        return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n            const mappedParams = yield this.walletProvider.mapOriginateParamsToWalletParams(() => this.context.parser.prepareCodeOrigination(Object.assign({}, params)));\n            const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n            return this.context.operationFactory.createOriginationOperation(opHash);\n        }));\n    }\n    /**\n     *\n     * @description Set the delegate for a contract.\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param delegateParams operation parameter\n     */\n    setDelegate(params) {\n        var _a;\n        const delegateValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.delegate) !== null && _a !== void 0 ? _a : '');\n        if (params.delegate && delegateValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.delegate, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(delegateValidation));\n        }\n        return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n            const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () { return params; }));\n            const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n            return this.context.operationFactory.createDelegationOperation(opHash);\n        }));\n    }\n    /**\n     *\n     * @description failing_noop operation that is guaranteed to fail. DISCLAIMER: Not all wallets support signing failing_noop operations.\n     *\n     * @returns Signature for a failing_noop\n     *\n     * @param params operation parameter\n     */\n    signFailingNoop(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = {\n                kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.FAILING_NOOP,\n                arbitrary: params.arbitrary,\n            };\n            const hash = yield this.context.readProvider.getBlockHash(params.basedOnBlock);\n            const forgedBytes = yield this.context.forger.forge({\n                branch: hash,\n                contents: [op],\n            });\n            const signature = yield this.walletProvider.sign(forgedBytes, Uint8Array.from([3]));\n            return {\n                signature,\n                bytes: forgedBytes,\n                signedContent: {\n                    branch: hash,\n                    contents: [\n                        {\n                            kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.FAILING_NOOP,\n                            arbitrary: params.arbitrary,\n                        },\n                    ],\n                },\n            };\n        });\n    }\n    /**\n     *\n     * @description Register the current address as delegate.\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     */\n    registerDelegate() {\n        return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n            const mappedParams = yield this.walletProvider.mapDelegateParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () {\n                const delegate = yield this.pkh();\n                return { delegate };\n            }));\n            const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n            return this.context.operationFactory.createDelegationOperation(opHash);\n        }));\n    }\n    /**\n     *\n     * @description Transfer tezos tokens from current address to a specific address or call a smart contract.\n     *\n     * @returns A wallet command from which we can send the operation to the wallet\n     *\n     * @param params operation parameter\n     */\n    transfer(params) {\n        const toValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.to);\n        if (toValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.to, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(toValidation));\n        }\n        return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n            const mappedParams = yield this.walletProvider.mapTransferParamsToWalletParams(() => __awaiter(this, void 0, void 0, function* () { return params; }));\n            const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n            return this.context.operationFactory.createTransactionOperation(opHash);\n        }));\n    }\n    /**\n     *\n     * @description\n     *\n     * @returns\n     *\n     * @param params\n     */\n    increasePaidStorage(params) {\n        const destinationValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.destination);\n        if (destinationValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.destination, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(destinationValidation));\n        }\n        return this.walletCommand(() => __awaiter(this, void 0, void 0, function* () {\n            const mappedParams = yield this.walletProvider.mapIncreasePaidStorageWalletParams(() => __awaiter(this, void 0, void 0, function* () { return params; }));\n            const opHash = yield this.walletProvider.sendOperations([mappedParams]);\n            return this.context.operationFactory.createIncreasePaidStorageOperation(opHash);\n        }));\n    }\n    /**\n     *\n     * @description Create a batch of operation\n     *\n     * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch\n     *\n     * @param params List of operation to initialize the batch with\n     */\n    batch(params) {\n        const batch = new WalletOperationBatch(this.walletProvider, this.context);\n        if (Array.isArray(params)) {\n            batch.with(params);\n        }\n        return batch;\n    }\n    /**\n     *\n     * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned\n     * smart contract abstraction will leverage the wallet provider to make smart contract calls\n     *\n     * @param address Smart contract address\n     * @throws {@link InvalidContractAddressError} If the contract address is not valid\n     */\n    at(address, contractAbstractionComposer = (x) => x) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateContractAddress)(address);\n            if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidContractAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(addressValidation));\n            }\n            const rpc = this.context.withExtensions().rpc;\n            const readProvider = this.context.withExtensions().readProvider;\n            const script = yield readProvider.getScript(address, 'head');\n            const entrypoints = yield readProvider.getEntrypoints(address);\n            const abs = new ContractAbstraction(address, script, this, this.context.contract, entrypoints, rpc, readProvider);\n            return contractAbstractionComposer(abs, this.context);\n        });\n    }\n    /**\n     * @deprecated Deprecated in favor of {@link Wallet.pk} will be removed in v19.1\n     * @description Retrieve the PK of the account that is currently in use by the wallet\n     */\n    getPK() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.pk();\n        });\n    }\n}\n\nconst receiptFromOperation = (op, { ALLOCATION_BURN, ORIGINATION_BURN } = {\n    ALLOCATION_BURN: 257,\n    ORIGINATION_BURN: 257,\n}) => {\n    bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ROUND_UP });\n    const operationResults = flattenOperationResult({ contents: op });\n    let totalMilliGas = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    let totalStorage = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    let totalFee = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    let totalOriginationBurn = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    let totalAllocationBurn = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    let totalPaidStorageDiff = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](0);\n    operationResults.forEach((result) => {\n        totalFee = totalFee.plus(result.fee || 0);\n        totalOriginationBurn = totalOriginationBurn.plus(Array.isArray(result.originated_contracts)\n            ? result.originated_contracts.length * ORIGINATION_BURN\n            : 0);\n        totalAllocationBurn = totalAllocationBurn.plus('allocated_destination_contract' in result ? ALLOCATION_BURN : 0);\n        totalMilliGas = totalMilliGas.plus(result.consumed_milligas || 0);\n        totalPaidStorageDiff = totalPaidStorageDiff.plus('paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0);\n    });\n    totalStorage = totalStorage\n        .plus(totalAllocationBurn)\n        .plus(totalOriginationBurn)\n        .plus(totalPaidStorageDiff);\n    return {\n        totalFee,\n        totalMilliGas,\n        totalGas: totalMilliGas.dividedBy(1000),\n        totalStorage,\n        totalAllocationBurn,\n        totalOriginationBurn,\n        totalPaidStorageDiff,\n        totalStorageBurn: new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](totalStorage.multipliedBy(COST_PER_BYTE)),\n    };\n};\n\n/**\n *  @category Error\n *  @description Error that indicates undefined confirmation has not been specified or configured\n */\nclass ConfirmationUndefinedError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TezosToolkitConfigError {\n    constructor() {\n        super();\n        this.name = 'ConfirmationUndefinedError';\n        this.message = 'Default confirmation count can not be undefined';\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates a generic failure when trying to fetch an observable\n */\nclass ObservableError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.NetworkError {\n    constructor(message) {\n        super();\n        this.message = message;\n        this.name = 'ObservableError';\n    }\n}\n\nconst MAX_BRANCH_ANCESTORS = 60;\n/**\n * @description WalletOperation allows to monitor operation inclusion on chains and surface information related to the operation\n */\nclass WalletOperation {\n    operationResults() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._operationResult.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)()).toPromise();\n        });\n    }\n    /**\n     * @description Receipt expose the total amount of tezos token burn and spent on fees\n     * The promise returned by receipt will resolve only once the transaction is included\n     */\n    receipt() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const results = yield this.operationResults();\n            if (!results) {\n                throw new ObservableError('Unable to get operation results');\n            }\n            return receiptFromOperation(results);\n        });\n    }\n    /**\n     *\n     * @param opHash Operation hash\n     * @param raw Raw operation that was injected\n     * @param context Taquito context allowing access to rpc and signer\n     * @throws {InvalidOperationHashError}\n     */\n    constructor(opHash, context, _newHead$) {\n        this.opHash = opHash;\n        this.context = context;\n        this._newHead$ = _newHead$;\n        this._operationResult = new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1);\n        this._includedInBlock = new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1);\n        this._included = false;\n        this.newHead$ = this._newHead$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((newHead) => {\n            var _a, _b;\n            const prevHead = (_b = (_a = this.lastHead) === null || _a === void 0 ? void 0 : _a.header.level) !== null && _b !== void 0 ? _b : newHead.header.level - 1;\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.range)(prevHead + 1, newHead.header.level - prevHead - 1).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.concatMap)((level) => this.context.readProvider.getBlock(level)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.endWith)(newHead));\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.tap)((newHead) => (this.lastHead = newHead)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.share)({\n            connector: () => new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1),\n            resetOnError: false,\n            resetOnComplete: false,\n            resetOnRefCountZero: false,\n        }));\n        // Observable that emit once operation is seen in a block\n        this.confirmed$ = this.newHead$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((head) => {\n            for (const opGroup of head.operations) {\n                for (const op of opGroup) {\n                    if (op.hash === this.opHash) {\n                        this._included = true;\n                        this._includedInBlock.next(head);\n                        this._operationResult.next(op.contents);\n                        // Return the block where the operation was found\n                        return head;\n                    }\n                }\n            }\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((x) => {\n            return typeof x !== 'undefined';\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.share)({\n            connector: () => new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1),\n            resetOnError: false,\n            resetOnComplete: false,\n            resetOnRefCountZero: false,\n        }));\n        if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateOperation)(this.opHash) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationHashError(this.opHash);\n        }\n        this.confirmed$\n            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.catchError)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(undefined)))\n            .subscribe();\n    }\n    getCurrentConfirmation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 0;\n            }\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.combineLatest)([this._includedInBlock, (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(this.context.readProvider.getBlock('head'))])\n                .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(([foundAtBlock, head]) => {\n                return head.header.level - foundAtBlock.header.level + 1;\n            }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)())\n                .toPromise();\n        });\n    }\n    isInCurrentBranch(tipBlockIdentifier = 'head') {\n        return __awaiter(this, void 0, void 0, function* () {\n            // By default it is assumed that the operation is in the current branch\n            if (!this._included) {\n                return true;\n            }\n            const tipBlockHeaderLevel = yield this.context.readProvider.getBlockLevel(tipBlockIdentifier);\n            const inclusionBlock = yield this._includedInBlock.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)()).toPromise();\n            if (!inclusionBlock) {\n                throw new ObservableError('Inclusion block is undefined');\n            }\n            const levelDiff = (tipBlockHeaderLevel - inclusionBlock.header.level);\n            // Block produced before the operation is included are assumed to be part of the current branch\n            if (levelDiff <= 0) {\n                return true;\n            }\n            const tipBlockLevel = Math.min(inclusionBlock.header.level + levelDiff, inclusionBlock.header.level + MAX_BRANCH_ANCESTORS);\n            const blocks = new Set(yield this.context.readProvider.getLiveBlocks(tipBlockLevel));\n            return blocks.has(inclusionBlock.hash);\n        });\n    }\n    confirmationObservable(confirmations) {\n        if (typeof confirmations !== 'undefined' && confirmations < 1) {\n            throw new InvalidConfirmationCountError(confirmations);\n        }\n        const { defaultConfirmationCount } = this.context.config;\n        const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n        if (conf === undefined) {\n            throw new ConfirmationUndefinedError();\n        }\n        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.combineLatest)([this._includedInBlock, this.newHead$]).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.distinctUntilChanged)(([, previousHead], [, newHead]) => {\n            return previousHead.hash === newHead.hash;\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(([foundAtBlock, head]) => {\n            return {\n                block: head,\n                expectedConfirmation: conf,\n                currentConfirmation: head.header.level - foundAtBlock.header.level + 1,\n                completed: head.header.level - foundAtBlock.header.level >= conf - 1,\n                isInCurrentBranch: () => this.isInCurrentBranch(head.hash),\n            };\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeWhile)(({ completed }) => !completed, true));\n    }\n    /**\n     *\n     * @param confirmations [0] Number of confirmation to wait for\n     */\n    confirmation(confirmations) {\n        return this.confirmationObservable(confirmations).toPromise();\n    }\n}\n\nclass TransactionWalletOperation extends WalletOperation {\n    constructor(opHash, context, newHead$) {\n        super(opHash, context, newHead$);\n        this.opHash = opHash;\n        this.context = context;\n    }\n    revealOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (!operationResult) {\n                throw new ObservableError('operationResult returned undefined');\n            }\n            return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n        });\n    }\n    transactionOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (!operationResult) {\n                throw new ObservableError('operationResult returned undefined');\n            }\n            return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION);\n        });\n    }\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 'pending';\n            }\n            const op = yield this.transactionOperation();\n            if (!op) {\n                return 'unknown';\n            }\n            return op.metadata.operation_result.status;\n        });\n    }\n}\n\nclass OriginationWalletOperation extends WalletOperation {\n    constructor(opHash, context, newHead$) {\n        super(opHash, context, newHead$);\n        this.opHash = opHash;\n        this.context = context;\n    }\n    originationOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (operationResult) {\n                return findWithKind(operationResult, _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION);\n            }\n            else {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n        });\n    }\n    revealOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (operationResult) {\n                return findWithKind(operationResult, _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n            }\n            else {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n        });\n    }\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 'pending';\n            }\n            const op = yield this.originationOperation();\n            if (!op) {\n                return 'unknown';\n            }\n            return op.metadata.operation_result.status;\n        });\n    }\n    contract() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = yield this.originationOperation();\n            const address = ((op === null || op === void 0 ? void 0 : op.metadata.operation_result.originated_contracts) || [])[0];\n            return this.context.wallet.at(address);\n        });\n    }\n}\n\nclass DelegationWalletOperation extends WalletOperation {\n    constructor(opHash, context, newHead$) {\n        super(opHash, context, newHead$);\n        this.opHash = opHash;\n        this.context = context;\n    }\n    revealOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (operationResult) {\n                return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n            }\n            else {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n        });\n    }\n    delegationOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (operationResult) {\n                return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION);\n            }\n            else {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n        });\n    }\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 'pending';\n            }\n            const op = yield this.delegationOperation();\n            if (!op) {\n                return 'unknown';\n            }\n            return op.metadata.operation_result.status;\n        });\n    }\n}\n\nclass LegacyWalletProvider {\n    constructor(context) {\n        this.context = context;\n    }\n    getPKH() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.context.signer.publicKeyHash();\n        });\n    }\n    getPK() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.context.signer.publicKey();\n        });\n    }\n    mapTransferParamsToWalletParams(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return attachKind(yield params(), _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION);\n        });\n    }\n    mapOriginateParamsToWalletParams(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return attachKind(yield params(), _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION);\n        });\n    }\n    mapDelegateParamsToWalletParams(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return attachKind(yield params(), _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION);\n        });\n    }\n    mapIncreasePaidStorageWalletParams(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return attachKind(yield params(), _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE);\n        });\n    }\n    sendOperations(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = yield this.context.batch.batch(params).send();\n            return op.hash;\n        });\n    }\n    sign(bytes, watermark) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { prefixSig } = yield this.context.signer.sign(bytes, watermark);\n            return prefixSig;\n        });\n    }\n}\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the object representation\n */\nclass ContractMethodObject {\n    constructor(provider, address, parameterSchema, name, args = 'unit', isMultipleEntrypoint = true, isAnonymous = false) {\n        this.provider = provider;\n        this.address = address;\n        this.parameterSchema = parameterSchema;\n        this.name = name;\n        this.args = args;\n        this.isMultipleEntrypoint = isMultipleEntrypoint;\n        this.isAnonymous = isAnonymous;\n    }\n    /**\n     * @description Get the signature of the smart contract method\n     */\n    getSignature() {\n        return this.isAnonymous\n            ? this.parameterSchema.ExtractSchema()[this.name]\n            : this.parameterSchema.ExtractSchema();\n    }\n    /**\n     *\n     * @description Send the smart contract operation\n     *\n     * @param Options generic operation parameter\n     */\n    send(params = {}) {\n        if (this.provider instanceof Wallet) {\n            return this.provider.transfer(this.toTransferParams(params)).send();\n        }\n        else {\n            return this.provider.transfer(this.toTransferParams(params));\n        }\n    }\n    /**\n     *\n     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n     *\n     * @param Options generic transfer operation parameters\n     */\n    toTransferParams({ fee, gasLimit, storageLimit, source, amount = 0, mutez = false, } = {}) {\n        const fullTransferParams = {\n            to: this.address,\n            amount,\n            fee,\n            mutez,\n            source,\n            gasLimit,\n            storageLimit,\n            parameter: {\n                entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n                value: this.isAnonymous\n                    ? this.parameterSchema.EncodeObject({ [this.name]: this.args })\n                    : this.parameterSchema.EncodeObject(this.args),\n            },\n        };\n        return fullTransferParams;\n    }\n}\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the flattened representation\n */\nclass ContractMethod {\n    constructor(provider, address, parameterSchema, name, args, isMultipleEntrypoint = true, isAnonymous = false) {\n        this.provider = provider;\n        this.address = address;\n        this.parameterSchema = parameterSchema;\n        this.name = name;\n        this.args = args;\n        this.isMultipleEntrypoint = isMultipleEntrypoint;\n        this.isAnonymous = isAnonymous;\n    }\n    validateArgs(args, schema, name) {\n        const sigs = schema.ExtractSignatures();\n        if (!sigs.find((x) => x.length === args.length)) {\n            throw new InvalidParameterError(name, sigs, args);\n        }\n    }\n    /**\n     * @description Get the schema of the smart contract method\n     */\n    get schema() {\n        return this.isAnonymous\n            ? this.parameterSchema.ExtractSchema()[this.name]\n            : this.parameterSchema.ExtractSchema();\n    }\n    /**\n     * @description Get the signature of the smart contract method\n     */\n    getSignature() {\n        if (this.isAnonymous) {\n            const sig = this.parameterSchema.ExtractSignatures().find((x) => x[0] === this.name);\n            if (sig) {\n                sig.shift();\n                return sig;\n            }\n        }\n        else {\n            const sig = this.parameterSchema.ExtractSignatures();\n            return sig.length == 1 ? sig[0] : sig;\n        }\n    }\n    /**\n     *\n     * @description Send the smart contract operation\n     *\n     * @param Options generic operation parameter\n     */\n    send(params = {}) {\n        if (this.provider instanceof Wallet) {\n            return this.provider\n                .transfer(this.toTransferParams(params))\n                .send();\n        }\n        else {\n            return this.provider.transfer(this.toTransferParams(params));\n        }\n    }\n    /**\n     *\n     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n     *\n     * @param Options generic transfer operation parameters\n     */\n    toTransferParams({ fee, gasLimit, storageLimit, source, amount = 0, mutez = false, } = {}) {\n        const fullTransferParams = {\n            to: this.address,\n            amount,\n            fee,\n            mutez,\n            source,\n            gasLimit,\n            storageLimit,\n            parameter: {\n                entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n                value: this.isAnonymous\n                    ? this.parameterSchema.Encode(this.name, ...this.args)\n                    : this.parameterSchema.Encode(...this.args),\n            },\n        };\n        return fullTransferParams;\n    }\n}\n\nclass OnChainView {\n    constructor(_rpc, _readProvider, _contractAddress, _smartContractViewSchema, _contractStorageType, _args = 'Unit') {\n        this._rpc = _rpc;\n        this._readProvider = _readProvider;\n        this._contractAddress = _contractAddress;\n        this._smartContractViewSchema = _smartContractViewSchema;\n        this._contractStorageType = _contractStorageType;\n        this._args = _args;\n    }\n    /**\n     * @description Get the signature of the smart contract view\n     */\n    getSignature() {\n        return {\n            parameter: this._smartContractViewSchema.extractArgsSchema(),\n            result: this._smartContractViewSchema.extractResultSchema(),\n        };\n    }\n    /**\n     * @description Get the result of the view simulation\n     * @param executionContext.source the public key hash of the account who initialized this view execution.\n     * @param executionContext.viewCaller the contract address which is the caller of view.\n     */\n    executeView(executionContext) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.verifyContextExecution(executionContext);\n            const chainId = yield this._readProvider.getChainId();\n            const viewArgs = this.transformArgsToMichelson();\n            const scriptView = {\n                contract: this._contractAddress,\n                view: this._smartContractViewSchema.viewName,\n                input: viewArgs,\n                chain_id: chainId,\n                source: executionContext.viewCaller,\n            };\n            if (executionContext.source) {\n                scriptView.payer = executionContext.source;\n            }\n            return this.executeViewAndDecodeResult(scriptView);\n        });\n    }\n    verifyContextExecution(executionContext) {\n        if (executionContext.source &&\n            (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(executionContext.source) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new InvalidViewSimulationContext(`The source account who initialized the view execution is invalid: ${executionContext.source}.`);\n        }\n        if (!executionContext.viewCaller ||\n            (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(executionContext.viewCaller) !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new InvalidViewSimulationContext(`The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`);\n        }\n    }\n    transformArgsToMichelson() {\n        try {\n            return this._smartContractViewSchema.encodeViewArgs(this._args);\n        }\n        catch (error) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidViewParameterError(this._smartContractViewSchema.viewName, this.getSignature(), this._args, error);\n        }\n    }\n    /**\n     * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.\n     *\n     * Certain specific instructions have different semantics in view:\n     * BALANCE represents the current amount of mutez held by the contract where view is;\n     * SENDER represents the contract which is the caller of view;\n     * SELF_ADDRESS represents the contract where view is;\n     * AMOUNT is always 0 mutez.\n     *\n     */\n    adaptViewCodeToContext(instructions, viewCaller, contractBalance) {\n        const instructionsToReplace = {\n            BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],\n            SENDER: [{ prim: 'PUSH', args: [{ prim: 'address' }, { string: viewCaller }] }],\n            SELF_ADDRESS: [\n                { prim: 'PUSH', args: [{ prim: 'address' }, { string: this._contractAddress }] },\n            ],\n            AMOUNT: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] }],\n        };\n        instructions.forEach((inst, i) => {\n            if (inst.prim in instructionsToReplace) {\n                instructions[i] = Object(instructionsToReplace)[inst.prim];\n            }\n            if (inst.args && inst.args.length !== 0) {\n                this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);\n            }\n            else if (Array.isArray(inst)) {\n                this.adaptViewCodeToContext(inst, viewCaller, contractBalance);\n            }\n        });\n        return instructions;\n    }\n    executeViewAndDecodeResult(viewScript) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let storage;\n            try {\n                storage = (yield this._rpc.runScriptView(viewScript))\n                    .data;\n            }\n            catch (error) {\n                const failWith = validateAndExtractFailwith(error);\n                throw failWith\n                    ? new ViewSimulationError(`The simulation of the on-chain view named ${this._smartContractViewSchema.viewName} failed with: ${JSON.stringify(failWith)}`, this._smartContractViewSchema.viewName, failWith, error)\n                    : error;\n            }\n            return this._smartContractViewSchema.decodeViewResult(storage);\n        });\n    }\n}\n\nclass ContractMethodFactory {\n    constructor(provider, contractAddress) {\n        this.provider = provider;\n        this.contractAddress = contractAddress;\n    }\n    createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {\n        return new ContractMethod(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);\n    }\n    createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint = true, isAnonymous = false) {\n        return new ContractMethodObject(this.provider, this.contractAddress, smartContractMethodSchema, smartContractMethodName, args, isMultipleEntrypoint, isAnonymous);\n    }\n    createContractViewObjectParam(rpc, readProvider, smartContractViewSchema, contractStorageType, viewArgs) {\n        return new OnChainView(rpc, readProvider, this.contractAddress, smartContractViewSchema, contractStorageType, viewArgs);\n    }\n}\n\nconst DEFAULT_SMART_CONTRACT_METHOD_NAME = 'default';\n/**\n * @description Utility class to retrieve data from a smart contract's storage without incurring fees via a contract's view method\n */\nclass ContractView {\n    constructor(currentContract, name, callbackParametersSchema, parameterSchema, args, rpc, readProvider) {\n        this.currentContract = currentContract;\n        this.name = name;\n        this.callbackParametersSchema = callbackParametersSchema;\n        this.parameterSchema = parameterSchema;\n        this.args = args;\n        this.rpc = rpc;\n        this.readProvider = readProvider;\n    }\n    read(chainId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const chainIdValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateChain)(chainId !== null && chainId !== void 0 ? chainId : '');\n            if ((0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateContractAddress)(chainId !== null && chainId !== void 0 ? chainId : '') == _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.DeprecationError(`Since version 12, the lambda view no longer depends on a lambda contract. The read method no longer accepts a contract address as a parameter.`);\n            }\n            else if (chainId && chainIdValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidChainIdError(chainId, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(chainIdValidation));\n            }\n            const arg = this.parameterSchema.Encode(...this.args);\n            const result = yield this.rpc.runView({\n                contract: this.currentContract.address,\n                entrypoint: this.name,\n                input: arg,\n                chain_id: chainId ? chainId : yield this.readProvider.getChainId(),\n            });\n            return this.callbackParametersSchema.Execute(result.data);\n        });\n    }\n}\nconst validateArgs = (args, schema, name) => {\n    const sigs = schema.ExtractSignatures();\n    if (!sigs.find((x) => x.length === args.length)) {\n        throw new InvalidParameterError(name, sigs, args);\n    }\n};\n// lambda view tzip4\nconst isView = (entrypoint) => {\n    let isView = false;\n    if ('prim' in entrypoint && entrypoint.prim === 'pair' && entrypoint.args) {\n        const lastElement = entrypoint.args[entrypoint.args.length - 1];\n        if ('prim' in lastElement && lastElement.prim === 'contract') {\n            isView = true;\n        }\n    }\n    return isView;\n};\n/**\n * @description Smart contract abstraction\n */\nclass ContractAbstraction {\n    constructor(address, script, provider, storageProvider, entrypoints, rpc, readProvider) {\n        this.address = address;\n        this.script = script;\n        this.storageProvider = storageProvider;\n        this.entrypoints = entrypoints;\n        this.rpc = rpc;\n        this.readProvider = readProvider;\n        /**\n         * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n         * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n         *\n         */\n        this.methods = {};\n        /**\n         * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n         * `methodsObject` serves the exact same purpose as the `methods` member. The difference is that it allows passing the parameter in an object format when calling the smart contract method (instead of the flattened representation)\n         * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n         *\n         */\n        this.methodsObject = {};\n        /**\n         * @description Contains lamda views (tzip4) that are implemented by the target Tezos Smart Contract, and offers the user to call the lambda views as if they were native TS/JS methods.\n         * NB: These are the view defined in the tzip4 standard, not the views introduced by the Hangzhou protocol.\n         */\n        this.views = {};\n        /**\n         * @description Contains on-chain views that are defined by the target Tezos Smart Contract, and offers the user to simulate the views execution as if they were native TS/JS methods.\n         * NB: the expected format for the parameter when calling a smart contract view is the object format (same format as for the storage) and not the flattened representation.\n         *\n         */\n        this.contractViews = {};\n        this.contractMethodFactory = new ContractMethodFactory(provider, address);\n        this.schema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema.fromRPCResponse({ script: this.script });\n        this.parameterSchema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.ParameterSchema.fromRPCResponse({ script: this.script });\n        this.viewSchema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.ViewSchema.fromRPCResponse({ script: this.script });\n        if (this.viewSchema.length !== 0) {\n            this._initializeOnChainViews(this, rpc, this.readProvider, this.viewSchema);\n        }\n        this.eventSchema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.EventSchema.fromRPCResponse({ script: this.script });\n        this._initializeMethods(this, this.entrypoints.entrypoints, this.rpc, this.readProvider);\n    }\n    _initializeMethods(currentContract, entrypoints, rpc, readProvider) {\n        const parameterSchema = this.parameterSchema;\n        const keys = Object.keys(entrypoints);\n        if (parameterSchema.isMultipleEntryPoint) {\n            keys.forEach((smartContractMethodName) => {\n                const smartContractMethodSchema = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.ParameterSchema(entrypoints[smartContractMethodName]);\n                this.methods[smartContractMethodName] = function (...args) {\n                    return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, smartContractMethodName, args);\n                };\n                this.methodsObject[smartContractMethodName] = function (args) {\n                    return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, smartContractMethodName, args);\n                };\n                if (isView(entrypoints[smartContractMethodName])) {\n                    const view = function (...args) {\n                        const entrypointParamWithoutCallback = entrypoints[smartContractMethodName]\n                            .args[0];\n                        const smartContractMethodSchemaWithoutCallback = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.ParameterSchema(entrypointParamWithoutCallback);\n                        const parametersCallback = entrypoints[smartContractMethodName].args[1]\n                            .args[0];\n                        const smartContractMethodCallbackSchema = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.ParameterSchema(parametersCallback);\n                        validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);\n                        return new ContractView(currentContract, smartContractMethodName, smartContractMethodCallbackSchema, smartContractMethodSchemaWithoutCallback, args, rpc, readProvider);\n                    };\n                    this.views[smartContractMethodName] = view;\n                }\n            });\n            // Deal with methods with no annotations which were not discovered by the RPC endpoint\n            // Methods with no annotations are discovered using parameter schema\n            const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter((key) => Object.keys(entrypoints).indexOf(key) === -1);\n            anonymousMethods.forEach((smartContractMethodName) => {\n                this.methods[smartContractMethodName] = function (...args) {\n                    return currentContract.contractMethodFactory.createContractMethodFlatParams(parameterSchema, smartContractMethodName, args, false, true);\n                };\n                this.methodsObject[smartContractMethodName] = function (args) {\n                    return currentContract.contractMethodFactory.createContractMethodObjectParam(parameterSchema, smartContractMethodName, args, false, true);\n                };\n            });\n        }\n        else {\n            const smartContractMethodSchema = this.parameterSchema;\n            this.methods[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function (...args) {\n                return currentContract.contractMethodFactory.createContractMethodFlatParams(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);\n            };\n            this.methodsObject[DEFAULT_SMART_CONTRACT_METHOD_NAME] =\n                function (args) {\n                    return currentContract.contractMethodFactory.createContractMethodObjectParam(smartContractMethodSchema, DEFAULT_SMART_CONTRACT_METHOD_NAME, args, false);\n                };\n        }\n    }\n    _initializeOnChainViews(currentContract, rpc, readProvider, allContractViews) {\n        const storageType = this.schema.val;\n        allContractViews.forEach((viewSchema) => {\n            this.contractViews[viewSchema.viewName] = function (args) {\n                return currentContract.contractMethodFactory.createContractViewObjectParam(rpc, readProvider, viewSchema, storageType, args);\n            };\n        });\n    }\n    /**\n     * @description Return a friendly representation of the smart contract storage\n     */\n    storage() {\n        return this.storageProvider.getStorage(this.address, this.schema);\n    }\n    /**\n     *\n     * @description Return a friendly representation of the smart contract big map value\n     *\n     * @param key BigMap key to fetch\n     *\n     * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n     */\n    bigMap(key) {\n        return this.storageProvider.getBigMapKey(this.address, key, this.schema);\n    }\n}\n\nconst setDelegate = (key) => {\n    return [\n        { prim: 'DROP' },\n        { prim: 'NIL', args: [{ prim: 'operation' }] },\n        {\n            prim: 'PUSH',\n            args: [{ prim: 'key_hash' }, { string: key }],\n        },\n        { prim: 'SOME' },\n        { prim: 'SET_DELEGATE' },\n        { prim: 'CONS' },\n    ];\n};\nconst transferImplicit = (key, mutez) => {\n    return [\n        { prim: 'DROP' },\n        { prim: 'NIL', args: [{ prim: 'operation' }] },\n        {\n            prim: 'PUSH',\n            args: [{ prim: 'key_hash' }, { string: key }],\n        },\n        { prim: 'IMPLICIT_ACCOUNT' },\n        {\n            prim: 'PUSH',\n            args: [{ prim: 'mutez' }, { int: `${mutez}` }],\n        },\n        { prim: 'UNIT' },\n        { prim: 'TRANSFER_TOKENS' },\n        { prim: 'CONS' },\n    ];\n};\nconst removeDelegate = () => {\n    return [\n        { prim: 'DROP' },\n        { prim: 'NIL', args: [{ prim: 'operation' }] },\n        { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n        { prim: 'SET_DELEGATE' },\n        { prim: 'CONS' },\n    ];\n};\nconst transferToContract = (key, amount) => {\n    return [\n        { prim: 'DROP' },\n        { prim: 'NIL', args: [{ prim: 'operation' }] },\n        {\n            prim: 'PUSH',\n            args: [{ prim: 'address' }, { string: key }],\n        },\n        { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n        {\n            prim: 'IF_NONE',\n            args: [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }], []],\n        },\n        {\n            prim: 'PUSH',\n            args: [{ prim: 'mutez' }, { int: `${amount}` }],\n        },\n        { prim: 'UNIT' },\n        { prim: 'TRANSFER_TOKENS' },\n        { prim: 'CONS' },\n    ];\n};\nconst MANAGER_LAMBDA = {\n    setDelegate,\n    removeDelegate,\n    transferImplicit,\n    transferToContract,\n};\n\nconst code = [\n    {\n        prim: 'parameter',\n        args: [\n            {\n                prim: 'lambda',\n                args: [\n                    { prim: 'unit' },\n                    {\n                        prim: 'pair',\n                        args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n                    },\n                ],\n            },\n        ],\n    },\n    { prim: 'storage', args: [{ prim: 'unit' }] },\n    { prim: 'code', args: [[{ prim: 'CAR' }, { prim: 'UNIT' }, { prim: 'EXEC' }]] },\n];\nconst storage = 'Unit';\nconst VIEW_LAMBDA = {\n    code,\n    storage\n};\n\nfunction compose(functioncomposer1, functioncomposer2) {\n    return (contractAbstraction, context) => functioncomposer2(functioncomposer1(contractAbstraction, context), context);\n}\n\nclass SaplingStateAbstraction {\n    constructor(id, provider) {\n        this.id = id;\n        this.provider = provider;\n    }\n    /**\n     *\n     * @description Fetch the sapling state\n     *\n     * @param block optional block level to fetch the values from (head will be use by default)\n     * @returns Return a json object of the sapling_state\n     *\n     */\n    getSaplingDiff(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.provider.getSaplingDiffByID(this.id.toString(), block);\n        });\n    }\n    getId() {\n        return this.id.toString();\n    }\n}\n\nclass BigMapAbstraction {\n    constructor(id, schema, provider) {\n        this.id = id;\n        this.schema = schema;\n        this.provider = provider;\n    }\n    /**\n     *\n     * @description Fetch one value in a big map\n     *\n     * @param keysToEncode Key to query (will be encoded properly according to the schema)\n     * @param block optional block level to fetch the values from (head will be use by default)\n     * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map\n     *\n     */\n    get(keyToEncode, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = yield this.provider.getBigMapKeyByID(this.id.toString(), keyToEncode, this.schema, block);\n                return id;\n            }\n            catch (e) {\n                if (e instanceof _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpResponseError && e.status === _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODE.NOT_FOUND) {\n                    return undefined;\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n    /**\n     *\n     * @description Fetch multiple values in a big map\n     * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n     * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n     * If one of the keys does not exist in the big map, its value will be set to undefined.\n     *\n     * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)\n     * @param block optional block level to fetch the values from\n     * @param batchSize optional batch size representing the number of requests to execute in parallel\n     * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n     *\n     */\n    getMultipleValues(keysToEncode, block, batchSize = 5) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.provider.getBigMapKeysByID(this.id.toString(), keysToEncode, this.schema, block, batchSize);\n        });\n    }\n    toJSON() {\n        return this.id.toString();\n    }\n    toString() {\n        return this.id.toString();\n    }\n}\n\n/**\n * @description Override the default michelson encoder semantic to provide richer abstraction over storage properties\n * @param provider ContractProvider (contract API)\n */\n// Override the default michelson encoder semantic to provide richer abstraction over storage properties\nconst smartContractAbstractionSemantic = (provider) => ({\n    // Provide a specific abstraction for BigMaps\n    big_map: (val, code) => {\n        if (!val || !('int' in val) || val.int === undefined) {\n            // Return an empty object in case of missing big map ID\n            return {};\n        }\n        else {\n            const schema = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema(code);\n            return new BigMapAbstraction(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](val.int), schema, provider);\n        }\n    },\n    sapling_state: (val) => {\n        if (!val || !('int' in val) || val.int === undefined) {\n            // Return an empty object in case of missing sapling state ID\n            return {};\n        }\n        else {\n            return new SaplingStateAbstraction(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](val.int), provider);\n        }\n    },\n    /*\n    // TODO: embed useful other abstractions\n    'contract':  () => {},\n    'address':  () => {}\n    */\n});\n\nvar _PrepareProvider_counters;\nconst mergeLimits = (userDefinedLimit, defaultLimits) => {\n    var _a, _b, _c;\n    return {\n        fee: (_a = userDefinedLimit.fee) !== null && _a !== void 0 ? _a : defaultLimits.fee,\n        gasLimit: (_b = userDefinedLimit.gasLimit) !== null && _b !== void 0 ? _b : defaultLimits.gasLimit,\n        storageLimit: (_c = userDefinedLimit.storageLimit) !== null && _c !== void 0 ? _c : defaultLimits.storageLimit,\n    };\n};\n/**\n * @description PrepareProvider is a utility class to output the prepared format of an operation\n */\nclass PrepareProvider extends Provider {\n    constructor(context) {\n        super(context);\n        this.context = context;\n        _PrepareProvider_counters.set(this, void 0);\n        __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n    }\n    getBlockHash(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.context.readProvider.getBlockHash(block !== null && block !== void 0 ? block : 'head~2');\n        });\n    }\n    getProtocolHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.context.readProvider.getNextProtocol('head');\n        });\n    }\n    getHeadCounter(pkh) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            return (_a = this.context.readProvider.getCounter(pkh, 'head')) !== null && _a !== void 0 ? _a : '0';\n        });\n    }\n    adjustGasForBatchOperation(gasLimitBlock, gaslimitOp, numberOfOps) {\n        return bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].min(gaslimitOp, gasLimitBlock.div(numberOfOps + 1));\n    }\n    getAccountLimits(pkh, constants, numberOfOps) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const balance = yield this.context.readProvider.getBalance(pkh, 'head');\n            const { hard_gas_limit_per_operation, hard_gas_limit_per_block, hard_storage_limit_per_operation, cost_per_byte, } = constants;\n            return {\n                fee: 0,\n                gasLimit: numberOfOps\n                    ? Math.floor(this.adjustGasForBatchOperation(hard_gas_limit_per_block, hard_gas_limit_per_operation, numberOfOps).toNumber())\n                    : hard_gas_limit_per_operation.toNumber(),\n                storageLimit: Math.floor(bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber()),\n            };\n        });\n    }\n    getFee(op, pkh, headCounter) {\n        if (!__classPrivateFieldGet(this, _PrepareProvider_counters, \"f\")[pkh] || __classPrivateFieldGet(this, _PrepareProvider_counters, \"f\")[pkh] < headCounter) {\n            __classPrivateFieldGet(this, _PrepareProvider_counters, \"f\")[pkh] = headCounter;\n        }\n        const opCounter = ++__classPrivateFieldGet(this, _PrepareProvider_counters, \"f\")[pkh];\n        return {\n            counter: `${opCounter}`,\n            fee: typeof op.fee === 'undefined' ? '0' : `${op.fee}`,\n            gas_limit: typeof op.gas_limit === 'undefined' ? '0' : `${op.gas_limit}`,\n            storage_limit: typeof op.storage_limit === 'undefined' ? '0' : `${op.storage_limit}`,\n        };\n    }\n    getSource(op, pkh, source) {\n        return { source: typeof op.source === 'undefined' ? source || pkh : op.source };\n    }\n    addRevealOperationIfNeeded(operation, publicKeyHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (isOpRequireReveal(operation)) {\n                const ops = [operation];\n                const { publicKey, pkh } = yield this.getKeys();\n                if (yield this.isAccountRevealRequired(publicKeyHash)) {\n                    if (!publicKey) {\n                        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.PublicKeyNotFoundError(pkh);\n                    }\n                    ops.unshift(yield createRevealOperation({\n                        fee: DEFAULT_FEE.REVEAL,\n                        storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,\n                        gasLimit: getRevealGasLimit(pkh),\n                    }, publicKeyHash, publicKey));\n                    return ops;\n                }\n            }\n            return operation;\n        });\n    }\n    getKeys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isSignerConfigured = this.context.isAnySignerConfigured();\n            return {\n                pkh: isSignerConfigured\n                    ? yield this.signer.publicKeyHash()\n                    : yield this.context.walletProvider.getPKH(),\n                publicKey: isSignerConfigured ? yield this.signer.publicKey() : undefined,\n            };\n        });\n    }\n    convertIntoArray(op) {\n        if (Array.isArray(op)) {\n            return [...op];\n        }\n        else {\n            return [op];\n        }\n    }\n    constructOpContents(ops, headCounter, pkh, source, currentVotingPeriod) {\n        return ops.map((op) => {\n            switch (op.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ACTIVATION:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DRAIN_DELEGATE:\n                    return Object.assign({}, op);\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { balance: typeof op.balance !== 'undefined' ? `${op.balance}` : '0' }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION: {\n                    const cops = Object.assign(Object.assign(Object.assign(Object.assign({}, op), { amount: typeof op.amount !== 'undefined' ? `${op.amount}` : '0' }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));\n                    if (cops.source.toLowerCase().startsWith('kt1')) {\n                        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.DeprecationError(`KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`);\n                    }\n                    return cops;\n                }\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.UPDATE_CONSENSUS_KEY:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES:\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE:\n                    return Object.assign(Object.assign(Object.assign({}, op), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET:\n                    return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { ticket_amount: `${op.ticket_amount}` }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    return Object.assign(Object.assign(Object.assign(Object.assign({}, op), { amount: `${op.amount}` }), this.getSource(op, pkh, source)), this.getFee(op, pkh, headCounter));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.BALLOT:\n                    if (currentVotingPeriod === undefined) {\n                        throw new RPCResponseError(`Failed to get the current voting period index`);\n                    }\n                    return Object.assign(Object.assign({}, op), { period: currentVotingPeriod === null || currentVotingPeriod === void 0 ? void 0 : currentVotingPeriod.voting_period.index });\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.PROPOSALS:\n                    if (currentVotingPeriod === undefined) {\n                        throw new RPCResponseError(`Failed to get the current voting period index`);\n                    }\n                    return Object.assign(Object.assign({}, op), { period: currentVotingPeriod === null || currentVotingPeriod === void 0 ? void 0 : currentVotingPeriod.voting_period.index });\n                default:\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationKindError(op.kind);\n            }\n        });\n    }\n    /**\n     *\n     * @description Method to prepare an activation operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    activate({ pkh, secret }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = yield createActivationOperation({\n                pkh,\n                secret,\n            });\n            const ops = this.convertIntoArray(op);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a reveal operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    reveal({ fee, gasLimit, storageLimit }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh, publicKey } = yield this.getKeys();\n            if (!publicKey) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.PublicKeyNotFoundError(pkh);\n            }\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const mergedEstimates = mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS);\n            const op = yield createRevealOperation({\n                fee: mergedEstimates.fee,\n                gasLimit: mergedEstimates.gasLimit,\n                storageLimit: mergedEstimates.storageLimit,\n            }, pkh, publicKey);\n            const ops = this.convertIntoArray(op);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare an origination operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    originate(_a, source) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS))));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a transaction operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    transaction(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createTransferOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a delegation operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    delegation(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createSetDelegateOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a register delegate operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    registerDelegate({ fee, storageLimit, gasLimit }, source) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const mergedEstimates = mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS);\n            const op = yield createRegisterDelegateOperation({\n                fee: mergedEstimates.fee,\n                storageLimit: mergedEstimates.storageLimit,\n                gasLimit: mergedEstimates.gasLimit,\n            }, pkh);\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a register_global_constant operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    registerGlobalConstant(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createRegisterGlobalConstantOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare an update_consensus_key operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    updateConsensusKey(_a, source) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createUpdateConsensusKeyOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare an increase_paid_storage operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    increasePaidStorage(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createIncreasePaidStorageOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a ballot operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    ballot(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const op = yield createBallotOperation(Object.assign({}, params));\n            const ops = this.convertIntoArray(op);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            let currentVotingPeriod;\n            try {\n                currentVotingPeriod = yield this.rpc.getCurrentPeriod();\n            }\n            catch (e) {\n                throw new RPCResponseError('Failed to get the current voting period index');\n            }\n            const contents = this.constructOpContents(ops, headCounter, pkh, undefined, currentVotingPeriod);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a proposals operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    proposals(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const op = yield createProposalsOperation(Object.assign({}, params));\n            const ops = this.convertIntoArray(op);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            let currentVotingPeriod;\n            try {\n                currentVotingPeriod = yield this.rpc.getCurrentPeriod();\n            }\n            catch (e) {\n                throw new RPCResponseError('Failed to get the current voting period index');\n            }\n            const contents = this.constructOpContents(ops, headCounter, pkh, undefined, currentVotingPeriod);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a drain_delegate operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    drainDelegate(params, source) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const op = yield createDrainDelegateOperation(Object.assign({}, params));\n            const ops = this.convertIntoArray(op);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a transfer_ticket operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    transferTicket(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createTransferTicketOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a smart_rollup_add_messages operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @param source string or undefined source pkh\n     * @returns a PreparedOperation object\n     */\n    smartRollupAddMessages(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createSmartRollupAddMessagesOperation(Object.assign(Object.assign({}, rest), mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a smart_rollup_originate operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    smartRollupOriginate(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh } = yield this.getKeys();\n            const originationProof = yield this.rpc.getOriginationProof({\n                kind: rest.pvmKind,\n                kernel: rest.kernel,\n            });\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const op = yield createSmartRollupOriginateOperation(Object.assign(Object.assign(Object.assign({}, mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS)), rest), { originationProof }));\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh, rest.source);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a batch operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    batch(batchParams, estimates) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { pkh, publicKey } = yield this.getKeys();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants, batchParams.length);\n            const revealNeeded = yield this.isRevealOpNeeded(batchParams, pkh);\n            const ops = [];\n            if (!estimates) {\n                for (const op of batchParams) {\n                    if (isOpWithFee(op)) {\n                        const limits = mergeLimits(op, DEFAULT_PARAMS);\n                        ops.push(yield this.getRPCOp(Object.assign(Object.assign({}, op), limits)));\n                    }\n                    else {\n                        ops.push(Object.assign({}, op));\n                    }\n                }\n            }\n            else {\n                for (const op of batchParams) {\n                    if (isOpWithFee(op)) {\n                        const e = estimates.shift();\n                        const limits = mergeLimits(op, {\n                            fee: e.suggestedFeeMutez,\n                            storageLimit: e.storageLimit,\n                            gasLimit: e.gasLimit,\n                        });\n                        ops.push(yield this.getRPCOp(Object.assign(Object.assign({}, op), limits)));\n                    }\n                    else {\n                        ops.push(Object.assign({}, op));\n                    }\n                }\n            }\n            if (revealNeeded) {\n                if (!publicKey) {\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.PublicKeyNotFoundError(pkh);\n                }\n                ops.unshift(yield createRevealOperation({\n                    fee: DEFAULT_FEE.REVEAL,\n                    storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,\n                    gasLimit: getRevealGasLimit(pkh),\n                }, pkh, publicKey));\n            }\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const contents = this.constructOpContents(ops, headCounter, pkh);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to prepare a batch operation\n     * @param operation RPCOperation object or RPCOperation array\n     * @returns a PreparedOperation object\n     */\n    contractCall(contractMethod) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            const hash = yield this.getBlockHash();\n            const protocol = yield this.getProtocolHash();\n            const { pkh } = yield this.getKeys();\n            __classPrivateFieldSet(this, _PrepareProvider_counters, {}, \"f\");\n            const headCounter = parseInt(yield this.getHeadCounter(pkh), 10);\n            const params = contractMethod.toTransferParams();\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const DEFAULT_PARAMS = yield this.getAccountLimits(pkh, protocolConstants);\n            const estimateLimits = mergeLimits({\n                fee: params.fee,\n                storageLimit: params.storageLimit,\n                gasLimit: params.gasLimit,\n            }, DEFAULT_PARAMS);\n            const op = {\n                kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION,\n                fee: (_a = params.fee) !== null && _a !== void 0 ? _a : estimateLimits.fee,\n                gas_limit: (_b = params.gasLimit) !== null && _b !== void 0 ? _b : estimateLimits.gasLimit,\n                storage_limit: (_c = params.storageLimit) !== null && _c !== void 0 ? _c : estimateLimits.storageLimit,\n                amount: String(params.amount),\n                destination: params.to,\n                parameters: params.parameter,\n            };\n            const operation = yield this.addRevealOperationIfNeeded(op, pkh);\n            const ops = this.convertIntoArray(operation);\n            const contents = this.constructOpContents(ops, headCounter, pkh);\n            return {\n                opOb: {\n                    branch: hash,\n                    contents,\n                    protocol,\n                },\n                counter: headCounter,\n            };\n        });\n    }\n    /**\n     *\n     * @description Method to convert a PreparedOperation to the params needed for the preapplyOperation method\n     * @param prepared a Prepared Operation\n     * @returns a PreapplyParams object\n     */\n    toPreapply(prepared) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { opOb: { contents, branch, protocol }, } = prepared;\n            const forgeParams = this.toForge(prepared);\n            const forged = yield this.context.forger.forge(forgeParams);\n            const sig = yield this.context.signer.sign(forged, new Uint8Array([3]));\n            return [{ contents, branch, protocol, signature: sig.prefixSig }];\n        });\n    }\n    /**\n     *\n     * @description Method to convert a PreparedOperation to the params needed for forging\n     * @param param a Prepared Operation\n     * @returns a ForgeParams object\n     */\n    toForge({ opOb: { contents, branch } }) {\n        return {\n            branch,\n            contents,\n        };\n    }\n}\n_PrepareProvider_counters = new WeakMap();\n\nconst BATCH_KINDS = [\n    _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ACTIVATION,\n    _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION,\n    _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION,\n    _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION,\n];\nclass OperationBatch extends Provider {\n    constructor(context, estimator) {\n        super(context);\n        this.estimator = estimator;\n        this.operations = [];\n        this.prepare = new PrepareProvider(this.context);\n    }\n    /**\n     *\n     * @description Add a transaction operation to the batch\n     *\n     * @param params Transfer operation parameter\n     */\n    withTransfer(params) {\n        const toValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.to);\n        if (params.amount < 0) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAmountError(params.amount.toString());\n        }\n        if (toValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.to, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(toValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Transfer tickets from a Tezos address (tz1,tz2 or tz3) to a smart contract address( KT1)\n     *\n     * @param params Transfer operation parameter\n     */\n    withTransferTicket(params) {\n        const destinationValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.destination);\n        if (destinationValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.destination, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(destinationValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add a contract call to the batch\n     *\n     * @param params Call a contract method\n     * @param options Generic operation parameters\n     */\n    withContractCall(params, options = {}) {\n        return this.withTransfer(params.toTransferParams(options));\n    }\n    /**\n     *\n     * @description Add a delegation operation to the batch\n     *\n     * @param params Delegation operation parameter\n     */\n    withDelegation(params) {\n        var _a;\n        const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.source);\n        if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n        }\n        const delegateValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.delegate) !== null && _a !== void 0 ? _a : '');\n        if (params.delegate && delegateValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.delegate, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(delegateValidation));\n        }\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add an activation operation to the batch\n     *\n     * @param params Activation operation parameter\n     * @throws {@link InvalidKeyHashError}\n     */\n    withActivation({ pkh, secret }) {\n        const pkhValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateKeyHash)(pkh);\n        if (pkhValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n            throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidKeyHashError(pkh, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(pkhValidation));\n        }\n        this.operations.push({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ACTIVATION, pkh, secret });\n        return this;\n    }\n    /**\n     *\n     * @description Add an origination operation to the batch\n     *\n     * @param params Origination operation parameter\n     */\n    withOrigination(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add a register a global constant operation to the batch\n     *\n     * @param params RegisterGlobalConstant operation parameter\n     */\n    withRegisterGlobalConstant(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add an increase paid storage operation to the batch\n     *\n     * @param params IncreasePaidStorage operation parameter\n     */\n    withIncreasePaidStorage(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add a smart rollup add messages operation to the batch\n     *\n     * @param params Rollup origination operation parameter\n     */\n    withSmartRollupAddMessages(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES }, params));\n        return this;\n    }\n    /**\n     *\n     * @description Add a smart rollup originate operation to the batch\n     *\n     * @param params Smart Rollup Originate operation parameter\n     */\n    withSmartRollupOriginate(params) {\n        this.operations.push(Object.assign({ kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE }, params));\n        return this;\n    }\n    getRPCOp(param) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (param.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION:\n                    return createTransferOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    return createOriginationOperation(yield this.context.parser.prepareCodeOrigination(Object.assign({}, param)));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                    return createSetDelegateOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT:\n                    return createRegisterGlobalConstantOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    return createIncreasePaidStorageOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET:\n                    return createTransferTicketOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES:\n                    return createSmartRollupAddMessagesOperation(Object.assign({}, param));\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE:\n                    return createSmartRollupOriginateOperation(Object.assign({}, param));\n                default:\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationKindError(JSON.stringify(param.kind));\n            }\n        });\n    }\n    /**\n     *\n     * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n     *\n     * @param params Operations parameter\n     * @throws {@link InvalidOperationKindError}\n     */\n    with(params) {\n        for (const param of params) {\n            switch (param.kind) {\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION:\n                    this.withTransfer(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION:\n                    this.withOrigination(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION:\n                    this.withDelegation(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ACTIVATION:\n                    this.withActivation(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT:\n                    this.withRegisterGlobalConstant(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE:\n                    this.withIncreasePaidStorage(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET:\n                    this.withTransferTicket(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES:\n                    this.withSmartRollupAddMessages(param);\n                    break;\n                case _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE:\n                    this.withSmartRollupOriginate(param);\n                    break;\n                default:\n                    throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidOperationKindError(JSON.stringify(param.kind));\n            }\n        }\n        return this;\n    }\n    /**\n     *\n     * @description Forge and Inject the operation batch\n     *\n     * @param params Optionally specify the source of the operation\n     */\n    send(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const source = (params && params.source) || publicKeyHash;\n            const estimates = yield this.estimator.batch(this.operations);\n            if (estimates.length !== this.operations.length) {\n                estimates.shift();\n            }\n            const preparedOp = yield this.prepare.batch(this.operations, estimates);\n            const opBytes = yield this.forge(preparedOp);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new BatchOperation(hash, preparedOp.opOb.contents, source, forgedBytes, opResponse, context);\n        });\n    }\n}\nclass RPCBatchProvider {\n    constructor(context, estimator) {\n        this.context = context;\n        this.estimator = estimator;\n    }\n    /***\n     *\n     * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n     *\n     * @param params List of operation to batch together\n     */\n    batch(params) {\n        const batch = new OperationBatch(this.context, this.estimator);\n        if (Array.isArray(params)) {\n            batch.with(params);\n        }\n        return batch;\n    }\n}\n\nclass BatchWalletOperation extends WalletOperation {\n    constructor(opHash, context, newHead$) {\n        super(opHash, context, newHead$);\n        this.opHash = opHash;\n        this.context = context;\n        this.getOriginatedContractAddresses = () => __awaiter(this, void 0, void 0, function* () {\n            const opResult = yield this.operationResults();\n            if (!opResult) {\n                throw new ObservableError('Unable to fetch operation results');\n            }\n            else {\n                const originationOpResults = opResult.filter((x) => x.kind === 'origination');\n                let addresses = [];\n                for (const res of originationOpResults) {\n                    if (res.metadata.operation_result.originated_contracts) {\n                        addresses = [...addresses, ...res.metadata.operation_result.originated_contracts];\n                    }\n                }\n                return addresses;\n            }\n        });\n    }\n    revealOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (!operationResult) {\n                throw new ObservableError('Unable to fetch operation results');\n            }\n            else {\n                return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n            }\n        });\n    }\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 'pending';\n            }\n            const op = yield this.operationResults();\n            if (op) {\n                return (op\n                    .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n                    .map((result) => {\n                    if (hasMetadataWithResult(result)) {\n                        const opResult = result.metadata.operation_result;\n                        return opResult.status;\n                    }\n                    else {\n                        return 'unknown';\n                    }\n                })[0] || 'unknown');\n            }\n            else {\n                throw new ObservableError('Unable to fetch operation results');\n            }\n        });\n    }\n}\n\nclass IncreasePaidStorageWalletOperation extends WalletOperation {\n    constructor(opHash, context, newHead$) {\n        super(opHash, context, newHead$);\n        this.opHash = opHash;\n        this.context = context;\n    }\n    revealOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (!operationResult) {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n            else {\n                return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n            }\n        });\n    }\n    increasePaidStorageOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const operationResult = yield this.operationResults();\n            if (!operationResult) {\n                throw new ObservableError('Unable to fetch operation result');\n            }\n            else {\n                return operationResult.find((x) => x.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE);\n            }\n        });\n    }\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._included) {\n                return 'pending';\n            }\n            const op = yield this.increasePaidStorageOperation();\n            if (!op) {\n                return 'unknown';\n            }\n            return op.metadata.operation_result.status;\n        });\n    }\n}\n\nfunction timeoutAfter(timeoutMillisec) {\n    return function inner(source) {\n        return new rxjs__WEBPACK_IMPORTED_MODULE_8__.BehaviorSubject(null).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.timeout)({\n            each: timeoutMillisec,\n            with: () => (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)(() => new ConfirmationTimeoutError(`Confirmation polling timed out`)),\n        }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.mergeMap)(() => source));\n    };\n}\nconst createNewPollingBasedHeadObservable = (sharedHeadOb, context, _scheduler) => {\n    return sharedHeadOb.pipe(timeoutAfter(context.config.confirmationPollingTimeoutSecond * 1000), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.share)({\n        connector: () => new rxjs__WEBPACK_IMPORTED_MODULE_8__.ReplaySubject(1),\n        resetOnError: false,\n        resetOnComplete: false,\n        resetOnRefCountZero: false,\n    }));\n};\nclass OperationFactory {\n    constructor(context) {\n        this.context = context;\n        // Cache the last block for one second across all operations\n        this.sharedHeadObs = (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.defer)(() => {\n            return createObservableFromSubscription(this.context.stream.subscribeBlock('head'));\n        });\n    }\n    createNewHeadObservable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return createNewPollingBasedHeadObservable(this.sharedHeadObs, this.context);\n        });\n    }\n    createPastBlockWalker(startBlock, count = 1) {\n        return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(this.context.readProvider.getBlock(startBlock)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((block) => {\n            if (count === 1) {\n                return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(block);\n            }\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.range)(block.header.level, count - 1).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.startWith)(block), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.concatMap)((level) => __awaiter(this, void 0, void 0, function* () {\n                return this.context.readProvider.getBlock(typeof level === 'number' ? level : level.header.level);\n            })));\n        }));\n    }\n    createHeadObservableFromConfig({ blockIdentifier }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const observableSequence = [];\n            if (blockIdentifier) {\n                observableSequence.push(this.createPastBlockWalker(blockIdentifier));\n            }\n            observableSequence.push(yield this.createNewHeadObservable());\n            return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.concat)(...observableSequence);\n        });\n    }\n    createOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new WalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n    createBatchOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new BatchWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n    createTransactionOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new TransactionWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n    createDelegationOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new DelegationWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n    createOriginationOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new OriginationWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n    createIncreasePaidStorageOperation(hash, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new IncreasePaidStorageWalletOperation(hash, this.context.clone(), yield this.createHeadObservableFromConfig(config));\n        });\n    }\n}\n\nclass RpcTzProvider extends Provider {\n    constructor(context) {\n        super(context);\n        this.prepare = new PrepareProvider(this.context);\n    }\n    getBalance(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(address);\n            if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(addressValidation));\n            }\n            return this.context.readProvider.getBalance(address, 'head');\n        });\n    }\n    getDelegate(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(address);\n            if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(addressValidation));\n            }\n            return this.context.readProvider.getDelegate(address, 'head');\n        });\n    }\n    activate(pkh, secret) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pkhValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateKeyHash)(pkh);\n            if (pkhValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.InvalidKeyHashError(pkh, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(pkhValidation));\n            }\n            const prepared = yield this.prepare.activate({ pkh, secret });\n            const forgedBytes = yield this.forge(prepared);\n            const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n            return new Operation(yield this.rpc.injectOperation(bytes), Object.assign(Object.assign({}, forgedBytes), { opbytes: bytes }), [], this.context.clone());\n        });\n    }\n}\n\nconst MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\nconst GAS_BUFFER = 100;\n/**\n * Examples of use :\n *\n *  Estimate a transfer operation :\n * ```\n * // Assuming that provider and signer are already configured...\n *\n * const amount = 2;\n * const address = 'tz1h3rQ8wBxFd8L9B3d7Jhaawu6Z568XU3xY';\n *\n * // Estimate gasLimit, storageLimit and fees for a transfer operation\n * const est = await Tezos.estimate.transfer({ to: address, amount: amount })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *  est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n *\n * Estimate a contract origination :\n * ```\n * // generic.json is referring to a Michelson Smart Contract\n *\n * const genericMultisigJSON = require('./generic.json')\n * const est = await Tezos.estimate.originate({\n *   code: genericMultisigJSON,\n *   storage: {\n *     stored_counter: 0,\n *     threshold: 1,\n *     keys: ['edpkuLxx9PQD8fZ45eUzrK3BhfDZJHhBuK4Zi49DcEGANwd2rpX82t']\n *   }\n * })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *   est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n */\nclass Estimate {\n    constructor(_milligasLimit, _storageLimit, opSize, minimalFeePerStorageByteMutez, \n    /**\n     * @description Base fee in mutez (1 mutez = 1e10−6 tez)\n     */\n    baseFeeMutez = MINIMAL_FEE_MUTEZ) {\n        this._milligasLimit = _milligasLimit;\n        this._storageLimit = _storageLimit;\n        this.opSize = opSize;\n        this.minimalFeePerStorageByteMutez = minimalFeePerStorageByteMutez;\n        this.baseFeeMutez = baseFeeMutez;\n    }\n    /**\n     * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)\n     */\n    get burnFeeMutez() {\n        return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));\n    }\n    /**\n     * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.\n     */\n    get storageLimit() {\n        const limit = Math.max(Number(this._storageLimit), 0);\n        return limit > 0 ? limit : 0;\n    }\n    /**\n     * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.\n     */\n    get gasLimit() {\n        return this.roundUp(Number(this._milligasLimit) / 1000 + GAS_BUFFER);\n    }\n    get operationFeeMutez() {\n        return ((Number(this._milligasLimit) / 1000 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ +\n            Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ);\n    }\n    roundUp(nanotez) {\n        return Math.ceil(Number(nanotez));\n    }\n    /**\n     * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.\n     */\n    get minimalFeeMutez() {\n        return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n    }\n    /**\n     * @description The suggested fee for the operation which includes minimal fees and a small buffer.\n     */\n    get suggestedFeeMutez() {\n        return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n    }\n    /**\n     * @description Fees according to your specified base fee will ensure that at least minimum fees are used.\n     */\n    get usingBaseFeeMutez() {\n        return (Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez));\n    }\n    /**\n     * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.\n     */\n    get totalCost() {\n        return this.minimalFeeMutez + this.burnFeeMutez;\n    }\n    /**\n     * @description Since Delphinet, consumed gas is provided in milligas for more precision.\n     * This function returns an estimation of the gas that operation will consume in milligas.\n     */\n    get consumedMilligas() {\n        return Number(this._milligasLimit);\n    }\n    static createEstimateInstanceFromProperties(estimateProperties) {\n        let milligasLimit = 0;\n        let storageLimit = 0;\n        let opSize = 0;\n        let minimalFeePerStorageByteMutez = 0;\n        let baseFeeMutez;\n        estimateProperties.forEach((estimate) => {\n            milligasLimit += estimate.milligasLimit;\n            storageLimit += estimate.storageLimit;\n            opSize += estimate.opSize;\n            minimalFeePerStorageByteMutez = Math.max(estimate.minimalFeePerStorageByteMutez, minimalFeePerStorageByteMutez);\n            if (estimate.baseFeeMutez) {\n                baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;\n            }\n        });\n        return new Estimate(milligasLimit, storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez);\n    }\n    static createArrayEstimateInstancesFromProperties(estimateProperties) {\n        return estimateProperties.map((x) => new Estimate(x.milligasLimit, x.storageLimit, x.opSize, x.minimalFeePerStorageByteMutez, x.baseFeeMutez));\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates unable to get public key to estimate reveal operation in Wallet API\n */\nclass RevealEstimateError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TaquitoError {\n    constructor() {\n        super();\n        this.name = 'RevealEstimateError';\n        this.message = 'Public key is unknown, unable to estimate the reveal operation in Wallet API.';\n    }\n}\n\nclass RPCEstimateProvider extends Provider {\n    constructor() {\n        super(...arguments);\n        this.ALLOCATION_STORAGE = 257;\n        this.ORIGINATION_STORAGE = 257;\n        this.OP_SIZE_REVEAL = 128;\n        this.prepare = new PrepareProvider(this.context);\n    }\n    getKeys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isSignerConfigured = this.context.isAnySignerConfigured();\n            return {\n                publicKeyHash: isSignerConfigured\n                    ? yield this.signer.publicKeyHash()\n                    : yield this.context.walletProvider.getPKH(),\n                publicKey: isSignerConfigured ? yield this.signer.publicKey() : undefined,\n            };\n        });\n    }\n    getEstimationPropertiesFromOperationContent(content, size, costPerByte) {\n        const operationResults = flattenOperationResult({ contents: [content] });\n        let totalMilligas = 0;\n        let totalStorage = 0;\n        operationResults.forEach((result) => {\n            totalStorage +=\n                'originated_contracts' in result && typeof result.originated_contracts !== 'undefined'\n                    ? result.originated_contracts.length * this.ORIGINATION_STORAGE\n                    : 0;\n            totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n            totalMilligas += Number(result.consumed_milligas) || 0;\n            totalStorage +=\n                'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n            totalStorage +=\n                'storage_size' in result && 'global_address' in result\n                    ? Number(result.storage_size) || 0\n                    : 0;\n            totalStorage += 'genesis_commitment_hash' in result ? Number(result.size) : 0;\n        });\n        if (isOpWithFee(content)) {\n            return {\n                milligasLimit: totalMilligas || 0,\n                storageLimit: Number(totalStorage || 0),\n                opSize: size,\n                minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n            };\n        }\n        else {\n            return {\n                milligasLimit: 0,\n                storageLimit: 0,\n                opSize: size,\n                minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n                baseFeeMutez: 0,\n            };\n        }\n    }\n    calculateEstimates(op, constants) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { opbytes, opOb: { branch, contents }, } = yield this.forge(op);\n            const operation = {\n                operation: { branch, contents },\n                chain_id: yield this.context.readProvider.getChainId(),\n            };\n            const { opResponse } = yield this.simulate(operation);\n            const { cost_per_byte } = constants;\n            const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)];\n            // Fail early in case of errors\n            if (errors.length) {\n                throw new TezosOperationError(errors, 'Error occurred during estimation');\n            }\n            let numberOfOps = 1;\n            if (Array.isArray(op.opOb.contents) && op.opOb.contents.length > 1) {\n                numberOfOps =\n                    opResponse.contents[0].kind === 'reveal'\n                        ? op.opOb.contents.length - 1\n                        : op.opOb.contents.length;\n            }\n            return opResponse.contents.map((x) => {\n                return this.getEstimationPropertiesFromOperationContent(x, \n                // TODO: Calculate a specific opSize for each operation.\n                x.kind === 'reveal' ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps, cost_per_byte);\n            });\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for an origination operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param OriginationOperation Originate operation parameter\n     */\n    originate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const preparedOperation = yield this.prepare.originate(params);\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for an transfer operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param TransferOperation Originate operation parameter\n     */\n    transfer(_a) {\n        var _b;\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const toValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(rest.to);\n            if (toValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.to, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(toValidation));\n            }\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_b = rest.source) !== null && _b !== void 0 ? _b : '');\n            if (rest.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            if (rest.amount < 0) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAmountError(rest.amount.toString());\n            }\n            const preparedOperation = yield this.prepare.transaction(Object.assign({ fee,\n                storageLimit,\n                gasLimit }, rest));\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for a transferTicket operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param TransferTicketParams operation parameter\n     */\n    transferTicket(_a) {\n        var _b;\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const destinationValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(rest.destination);\n            if (destinationValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.destination, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(destinationValidation));\n            }\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_b = rest.source) !== null && _b !== void 0 ? _b : '');\n            if (rest.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.transferTicket(Object.assign({ fee,\n                storageLimit,\n                gasLimit }, rest));\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param Estimate\n     */\n    setDelegate(_a) {\n        var _b;\n        var { fee, gasLimit, storageLimit } = _a, rest = __rest(_a, [\"fee\", \"gasLimit\", \"storageLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(rest.source);\n            if (rest.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const delegateValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_b = rest.delegate) !== null && _b !== void 0 ? _b : '');\n            if (rest.delegate && delegateValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(rest.delegate, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(delegateValidation));\n            }\n            const preparedOperation = yield this.prepare.delegation(Object.assign({ fee,\n                storageLimit,\n                gasLimit }, rest));\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch\n     *\n     * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.\n     */\n    batch(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperations = yield this.prepare.batch(params);\n            const estimateProperties = yield this.calculateEstimates(preparedOperations, protocolConstants);\n            return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param Estimate\n     */\n    registerDelegate(_a, source) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const pkh = (yield this.getKeys()).publicKeyHash;\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const checkSource = source || pkh;\n            const preparedOperation = yield this.prepare.registerDelegate(Object.assign({ fee, storageLimit, gasLimit }, rest), checkSource);\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees to reveal the current account\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed\n     *\n     * @param Estimate\n     */\n    reveal(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { publicKeyHash, publicKey } = yield this.getKeys();\n            if (!publicKey) {\n                throw new RevealEstimateError();\n            }\n            if (yield this.isAccountRevealRequired(publicKeyHash)) {\n                const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n                const preparedOperation = params\n                    ? yield this.prepare.reveal(params)\n                    : yield this.prepare.reveal({});\n                const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n                return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n            }\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for an registerGlobalConstant operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param params registerGlobalConstant operation parameter\n     */\n    registerGlobalConstant(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            const preparedOperation = yield this.prepare.registerGlobalConstant(Object.assign({ fee,\n                storageLimit,\n                gasLimit }, rest));\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit, and fees for an increasePaidStorage operation\n     *\n     * @returns An estimation of gasLimit, storageLimit, and fees for the operation\n     *\n     * @param params increasePaidStorage operation parameters\n     */\n    increasePaidStorage(_a) {\n        var { fee, storageLimit, gasLimit } = _a, rest = __rest(_a, [\"fee\", \"storageLimit\", \"gasLimit\"]);\n        return __awaiter(this, void 0, void 0, function* () {\n            if (rest.amount < 0) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAmountError(rest.amount.toString());\n            }\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.increasePaidStorage(Object.assign({ fee,\n                storageLimit,\n                gasLimit }, rest));\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for an Update Consensus Key operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param Estimate\n     */\n    updateConsensusKey(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.updateConsensusKey(params);\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for a smart_rollup_add_messages operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param Estimate\n     */\n    smartRollupAddMessages(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.smartRollupAddMessages(params);\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for an Smart Rollup Originate operation\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the operation\n     *\n     * @param SmartRollupOriginateParams\n     */\n    smartRollupOriginate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.smartRollupOriginate(params);\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n    /**\n     *\n     * @description Estimate gasLimit, storageLimit and fees for contract call\n     *\n     * @returns An estimation of gasLimit, storageLimit and fees for the contract call\n     *\n     * @param Estimate\n     */\n    contractCall(contractMethod) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocolConstants = yield this.context.readProvider.getProtocolConstants('head');\n            const preparedOperation = yield this.prepare.contractCall(contractMethod);\n            const estimateProperties = yield this.calculateEstimates(preparedOperation, protocolConstants);\n            if (preparedOperation.opOb.contents[0].kind === 'reveal') {\n                estimateProperties.shift();\n            }\n            return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n        });\n    }\n}\n\n/**\n * @description Delegation operation provide utility function to fetch newly issued delegation\n *\n * @warn Currently support only one delegation per operation\n */\nclass DelegateOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const delegationOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'delegation');\n        const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get delegate() {\n        return this.params.delegate;\n    }\n    get isRegisterOperation() {\n        return this.delegate === this.source;\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.ROUND_UP });\n        return this.consumedMilliGas\n            ? new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(this.consumedMilliGas).dividedBy(1000).toString()\n            : undefined;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n}\n\n/**\n * @description Origination operation provide utility function to fetch newly originated contract\n *\n * @warn Currently support only one origination per operation\n */\nclass OriginationOperation extends Operation {\n    constructor(hash, params, raw, results, context, contractProvider) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.contractProvider = contractProvider;\n        const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n        if (Array.isArray(originatedContracts)) {\n            this.contractAddress = originatedContracts[0];\n        }\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get operationResults() {\n        const originationOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'origination');\n        const result = originationOp &&\n            hasMetadataWithResult(originationOp) &&\n            originationOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.ROUND_UP });\n        return this.consumedMilliGas\n            ? new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(this.consumedMilliGas).dividedBy(1000).toString()\n            : undefined;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get storageDiff() {\n        const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n        return storageDiff ? storageDiff : undefined;\n    }\n    get storageSize() {\n        const storageSize = this.operationResults && this.operationResults.storage_size;\n        return storageSize ? storageSize : undefined;\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n    /**\n     * @description Provide the contract abstract of the newly originated contract\n     * @throws {@link OriginationOperationError}\n     */\n    contract(confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.contractAddress) {\n                throw new OriginationOperationError('No contract was originated in this operation');\n            }\n            yield this.confirmation(confirmations, timeout);\n            return this.contractProvider.at(this.contractAddress);\n        });\n    }\n}\n\n/**\n * @description RegisterGlobalConstantOperation provides utility functions to fetch a newly issued operation of kind register_global_constant\n */\nclass RegisterGlobalConstantOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n        this.globalConstantHash = this.operationResults && this.operationResults.global_address;\n    }\n    get operationResults() {\n        const registerGlobalConstantOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'register_global_constant');\n        const result = registerGlobalConstantOp &&\n            registerGlobalConstantOp.metadata &&\n            registerGlobalConstantOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get registeredExpression() {\n        return this.params.value;\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.ROUND_UP });\n        return this.consumedMilliGas\n            ? new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(this.consumedMilliGas).dividedBy(1000).toString()\n            : undefined;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n}\n\n/**\n * @description Reveal operation provides utility functions to fetch a newly issued revelation\n */\nclass RevealOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const revealOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'reveal');\n        return revealOp ? [revealOp] : [];\n    }\n    get status() {\n        const operationResults = this.operationResults;\n        const txResult = operationResults[0];\n        if (txResult) {\n            return txResult.metadata.operation_result.status;\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get publicKey() {\n        return this.params.public_key;\n    }\n    sumProp(arr, prop) {\n        return arr.reduce((prev, current) => {\n            return prop in current ? Number(current[prop]) + prev : prev;\n        }, 0);\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.ROUND_UP });\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(this.consumedMilliGas).dividedBy(1000).toString();\n    }\n    get consumedMilliGas() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_milligas'));\n    }\n    get storageDiff() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'paid_storage_size_diff'));\n    }\n    get storageSize() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size'));\n    }\n    get errors() {\n        return flattenErrors({ contents: this.operationResults });\n    }\n}\n\n/**\n * @description Transaction operation provides utility functions to fetch a newly issued transaction\n *\n * @warn Currently supports one transaction per operation\n */\nclass TransactionOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const transactionOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'transaction');\n        return transactionOp ? [transactionOp] : [];\n    }\n    get status() {\n        const operationResults = this.operationResults;\n        const txResult = operationResults[0];\n        if (txResult) {\n            return txResult.metadata.operation_result.status;\n        }\n        else {\n            return 'unknown';\n        }\n    }\n    get amount() {\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.params.amount);\n    }\n    get destination() {\n        return this.params.destination;\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    sumProp(arr, prop) {\n        return arr.reduce((prev, current) => {\n            return prop in current ? Number(current[prop]) + prev : prev;\n        }, 0);\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ROUND_UP });\n        return new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.consumedMilliGas).dividedBy(1000).toString();\n    }\n    get consumedMilliGas() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_milligas'));\n    }\n    get storageDiff() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'paid_storage_size_diff'));\n    }\n    get storageSize() {\n        return String(this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size'));\n    }\n    get errors() {\n        return flattenErrors({ contents: this.operationResults });\n    }\n}\n\n/**\n *\n * @description BallotOperation provides utility functions to fetch a new operation of kind ballot\n *\n */\nclass BallotOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const ballotOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'ballot');\n        const result = ballotOp;\n        return result ? result : undefined;\n    }\n    get period() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.period;\n    }\n    get proposal() {\n        return this.params.proposal;\n    }\n    get ballot() {\n        return this.params.ballot;\n    }\n}\n\n/**\n *\n * @description DrainDelegateOperation provides utility functions to fetch a new operation of kind drain_delegate\n *\n */\nclass DrainDelegateOperation extends Operation {\n    constructor(hash, params, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n    }\n    get operationResults() {\n        const drainDelegateOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'drain_delegate');\n        const result = drainDelegateOp && drainDelegateOp.metadata && drainDelegateOp.metadata.balance_updates;\n        return result ? result : undefined;\n    }\n    get consensusKey() {\n        return this.params.consensus_key;\n    }\n    get delegate() {\n        return this.params.delegate;\n    }\n    get destination() {\n        return this.params.destination;\n    }\n}\n\n/**\n *\n * @description Transfer tickets from a Tezos address (tz1, tz2 or tz3) to a smart contract address (KT1) (everything on layer 1 at this step)\n *\n * @warn Currently only supports one L2 ticket holder transfer at once. ie. one collection of tickets owned by tz1, tz2 or tz3 to a smart contract.\n */\nclass TransferTicketOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const transferOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET);\n        const result = transferOp && transferOp.metadata && transferOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get consumedGas() {\n        bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.config({ DECIMAL_PLACES: 0, ROUNDING_MODE: bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.ROUND_UP });\n        return this.consumedMilliGas\n            ? new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(this.consumedMilliGas).dividedBy(1000).toString()\n            : undefined;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n}\n\n/**\n *\n * @description IncreasePaidStorageOperation provides utility functions to fetch a new operation of kind increase_paid_storage\n *\n */\nclass IncreasePaidStorageOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const increasePaidStorageOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'increase_paid_storage');\n        const result = increasePaidStorageOp &&\n            increasePaidStorageOp.metadata &&\n            increasePaidStorageOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get amount() {\n        return this.params.amount;\n    }\n    get destination() {\n        return this.params.destination;\n    }\n}\n\n/**\n *\n * @description ProposalsOperation provides utility functions to fetch a new operation of kind proposals\n *\n */\nclass ProposalsOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const proposalsOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'proposals');\n        const result = proposalsOp;\n        return result ? result : undefined;\n    }\n    get proposals() {\n        return this.params.proposals;\n    }\n    get period() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.period;\n    }\n}\n\n/**\n *\n * @description UpdateConsensusKeyOperation provides utility to fetch properties for Operation of kind UpdateConsensusKey\n *\n */\nclass UpdateConsensusKeyOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const updateConsensusKeyOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'update_consensus_key');\n        const result = updateConsensusKeyOp &&\n            updateConsensusKeyOp.metadata &&\n            updateConsensusKeyOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get pk() {\n        return this.params.pk;\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n}\n\n/**\n * @description SmartRollupAddMessagesOperation provides utility to fetch properties of SmartRollupAddMessages\n */\nclass SmartRollupAddMessagesOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const smartRollupAddMessagesOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === 'smart_rollup_add_messages');\n        const result = smartRollupAddMessagesOp &&\n            smartRollupAddMessagesOp.metadata &&\n            smartRollupAddMessagesOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get message() {\n        return this.params.message;\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n}\n\n/**\n *\n * @description SmartRollupOriginate Operation provides utility to fetch properties for Operation of kind SmartRollupOriginate\n *\n */\nclass SmartRollupOriginateOperation extends Operation {\n    constructor(hash, params, source, raw, results, context) {\n        super(hash, raw, results, context);\n        this.params = params;\n        this.source = source;\n    }\n    get operationResults() {\n        const smartRollupOriginateOp = Array.isArray(this.results) &&\n            this.results.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE);\n        const result = smartRollupOriginateOp &&\n            smartRollupOriginateOp.metadata &&\n            smartRollupOriginateOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n    get status() {\n        var _a, _b;\n        return (_b = (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.status) !== null && _b !== void 0 ? _b : 'unknown';\n    }\n    get fee() {\n        return Number(this.params.fee);\n    }\n    get gasLimit() {\n        return Number(this.params.gas_limit);\n    }\n    get storageLimit() {\n        return Number(this.params.storage_limit);\n    }\n    get consumedMilliGas() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.consumed_milligas;\n    }\n    get pvmKind() {\n        return this.params.pvm_kind;\n    }\n    get kernel() {\n        return this.params.kernel;\n    }\n    get originationProof() {\n        return this.params.origination_proof;\n    }\n    get errors() {\n        var _a;\n        return (_a = this.operationResults) === null || _a === void 0 ? void 0 : _a.errors;\n    }\n}\n\nclass RpcContractProvider extends Provider {\n    constructor(context, estimator) {\n        super(context);\n        this.estimator = estimator;\n        this.contractProviderTypeSymbol = Symbol.for('taquito-contract-provider-type-symbol');\n        this.prepare = new PrepareProvider(this.context);\n    }\n    /**\n     *\n     * @description Return a well formatted json object of the contract storage\n     *\n     * @param contract contract address you want to get the storage from\n     * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n     * @throws {@link InvalidContractAddressError}\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n     */\n    getStorage(contract, schema) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contractValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateContractAddress)(contract);\n            if (contractValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidContractAddressError(contract, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(contractValidation));\n            }\n            const script = yield this.context.readProvider.getScript(contract, 'head');\n            if (!schema) {\n                schema = script;\n            }\n            let contractSchema;\n            if (_taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema.isSchema(schema)) {\n                contractSchema = schema;\n            }\n            else {\n                contractSchema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema.fromRPCResponse({ script: schema });\n            }\n            return contractSchema.Execute(script.storage, smartContractAbstractionSemantic(this)); // Cast into T because only the caller can know the true type of the storage\n        });\n    }\n    /**\n     *\n     * @description Return a well formatted json object of the contract big map storage\n     *\n     * @param contract contract address you want to get the storage from\n     * @param key contract big map key to fetch value from\n     * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n     * @throws {@link InvalidContractAddressError}\n     * @deprecated Deprecated in favor of getBigMapKeyByID\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n     */\n    getBigMapKey(contract, key, schema) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contractValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateContractAddress)(contract);\n            if (contractValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidContractAddressError(contract, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(contractValidation));\n            }\n            if (!schema) {\n                schema = (yield this.rpc.getContract(contract)).script;\n            }\n            let contractSchema;\n            if (_taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema.isSchema(schema)) {\n                contractSchema = schema;\n            }\n            else {\n                contractSchema = _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema.fromRPCResponse({ script: schema });\n            }\n            const encodedKey = contractSchema.EncodeBigMapKey(key);\n            const val = yield this.rpc.getBigMapKey(contract, encodedKey);\n            return contractSchema.ExecuteOnBigMapValue(val); // Cast into T because only the caller can know the true type of the storage\n        });\n    }\n    /**\n     *\n     * @description Return a well formatted json object of a big map value\n     *\n     * @param id Big Map ID\n     * @param keyToEncode key to query (will be encoded properly according to the schema)\n     * @param schema Big Map schema (can be determined using your contract type)\n     * @param block optional block level to fetch the values from\n     *\n     * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n     */\n    getBigMapKeyByID(id, keyToEncode, schema, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { key, type } = schema.EncodeBigMapKey(keyToEncode);\n            const { packed } = yield this.context.packer.packData({ data: key, type });\n            const encodedExpr = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.encodeExpr)(packed);\n            const bigMapValue = block\n                ? yield this.context.readProvider.getBigMapValue({ id: id.toString(), expr: encodedExpr }, block)\n                : yield this.context.readProvider.getBigMapValue({ id: id.toString(), expr: encodedExpr }, 'head');\n            return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this));\n        });\n    }\n    /**\n     *\n     * @description Fetch multiple values in a big map\n     * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n     * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n     * If one of the keys does not exist in the big map, its value will be set to undefined.\n     *\n     * @param id Big Map ID\n     * @param keys Array of keys to query (will be encoded properly according to the schema)\n     * @param schema Big Map schema (can be determined using your contract type)\n     * @param block optional block level to fetch the values from\n     * @param batchSize optional batch size representing the number of requests to execute in parallel\n     * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n     *\n     */\n    getBigMapKeysByID(id, keys, schema, block, batchSize = 5) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const level = yield this.getBlockForRequest(keys, block);\n            const bigMapValues = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.MichelsonMap();\n            // Execute batch of promises in series\n            let position = 0;\n            let results = [];\n            while (position < keys.length) {\n                const keysBatch = keys.slice(position, position + batchSize);\n                const batch = keysBatch.map((keyToEncode) => this.getBigMapValueOrUndefined(keyToEncode, id, schema, level));\n                results = [...results, ...(yield Promise.all(batch))];\n                position += batchSize;\n            }\n            for (let i = 0; i < results.length; i++) {\n                bigMapValues.set(keys[i], results[i]);\n            }\n            return bigMapValues;\n        });\n    }\n    getBlockForRequest(keys, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return keys.length === 1 || typeof block !== 'undefined'\n                ? block\n                : yield this.context.readProvider.getBlockLevel('head');\n        });\n    }\n    getBigMapValueOrUndefined(keyToEncode, id, schema, level) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.getBigMapKeyByID(id, keyToEncode, schema, level);\n            }\n            catch (ex) {\n                if (ex instanceof _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.HttpResponseError && ex.status === _taquito_http_utils__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODE.NOT_FOUND) {\n                    return;\n                }\n                else {\n                    throw ex;\n                }\n            }\n        });\n    }\n    /**\n     *\n     * @description Return a well formatted json object of a sapling state\n     *\n     * @param id Sapling state ID\n     * @param block optional block level to fetch the value from\n     *\n     */\n    getSaplingDiffByID(id, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const saplingState = block\n                ? yield this.context.readProvider.getSaplingDiffById({ id: id.toString() }, block)\n                : yield this.context.readProvider.getSaplingDiffById({ id: id.toString() }, 'head');\n            return saplingState;\n        });\n    }\n    /**\n     *\n     * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\n     *\n     * @param OriginationOperation Originate operation parameter\n     */\n    originate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const estimate = yield this.estimate(params, this.estimator.originate.bind(this.estimator));\n            const preparedOrigination = yield this.prepare.originate(Object.assign(Object.assign({}, params), estimate));\n            const content = preparedOrigination.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.ORIGINATION);\n            const forgedOrigination = yield this.forge(preparedOrigination);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(forgedOrigination);\n            return new OriginationOperation(hash, content, forgedBytes, opResponse, context, this);\n        });\n    }\n    /**\n     *\n     * @description Set the delegate for a contract. Will sign and inject an operation using the current context\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param SetDelegate operation parameter\n     */\n    setDelegate(params) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.source);\n            if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const delegateValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.delegate) !== null && _a !== void 0 ? _a : '');\n            if (params.delegate && delegateValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.delegate, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(delegateValidation));\n            }\n            // Since babylon delegation source cannot smart contract\n            if (/kt1/i.test(params.source)) {\n                throw new InvalidDelegationSource(params.source);\n            }\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const sourceOrDefault = params.source || publicKeyHash;\n            const estimate = yield this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n            const preparedDelegation = yield this.prepare.delegation(Object.assign(Object.assign({}, params), estimate));\n            const content = preparedDelegation.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION);\n            const opBytes = yield this.forge(preparedDelegation);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new DelegateOperation(hash, content, sourceOrDefault, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Register the current address as delegate. Will sign and inject an operation using the current context\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param RegisterDelegate operation parameter\n     */\n    registerDelegate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const estimate = yield this.estimate(params, this.estimator.registerDelegate.bind(this.estimator));\n            const source = yield this.signer.publicKeyHash();\n            const prepared = yield this.prepare.registerDelegate(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DELEGATION);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new DelegateOperation(hash, content, source, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param Transfer operation parameter\n     */\n    transfer(params) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const toValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.to);\n            if (toValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.to, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(toValidation));\n            }\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.source) !== null && _a !== void 0 ? _a : '');\n            if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            if (params.amount < 0) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAmountError(params.amount.toString());\n            }\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.transfer.bind(this.estimator));\n            const source = params.source || publicKeyHash;\n            const prepared = yield this.prepare.transaction(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSACTION);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new TransactionOperation(hash, content, source, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Transfer Tickets to a smart contract address\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param TransferTicketParams operation parameter\n     */\n    transferTicket(params) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const destinationValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)(params.destination);\n            if (destinationValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.destination, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(destinationValidation));\n            }\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.source) !== null && _a !== void 0 ? _a : '');\n            if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;\n            const estimate = yield this.estimate(params, this.estimator.transferTicket.bind(this.estimator));\n            const prepared = yield this.prepare.transferTicket(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.TRANSFER_TICKET);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new TransferTicketOperation(hash, content, source, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Reveal the current address. Will throw an error if the address is already revealed.\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param RevealParams operation parameter\n     */\n    reveal(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimateReveal = yield this.estimator.reveal(params);\n            if (estimateReveal) {\n                const estimated = yield this.estimate(params, () => __awaiter(this, void 0, void 0, function* () { return estimateReveal; }));\n                const prepared = yield this.prepare.reveal(Object.assign(Object.assign({}, params), estimated));\n                const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REVEAL);\n                const opBytes = yield this.forge(prepared);\n                const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n                return new RevealOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n            }\n            else {\n                throw new RevealOperationError(`The publicKeyHash '${publicKeyHash}' has already been revealed.`);\n            }\n        });\n    }\n    /**\n     *\n     * @description Register a Micheline expression in a global table of constants. Will sign and inject an operation using the current context\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param params registerGlobalConstant operation parameter\n     */\n    registerGlobalConstant(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.registerGlobalConstant.bind(this.estimator));\n            const prepared = yield this.prepare.registerGlobalConstant(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.REGISTER_GLOBAL_CONSTANT);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new RegisterGlobalConstantOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Increase the paid storage of a smart contract\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param params increasePaidStorage operation parameter\n     */\n    increasePaidStorage(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (params.amount < 0) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAmountError(params.amount.toString());\n            }\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.increasePaidStorage.bind(this.estimator));\n            const prepared = yield this.prepare.increasePaidStorage(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.INCREASE_PAID_STORAGE);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new IncreasePaidStorageOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Transfers the spendable balance of the delegate to destination when consensus_key is the active consensus key of delegate\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param params drainDelegate operation parameter\n     */\n    drainDelegate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prepared = yield this.prepare.drainDelegate(params);\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.DRAIN_DELEGATE);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new DrainDelegateOperation(hash, content, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Submit a ballot vote to a specified proposal\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param BallotParams Ballot operation parameter\n     */\n    ballot(params) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.source) !== null && _a !== void 0 ? _a : '');\n            if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;\n            const prepared = yield this.prepare.ballot(Object.assign(Object.assign({}, params), { source }));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.BALLOT);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new BallotOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Submit or upvote a proposal during the Proposal period\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param ProposalsParams Proposals operation parameter\n     */\n    proposals(params) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const sourceValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateAddress)((_a = params.source) !== null && _a !== void 0 ? _a : '');\n            if (params.source && sourceValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError(params.source, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(sourceValidation));\n            }\n            const source = (_b = params.source) !== null && _b !== void 0 ? _b : publicKeyHash;\n            const prepared = yield this.prepare.proposals(Object.assign(Object.assign({}, params), { source }));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.PROPOSALS);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new ProposalsOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description Updates the consensus key of the baker to public_key starting from the current cycle plus PRESERVED_CYCLES + 1\n     *\n     * @returns An operation handle with the result from the rpc node\n     *\n     * @param UpdateConsensusKeyParams\n     */\n    updateConsensusKey(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.updateConsensusKey.bind(this.estimator));\n            const prepared = yield this.prepare.updateConsensusKey(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.UPDATE_CONSENSUS_KEY);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new UpdateConsensusKeyOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     * @description Adds messages to the rollup inbox that can be executed/claimed after it gets cemented\n     * @param SmartRollupAddMessagesParams\n     * @returns An operation handle with results from the RPC node\n     */\n    smartRollupAddMessages(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.smartRollupAddMessages.bind(this.estimator));\n            const prepared = yield this.prepare.smartRollupAddMessages(Object.assign(Object.assign({}, params), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ADD_MESSAGES);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new SmartRollupAddMessagesOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     * @description Creates a smart rollup originate operation\n     * @param SmartRollupOriginateParams\n     * @returns An operation handle with results from the RPC node\n     */\n    smartRollupOriginate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const publicKeyHash = yield this.signer.publicKeyHash();\n            const estimate = yield this.estimate(params, this.estimator.smartRollupOriginate.bind(this.estimator));\n            const originationProof = yield this.rpc.getOriginationProof({\n                kind: params.pvmKind,\n                kernel: params.kernel,\n            });\n            const completeParams = Object.assign(Object.assign({}, params), { originationProof });\n            const prepared = yield this.prepare.smartRollupOriginate(Object.assign(Object.assign({}, completeParams), estimate));\n            const content = prepared.opOb.contents.find((op) => op.kind === _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.SMART_ROLLUP_ORIGINATE);\n            const opBytes = yield this.forge(prepared);\n            const { hash, context, forgedBytes, opResponse } = yield this.signAndInject(opBytes);\n            return new SmartRollupOriginateOperation(hash, content, publicKeyHash, forgedBytes, opResponse, context);\n        });\n    }\n    /**\n     *\n     * @description A failing_noop operation that is guaranteed to fail.\n     *\n     * @returns A FailingNoopOperation object representing the signed failing_noop operation\n     *\n     * @param params failingNoop operation parameter\n     */\n    failingNoop(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const op = {\n                kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.FAILING_NOOP,\n                arbitrary: params.arbitrary,\n            };\n            const hash = yield this.context.readProvider.getBlockHash(params.basedOnBlock);\n            const forged = yield this.context.forger.forge({\n                branch: hash,\n                contents: [op],\n            });\n            const { prefixSig } = yield this.signer.sign(forged, new Uint8Array([3]));\n            return {\n                signature: prefixSig,\n                bytes: forged,\n                signedContent: {\n                    branch: hash,\n                    contents: [\n                        {\n                            kind: _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.OpKind.FAILING_NOOP,\n                            arbitrary: params.arbitrary,\n                        },\n                    ],\n                },\n            };\n        });\n    }\n    /**\n     *\n     * @description Create an smart contract abstraction for the address specified.\n     *\n     * @param address Smart contract address\n     * @throws {@link InvalidContractAddressError}\n     */\n    at(address, contractAbstractionComposer = (x) => x) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const addressValidation = (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.validateContractAddress)(address);\n            if (addressValidation !== _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.ValidationResult.VALID) {\n                throw new _taquito_core__WEBPACK_IMPORTED_MODULE_2__.InvalidContractAddressError(address, (0,_taquito_utils__WEBPACK_IMPORTED_MODULE_4__.invalidDetail)(addressValidation));\n            }\n            const rpc = this.context.withExtensions().rpc;\n            const readProvider = this.context.withExtensions().readProvider;\n            const script = yield readProvider.getScript(address, 'head');\n            const entrypoints = yield readProvider.getEntrypoints(address);\n            const abs = new ContractAbstraction(address, script, this, this, entrypoints, rpc, readProvider);\n            return contractAbstractionComposer(abs, this.context);\n        });\n    }\n    /**\n     *\n     * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n     *\n     * @returns A batch object from which we can add more operation or send a command to execute the batch\n     *\n     * @param params List of operation to batch together\n     */\n    batch(params) {\n        const batch = new OperationBatch(this.context, this.estimator);\n        if (Array.isArray(params)) {\n            batch.with(params);\n        }\n        return batch;\n    }\n}\n\nclass MichelCodecParser {\n    constructor(context) {\n        this.context = context;\n    }\n    getNextProto() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.context.proto) {\n                const nextProto = yield this.context.readProvider.getNextProtocol('head');\n                this.context.proto = nextProto;\n            }\n            return this.context.proto;\n        });\n    }\n    parseScript(src) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parser = new _taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__.Parser({ protocol: yield this.getNextProto() });\n            return parser.parseScript(src);\n        });\n    }\n    parseMichelineExpression(src) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parser = new _taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__.Parser({ protocol: yield this.getNextProto() });\n            return parser.parseMichelineExpression(src);\n        });\n    }\n    parseJSON(src) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parser = new _taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__.Parser({ protocol: yield this.getNextProto() });\n            return parser.parseJSON(src);\n        });\n    }\n    prepareCodeOrigination(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parsedParams = params;\n            parsedParams.code = yield this.formatCodeParam(params.code);\n            if (params.init) {\n                parsedParams.init = yield this.formatInitParam(params.init);\n            }\n            else if (params.storage) {\n                const storageType = parsedParams.code.find((p) => 'prim' in p && p.prim === 'storage');\n                if (!(storageType === null || storageType === void 0 ? void 0 : storageType.args)) {\n                    throw new InvalidCodeParameter('The storage section is missing from the script', params.code);\n                }\n                const schema = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema(storageType.args[0]);\n                const globalconstantsHashAndValue = yield this.findGlobalConstantsHashAndValue(schema);\n                if (Object.keys(globalconstantsHashAndValue).length !== 0) {\n                    // If there are global constants in the storage part of the contract code,\n                    // they need to be locally expanded in order to encode the storage arguments\n                    const p = new _taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__.Parser({ expandGlobalConstant: globalconstantsHashAndValue });\n                    const storageTypeNoGlobalConst = p.parseJSON(storageType.args[0]);\n                    const schemaNoGlobalConst = new _taquito_michelson_encoder__WEBPACK_IMPORTED_MODULE_3__.Schema(storageTypeNoGlobalConst);\n                    parsedParams.init = schemaNoGlobalConst.Encode(params.storage);\n                }\n                else {\n                    parsedParams.init = schema.Encode(params.storage);\n                }\n                delete parsedParams.storage;\n            }\n            return parsedParams;\n        });\n    }\n    formatCodeParam(code) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let parsedCode;\n            if (typeof code === 'string') {\n                const c = yield this.parseScript(code);\n                if (c === null) {\n                    throw new InvalidCodeParameter('Unable to parse', code);\n                }\n                parsedCode = c;\n            }\n            else {\n                const c = yield this.parseJSON(code);\n                const order = ['parameter', 'storage', 'code'];\n                // Ensure correct ordering for RPC\n                parsedCode = c.sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));\n            }\n            return parsedCode;\n        });\n    }\n    formatInitParam(init) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let parsedInit;\n            if (typeof init === 'string') {\n                const c = yield this.parseMichelineExpression(init);\n                if (c === null) {\n                    throw new InvalidInitParameter('Invalid init parameter', init);\n                }\n                parsedInit = c;\n            }\n            else {\n                parsedInit = yield this.parseJSON(init);\n            }\n            return parsedInit;\n        });\n    }\n    findGlobalConstantsHashAndValue(schema) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const globalConstantTokens = schema.findToken('constant');\n            const globalConstantsHashAndValue = {};\n            if (globalConstantTokens.length !== 0) {\n                for (const token of globalConstantTokens) {\n                    const tokenArgs = token.tokenVal.args;\n                    if (tokenArgs) {\n                        const expression = tokenArgs[0];\n                        if (expression.string) {\n                            const hash = expression.string;\n                            const michelineValue = yield this.context.globalConstantsProvider.getGlobalConstantByHash(hash);\n                            Object.assign(globalConstantsHashAndValue, {\n                                [hash]: michelineValue,\n                            });\n                        }\n                    }\n                }\n            }\n            return globalConstantsHashAndValue;\n        });\n    }\n}\n\nclass RpcPacker {\n    constructor(context) {\n        this.context = context;\n    }\n    packData(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.context.rpc.packData(data);\n        });\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates that a global constant does not exist\n */\nclass GlobalConstantNotFound extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TaquitoError {\n    constructor(hash) {\n        super();\n        this.hash = hash;\n        this.name = 'GlobalConstantNotFound';\n        this.message = `Please load the value associated with the constant ${hash} using the loadGlobalConstant method of the DefaultGlobalConstantsProvider.`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates the global constant provider not being configured under TezosToolkit\n */\nclass UnconfiguredGlobalConstantsProviderError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TezosToolkitConfigError {\n    constructor() {\n        super();\n        this.name = 'UnconfiguredGlobalConstantsProviderError';\n        this.message =\n            'No global constants provider has been configured. Please configure one by calling setGlobalConstantsProvider({globalConstantsProvider}) on your TezosToolkit instance.';\n    }\n}\n\nclass NoopGlobalConstantsProvider {\n    getGlobalConstantByHash(_hash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UnconfiguredGlobalConstantsProviderError();\n        });\n    }\n}\n\n/**\n * @description Converts calls from TzReadProvider into calls to the wrapped RpcClient in a format it can understand.\n */\nclass RpcReadAdapter {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    /**\n     * @description Access the balance of a contract.\n     * @param address address from which we want to retrieve the balance\n     * @param block from which we want to retrieve the balance\n     * @returns the balance in mutez\n     */\n    getBalance(address, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getBalance(address, { block: String(block) });\n        });\n    }\n    /**\n     * @description Access the delegate of a contract, if any.\n     * @param address contract address from which we want to retrieve the delegate (baker)\n     * @param block from which we want to retrieve the delegate\n     * @returns the public key hash of the delegate or null if no delegate\n     */\n    getDelegate(address, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getDelegate(address, { block: String(block) });\n        });\n    }\n    /**\n     * @description Access the next protocol hash\n     * @param block from which we want to retrieve the next protocol hash\n     */\n    getNextProtocol(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const protocols = yield this.rpc.getProtocols({ block: String(block) });\n            return protocols.next_protocol;\n        });\n    }\n    /**\n     * @description Access protocol constants used in Taquito\n     * @param block from which we want to retrieve the constants\n     */\n    getProtocolConstants(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { time_between_blocks, minimal_block_delay, hard_gas_limit_per_operation, hard_gas_limit_per_block, hard_storage_limit_per_operation, cost_per_byte, tx_rollup_origination_size, smart_rollup_origination_size, } = yield this.rpc.getConstants({ block: String(block) });\n            return {\n                time_between_blocks,\n                minimal_block_delay,\n                hard_gas_limit_per_operation,\n                hard_gas_limit_per_block,\n                hard_storage_limit_per_operation,\n                cost_per_byte,\n                tx_rollup_origination_size,\n                smart_rollup_origination_size,\n            };\n        });\n    }\n    /**\n     * @description Access the script (code and storage) of a smart contract\n     * @param contract contract address from which we want to retrieve the script\n     * @param block from which we want to retrieve the storage value\n     * @returns Note: The code must be in the JSON format and not contain global constant\n     */\n    getScript(contract, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { script } = yield this.rpc.getContract(contract, { block: String(block) });\n            return script;\n        });\n    }\n    /**\n     * @description Access the storage value of a contract\n     * @param contract contract address from which we want to retrieve the storage\n     * @param block from which we want to retrieve the storage value\n     */\n    getStorage(contract, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getStorage(contract, { block: String(block) });\n        });\n    }\n    /**\n     * @description Access the block hash\n     */\n    getBlockHash(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { hash } = yield this.rpc.getBlockHeader({ block: String(block) });\n            return hash;\n        });\n    }\n    /**\n     * @description Access the block level\n     */\n    getBlockLevel(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { level } = yield this.rpc.getBlockHeader({ block: String(block) });\n            return level;\n        });\n    }\n    /**\n     * @description Access the counter of an address\n     * @param pkh from which we want to retrieve the counter\n     * @param block from which we want to retrieve the counter\n     */\n    getCounter(pkh, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { counter } = yield this.rpc.getContract(pkh, { block: String(block) });\n            return counter || '0';\n        });\n    }\n    /**\n     * @description Access the timestamp of a block\n     * @param block from which we want to retrieve the timestamp\n     * @returns date ISO format zero UTC offset (\"2022-01-19T22:37:07Z\")\n     */\n    getBlockTimestamp(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { timestamp } = yield this.rpc.getBlockHeader({ block: String(block) });\n            return timestamp;\n        });\n    }\n    /**\n     * @description Access the value associated with a key in a big map.\n     * @param bigMapQuery Big Map ID and Expression hash to query (A b58check encoded Blake2b hash of the expression)\n     * @param block from which we want to retrieve the big map value\n     */\n    getBigMapValue(bigMapQuery, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getBigMapExpr(bigMapQuery.id, bigMapQuery.expr, {\n                block: String(block),\n            });\n        });\n    }\n    /**\n     * @description Access the value associated with a sapling state ID.\n     * @param id Sapling state ID\n     * @param block from which we want to retrieve the sapling state\n     */\n    getSaplingDiffById(saplingStateQuery, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getSaplingDiffById(saplingStateQuery.id, { block: String(block) });\n        });\n    }\n    /**\n     * @description Access the sapling state of a smart contract.\n     * @param contractAddress The address of the smart contract\n     * @param block The block you want to retrieve the sapling state from\n     */\n    getSaplingDiffByContract(contractAddress, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getSaplingDiffByContract(contractAddress, { block: String(block) });\n        });\n    }\n    /**\n     * @description Return the list of entrypoints of the contract\n     * @param contract address of the contract we want to get the entrypoints of\n     */\n    getEntrypoints(contract) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getEntrypoints(contract);\n        });\n    }\n    /**\n     * @description Access the chain id\n     */\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getChainId();\n        });\n    }\n    /**\n     * @description Indicate if an account is revealed\n     * @param publicKeyHash of the account\n     * @param block from which we want to know if the account is revealed\n     */\n    isAccountRevealed(publicKeyHash, block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const manager = yield this.rpc.getManagerKey(publicKeyHash, { block: String(block) });\n            const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n            return haveManager;\n        });\n    }\n    /**\n     * @description Return all the information about a block\n     * @param block from which we want to retrieve the information\n     */\n    getBlock(block) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.rpc.getBlock({ block: String(block) });\n        });\n    }\n    /**\n     * @description Return a list of the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.\n     * @param block from which we want to retrieve the information\n     */\n    getLiveBlocks(block) {\n        return this.rpc.getLiveBlocks({ block: String(block) });\n    }\n}\n\n/**\n *  @category Error\n *  @description Error that indicates an unsupported event being passed or used\n */\nclass UnsupportedEventError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(type) {\n        super();\n        this.type = type;\n        this.name = 'UnsupportedEventError';\n        this.message = `Unsupported event type \"${type}\" expecting one of the \"data\", \"error\", or \"close\".`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates an invalid filter expression being passed or used\n */\nclass InvalidFilterExpressionError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.ParameterValidationError {\n    constructor(invalidExpression) {\n        super();\n        this.invalidExpression = invalidExpression;\n        this.name = 'InvalidFilterExpressionError';\n        this.message = `Invalid filter expression expecting the object to contain either and/or property`;\n    }\n}\n\nconst opHashFilter = (op, filter) => op.hash === filter.opHash;\nconst sourceFilter = (x, filter) => {\n    switch (x.kind) {\n        case 'endorsement':\n            return 'metadata' in x && x.metadata.delegate === filter.source;\n        case 'activate_account':\n            return 'metadata' in x && x.pkh === filter.source;\n        default:\n            return 'source' in x && x.source === filter.source;\n    }\n};\nconst kindFilter = (x, filter) => 'kind' in x && x.kind === filter.kind;\nconst destinationFilter = (x, filter) => {\n    switch (x.kind) {\n        case 'delegation':\n            return x.delegate === filter.destination;\n        case 'origination':\n            if ('metadata' in x &&\n                'operation_result' in x.metadata &&\n                'originated_contracts' in x.metadata.operation_result &&\n                Array.isArray(x.metadata.operation_result.originated_contracts)) {\n                return x.metadata.operation_result.originated_contracts.some((contract) => contract === filter.destination);\n            }\n            break;\n        case 'transaction':\n            return x.destination === filter.destination;\n        default:\n            return false;\n    }\n};\nconst eventFilter = (result, address, tag, excludeFailedOperations) => {\n    if (result.kind !== 'event') {\n        return false;\n    }\n    if (tag && result.tag !== tag) {\n        return false;\n    }\n    if (address && result.source !== address) {\n        return false;\n    }\n    if (excludeFailedOperations && result.result.status !== 'applied') {\n        return false;\n    }\n    return true;\n};\nconst evaluateOpFilter = (op, filter) => {\n    if ('opHash' in filter) {\n        return opHashFilter(op, filter);\n    }\n    else if ('source' in filter) {\n        return sourceFilter(op, filter);\n    }\n    else if ('kind' in filter) {\n        return kindFilter(op, filter);\n    }\n    else if ('destination' in filter) {\n        return destinationFilter(op, filter);\n    }\n    return false;\n};\nconst evaluateExpression = (op, exp) => {\n    if (Array.isArray(exp.and)) {\n        return exp.and.every((x) => evaluateFilter(op, x));\n    }\n    else if (Array.isArray(exp.or)) {\n        return exp.or.some((x) => evaluateFilter(op, x));\n    }\n    else {\n        throw new InvalidFilterExpressionError(exp);\n    }\n};\nconst evaluateFilter = (op, filter) => {\n    const filters = [];\n    if (!Array.isArray(filter)) {\n        filters.push(filter);\n    }\n    else {\n        filters.push(...filter);\n    }\n    return filters.every((filterOrExp) => {\n        if ('and' in filterOrExp || 'or' in filterOrExp) {\n            return evaluateExpression(op, filterOrExp);\n        }\n        else {\n            return evaluateOpFilter(op, filterOrExp);\n        }\n    });\n};\n\n/* eslint-disable no-dupe-class-members */\nclass ObservableSubscription {\n    constructor(obs, shouldRetry = false, operatorFunction = (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.retry)()) {\n        this.shouldRetry = shouldRetry;\n        this.operatorFunction = operatorFunction;\n        this.errorListeners = [];\n        this.messageListeners = [];\n        this.closeListeners = [];\n        this.completed$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n        obs\n            .pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.takeUntil)(this.completed$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.tap)((data) => {\n            this.call(this.messageListeners, data);\n        }, (error) => {\n            this.call(this.errorListeners, error);\n        }, () => {\n            this.call(this.closeListeners);\n        }), this.shouldRetry ? operatorFunction : (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.tap)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.catchError)(() => rxjs__WEBPACK_IMPORTED_MODULE_8__.NEVER))\n            .subscribe();\n    }\n    call(listeners, value) {\n        for (const l of listeners) {\n            try {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                l(value);\n            }\n            catch (ex) {\n                console.error(ex);\n            }\n        }\n    }\n    remove(listeners, value) {\n        const idx = listeners.indexOf(value);\n        if (idx !== -1) {\n            listeners.splice(idx, 1);\n        }\n    }\n    on(type, cb) {\n        switch (type) {\n            case 'data':\n                this.messageListeners.push(cb);\n                break;\n            case 'error':\n                this.errorListeners.push(cb);\n                break;\n            case 'close':\n                this.closeListeners.push(cb);\n                break;\n            default:\n                throw new UnsupportedEventError(type);\n        }\n    }\n    off(type, cb) {\n        switch (type) {\n            case 'data':\n                this.remove(this.messageListeners, cb);\n                break;\n            case 'error':\n                this.remove(this.errorListeners, cb);\n                break;\n            case 'close':\n                this.remove(this.closeListeners, cb);\n                break;\n            default:\n                throw new UnsupportedEventError(type);\n        }\n    }\n    close() {\n        this.completed$.next();\n    }\n}\n\nconst defaultConfigStreamer = {\n    shouldObservableSubscriptionRetry: false,\n    observableSubscriptionRetryFunction: (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.retry)(),\n};\nconst getLastBlock = (context) => {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(context.rpc.getBlock()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.first)());\n};\nconst applyFilter = (filter) => (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.concatMap)((block) => {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable((sub) => {\n        for (const ops of block.operations) {\n            for (const op of ops) {\n                for (const content of op.contents) {\n                    if (evaluateFilter(Object.assign({ hash: op.hash }, content), filter)) {\n                        sub.next(Object.assign({ hash: op.hash }, content));\n                    }\n                }\n            }\n        }\n        sub.complete();\n    });\n});\nconst applyEventFilter = (filter) => (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.concatMap)((block) => {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_8__.Observable((sub) => {\n        for (const ops of block.operations) {\n            for (const op of ops) {\n                for (const content of op.contents) {\n                    const tx = content;\n                    const internalOpResults = tx.metadata.internal_operation_results;\n                    if (internalOpResults) {\n                        for (const event of internalOpResults) {\n                            if (eventFilter(event, filter === null || filter === void 0 ? void 0 : filter.address, filter === null || filter === void 0 ? void 0 : filter.tag, filter === null || filter === void 0 ? void 0 : filter.excludeFailedOperations)) {\n                                sub.next(Object.assign({ opHash: op.hash, blockHash: block.hash, level: block.header.level }, event));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        sub.complete();\n    });\n});\nclass PollingSubscribeProvider {\n    constructor(context, config = {}) {\n        this.context = context;\n        this._config$ = new rxjs__WEBPACK_IMPORTED_MODULE_8__.BehaviorSubject(Object.assign(Object.assign({}, defaultConfigStreamer), config));\n        this.timer$ = this._config$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.pluck)('pollingIntervalMilliseconds'), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((pollingIntervalMilliseconds) => {\n            if (!pollingIntervalMilliseconds) {\n                return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.from)(this.getConfirmationPollingInterval()).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)((interval) => {\n                    return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.timer)(0, interval);\n                }));\n            }\n            else {\n                return (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.timer)(0, pollingIntervalMilliseconds);\n            }\n        }));\n        this.newBlock$ = this.timer$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.switchMap)(() => getLastBlock(this.context)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.distinctUntilKeyChanged)('hash'), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.publish)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.refCount)());\n    }\n    get config() {\n        return this._config$.getValue();\n    }\n    getConfirmationPollingInterval() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.config.pollingIntervalMilliseconds) {\n                const defaultIntervalTestnetsMainnet = 5000;\n                const defaultIntervalSandbox = 1000;\n                try {\n                    const constants = yield this.context.readProvider.getProtocolConstants('head');\n                    const blockTime = constants.minimal_block_delay\n                        ? constants.minimal_block_delay.multipliedBy(1000)\n                        : constants.time_between_blocks\n                            ? constants.time_between_blocks[0].multipliedBy(1000)\n                            : new bignumber_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](defaultIntervalTestnetsMainnet);\n                    const confirmationPollingInterval = blockTime.dividedBy(3);\n                    this.config.pollingIntervalMilliseconds =\n                        confirmationPollingInterval.toNumber() === 0\n                            ? defaultIntervalSandbox\n                            : confirmationPollingInterval.toNumber();\n                }\n                catch (exception) {\n                    return defaultIntervalTestnetsMainnet;\n                }\n            }\n            return this.config.pollingIntervalMilliseconds;\n        });\n    }\n    subscribeBlock(_filter) {\n        return new ObservableSubscription(this.newBlock$, this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n    }\n    subscribe(_filter) {\n        return new ObservableSubscription(this.newBlock$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.pluck)('hash')), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n    }\n    subscribeOperation(filter) {\n        return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter)), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n    }\n    subscribeEvent(eventFilter) {\n        return new ObservableSubscription(this.newBlock$.pipe(applyEventFilter(eventFilter)), this.config.shouldObservableSubscriptionRetry, this.config.observableSubscriptionRetryFunction);\n    }\n}\n\nclass TaquitoLocalForger {\n    constructor(context) {\n        this.context = context;\n    }\n    getNextProto() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.context.proto) {\n                const nextProto = yield this.context.readProvider.getNextProtocol('head');\n                this.context.proto = nextProto;\n            }\n            return this.context.proto;\n        });\n    }\n    forge({ branch, contents }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const forger = new _taquito_local_forging__WEBPACK_IMPORTED_MODULE_7__.LocalForger(yield this.getNextProto());\n            return forger.forge({ branch, contents });\n        });\n    }\n}\n\nconst defaultConfigConfirmation = {\n    defaultConfirmationCount: 1,\n    confirmationPollingTimeoutSecond: 180,\n};\n/**\n * @description Encapsulate common service used throughout different part of the library\n */\nclass Context {\n    constructor(_rpc, _signer = new NoopSigner(), _proto, _config = new rxjs__WEBPACK_IMPORTED_MODULE_8__.BehaviorSubject(Object.assign({}, defaultConfigConfirmation)), forger, injector, packer, wallet, parser, globalConstantsProvider, readProvider, stream) {\n        this._rpc = _rpc;\n        this._signer = _signer;\n        this._proto = _proto;\n        this._config = _config;\n        this.providerDecorator = [];\n        this.tz = new RpcTzProvider(this);\n        this.estimate = new RPCEstimateProvider(this);\n        this.contract = new RpcContractProvider(this, this.estimate);\n        this.prepare = new PrepareProvider(this);\n        this.batch = new RPCBatchProvider(this, this.estimate);\n        this.wallet = new Wallet(this);\n        /**\n         * @description Applies the decorators on a cloned instance of the context and returned this cloned instance.\n         * The decorators are functions that inject logic into the context.\n         * They are provided by the extensions set on the TezosToolkit by calling the registerProviderDecorator method.\n         */\n        this.withExtensions = () => {\n            let clonedContext = this.clone();\n            this.providerDecorator.forEach((decorator) => {\n                clonedContext = decorator(clonedContext);\n            });\n            return clonedContext;\n        };\n        if (typeof this._rpc === 'string') {\n            this._rpcClient = new _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.RpcClient(this._rpc);\n        }\n        else {\n            this._rpcClient = this._rpc;\n        }\n        this._forger = forger ? forger : new TaquitoLocalForger(this);\n        this._injector = injector ? injector : new RpcInjector(this);\n        this.operationFactory = new OperationFactory(this);\n        this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);\n        this._parser = parser ? parser : new MichelCodecParser(this);\n        this._packer = packer ? packer : new RpcPacker(this);\n        this._globalConstantsProvider = globalConstantsProvider\n            ? globalConstantsProvider\n            : new NoopGlobalConstantsProvider();\n        this._readProvider = readProvider ? readProvider : new RpcReadAdapter(this._rpcClient);\n        this._stream = stream ? stream : new PollingSubscribeProvider(this);\n    }\n    get config() {\n        return this._config.getValue();\n    }\n    set config(value) {\n        this._config.next(Object.assign({}, value));\n    }\n    setPartialConfig(value) {\n        this._config.next(Object.assign(Object.assign({}, this._config.getValue()), value));\n    }\n    get rpc() {\n        return this._rpcClient;\n    }\n    set rpc(value) {\n        this._rpcClient = value;\n    }\n    get injector() {\n        return this._injector;\n    }\n    set injector(value) {\n        this._injector = value;\n    }\n    get forger() {\n        return this._forger;\n    }\n    set forger(value) {\n        this._forger = value;\n    }\n    get signer() {\n        return this._signer;\n    }\n    set signer(value) {\n        this._signer = value;\n    }\n    get walletProvider() {\n        return this._walletProvider;\n    }\n    set walletProvider(value) {\n        this._walletProvider = value;\n    }\n    set proto(value) {\n        this._proto = value;\n    }\n    get proto() {\n        return this._proto;\n    }\n    get parser() {\n        return this._parser;\n    }\n    set parser(value) {\n        this._parser = value;\n    }\n    get packer() {\n        return this._packer;\n    }\n    set packer(value) {\n        this._packer = value;\n    }\n    get globalConstantsProvider() {\n        return this._globalConstantsProvider;\n    }\n    set globalConstantsProvider(value) {\n        this._globalConstantsProvider = value;\n    }\n    get readProvider() {\n        return this._readProvider;\n    }\n    set readProvider(value) {\n        this._readProvider = value;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set stream(value) {\n        this._stream = value;\n    }\n    isAnyProtocolActive(protocol = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._proto) {\n                return protocol.includes(this._proto);\n            }\n            else {\n                const next_protocol = yield this.readProvider.getNextProtocol('head');\n                return protocol.includes(next_protocol);\n            }\n        });\n    }\n    isAnySignerConfigured() {\n        return !(this.signer instanceof NoopSigner);\n    }\n    /**\n     * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\n     */\n    clone() {\n        return new Context(this.rpc, this.signer, this.proto, this._config, this.forger, this._injector, this.packer, this._walletProvider, this._parser, this._globalConstantsProvider, this._readProvider, this._stream);\n    }\n    /**\n     * @description Allows extensions set on the TezosToolkit to inject logic into the context\n     */\n    registerProviderDecorator(fx) {\n        this.providerDecorator.push(fx);\n    }\n}\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\n/**\n *  @category Error\n *  @description Error that indicates CompositeForger.forge() results doesn't match each other\n */\nclass ForgingMismatchError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TaquitoError {\n    constructor(results) {\n        super();\n        this.results = results;\n        this.name = 'ForgingMismatchError';\n        this.message = `Forging mismatch error`;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates no forger has been configured for CompositeForger\n */\nclass UnspecifiedForgerError extends _taquito_core__WEBPACK_IMPORTED_MODULE_2__.TezosToolkitConfigError {\n    constructor() {\n        super();\n        this.name = 'UnspecifiedForgerError';\n        this.message =\n            'No forger has been configured. Please configure new CompositeForger([rpcForger, localForger]) with your TezosToolkit instance.';\n    }\n}\n\nclass CompositeForger {\n    constructor(forgers) {\n        this.forgers = forgers;\n        if (forgers.length === 0) {\n            throw new UnspecifiedForgerError();\n        }\n    }\n    forge({ branch, contents }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const results = yield Promise.all(this.forgers.map((forger) => {\n                return forger.forge({ branch, contents });\n            }));\n            if (results.length === 0) {\n                throw new UnspecifiedForgerError();\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            let lastResult = results.pop(); // Assumed to be more than one since we\n            while (results.length) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const currentResult = results.pop();\n                if (currentResult !== lastResult) {\n                    throw new ForgingMismatchError([lastResult, currentResult]);\n                }\n                lastResult = currentResult;\n            }\n            return lastResult;\n        });\n    }\n}\n\nclass RpcForger {\n    constructor(context) {\n        this.context = context;\n    }\n    forge({ branch, contents }) {\n        return this.context.rpc.forgeOperations({ branch, contents });\n    }\n}\n\nclass NoopParser {\n    prepareCodeOrigination(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return params;\n        });\n    }\n}\n\nclass MichelCodecPacker {\n    packData(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { bytes } = (0,_taquito_michel_codec__WEBPACK_IMPORTED_MODULE_6__.packDataBytes)(data.data, data.type);\n            return { packed: bytes };\n        });\n    }\n}\n\nclass DefaultGlobalConstantsProvider {\n    constructor() {\n        this._globalConstantsLibrary = {};\n    }\n    /**\n     *\n     * @description Allows to load global constant hashes and their corresponding Michelson JSON values\n     */\n    loadGlobalConstant(globalConstant) {\n        for (const hash in globalConstant) {\n            Object.assign(this._globalConstantsLibrary, {\n                [hash]: globalConstant[hash],\n            });\n        }\n    }\n    /**\n     *\n     * @description Retrieve the Michelson value of a global constant based on its hash\n     *\n     * @param hash a string representing the global constant hash\n     * @returns Expr, the JSON Michelson value\n     */\n    getGlobalConstantByHash(hash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = this._globalConstantsLibrary[hash];\n            if (!value) {\n                throw new GlobalConstantNotFound(hash);\n            }\n            return value;\n        });\n    }\n}\n\n/**\n * @packageDocumentation\n * @module @taquito/taquito\n */\n/**\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\n *\n * @param _rpc The RPC server to use\n */\nclass TezosToolkit {\n    constructor(_rpc) {\n        this._rpc = _rpc;\n        this._options = {};\n        this.format = _taquito_utils__WEBPACK_IMPORTED_MODULE_4__.format;\n        if (typeof this._rpc === 'string') {\n            this._rpcClient = new _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.RpcClient(this._rpc);\n        }\n        else {\n            this._rpcClient = this._rpc;\n        }\n        this._context = new Context(_rpc);\n        this._wallet = new Wallet(this._context);\n        this.setProvider({ rpc: this._rpcClient });\n        this.batch = this._context.batch.batch.bind(this._context.batch);\n    }\n    /**\n     * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth\n     *\n     * @param options rpc url or rpcClient to use to interact with the Tezos network\n     *\n     * @example Tezos.setProvider({rpc: 'https://mainnet.ecadinfra.com/', signer: new InMemorySigner.fromSecretKey(“edsk...”)})\n     * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})\n     *\n     */\n    setProvider({ rpc, stream, signer, protocol, config, forger, wallet, packer, globalConstantsProvider, readProvider, parserProvider, injectorProvider, }) {\n        this.setRpcProvider(rpc);\n        this.setStreamProvider(stream);\n        this.setSignerProvider(signer);\n        this.setForgerProvider(forger);\n        this.setWalletProvider(wallet);\n        this.setPackerProvider(packer);\n        this.setGlobalConstantsProvider(globalConstantsProvider);\n        this.setReadProvider(readProvider);\n        this.setParserProvider(parserProvider);\n        this.setInjectorProvider(injectorProvider);\n        this._context.proto = protocol;\n        if (config) {\n            this._context.setPartialConfig(config);\n        }\n    }\n    /**\n     * @description Sets signer provider on the Tezos Taquito instance.\n     *\n     * @param options signer to use to interact with the Tezos network\n     *\n     * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))\n     *\n     */\n    setSignerProvider(signer) {\n        if (!this._options.signer && typeof signer === 'undefined') {\n            this._context.signer = new NoopSigner();\n            this._options.signer = signer;\n        }\n        else if (typeof signer !== 'undefined') {\n            this._context.signer = signer;\n            this._options.signer = signer;\n        }\n    }\n    /**\n     * @description Sets rpc provider on the Tezos Taquito instance\n     *\n     * @param options rpc url or rpcClient to use to interact with the Tezos network\n     *\n     * @example Tezos.setRpcProvider('https://mainnet.ecadinfra.com/')\n     *\n     */\n    setRpcProvider(rpc) {\n        if (typeof rpc === 'string') {\n            this._rpcClient = new _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.RpcClient(rpc);\n        }\n        else if (rpc === undefined) ;\n        else {\n            this._rpcClient = rpc;\n        }\n        this._options.rpc = this._rpcClient;\n        this._context.rpc = this._rpcClient;\n    }\n    /**\n     * @description Sets forger provider on the Tezos Taquito instance\n     * The `LocalForger` from `@taquito/local-forging` is set by default.\n     *\n     * @param options forger to use to interact with the Tezos network\n     *\n     * @example Tezos.setForgerProvider(this.getFactory(RpcForger)())\n     *\n     */\n    setForgerProvider(forger) {\n        if (typeof forger !== 'undefined') {\n            this._options.forger = forger;\n            this._context.forger = forger;\n        }\n        else if (this._options.forger === undefined) {\n            const f = this.getFactory(TaquitoLocalForger)();\n            this._options.forger = f;\n            this._context.forger = f;\n        }\n    }\n    /**\n     * @description Sets stream provider on the Tezos Taquito instance\n     *\n     * @param options stream to use to interact with the Tezos network\n     *\n     * @example Tezos.setStreamProvider(...)\n     *\n     */\n    setStreamProvider(stream) {\n        if (typeof stream === 'string') {\n            const s = new PollingSubscribeProvider(new Context(new _taquito_rpc__WEBPACK_IMPORTED_MODULE_0__.RpcClient(stream)));\n            this._options.stream = s;\n            this._context.stream = s;\n        }\n        else if (typeof stream !== 'undefined') {\n            this._options.stream = stream;\n            this._context.stream = stream;\n        }\n        else if (this._options.stream === undefined) {\n            const s = this.getFactory(PollingSubscribeProvider)();\n            this._options.stream = s;\n            this._context.stream = s;\n        }\n    }\n    /**\n     * @description Sets wallet provider on the Tezos Taquito instance\n     *\n     * @param options wallet to use to interact with the Tezos network\n     *\n     * @example Tezos.setWalletProvider(...)\n     *\n     */\n    setWalletProvider(wallet) {\n        if (!this._options.wallet && typeof wallet === 'undefined') {\n            const w = this.getFactory(LegacyWalletProvider)();\n            this._options.wallet = w;\n            this._context.walletProvider = w;\n        }\n        else if (typeof wallet !== 'undefined') {\n            this._options.wallet = wallet;\n            this._context.walletProvider = wallet;\n        }\n    }\n    /**\n     * @description Sets Packer provider on the Tezos Taquito instance\n     *\n     * @param options packer to use to interact with the Tezos network\n     *\n     * @example Tezos.setPackerProvider(new MichelCodecPacker())\n     *\n     */\n    setPackerProvider(packer) {\n        if (!this._options.packer && typeof packer === 'undefined') {\n            const p = this.getFactory(RpcPacker)();\n            this._context.packer = p;\n            this._options.packer = p;\n        }\n        else if (typeof packer !== 'undefined') {\n            this._context.packer = packer;\n            this._options.packer = packer;\n        }\n    }\n    /**\n     * @description Sets global constants provider on the Tezos Taquito instance\n     *\n     * @param options globalConstantsProvider to use to interact with the Tezos network\n     *\n     * @example\n     * ```\n     * const globalConst = new DefaultGlobalConstantsProvider();\n     * globalConst.loadGlobalConstant({\n     *  \"expruu5BTdW7ajqJ9XPTF3kgcV78pRiaBW3Gq31mgp3WSYjjUBYxre\": { prim: \"int\" },\n     *  // ...\n     * })\n     * Tezos.setGlobalConstantsProvider(globalConst);\n     * ```\n     *\n     */\n    setGlobalConstantsProvider(globalConstantsProvider) {\n        if (!this._options.globalConstantsProvider && typeof globalConstantsProvider === 'undefined') {\n            const g = new NoopGlobalConstantsProvider();\n            this._context.globalConstantsProvider = g;\n            this._options.globalConstantsProvider = g;\n        }\n        else if (typeof globalConstantsProvider !== 'undefined') {\n            this._context.globalConstantsProvider = globalConstantsProvider;\n            this._options.globalConstantsProvider = globalConstantsProvider;\n        }\n    }\n    /**\n     * @description Sets read provider on the Tezos Taquito instance\n     * By default reads are done from the RPC usign the RpcReadAdapter class, this can be overridden to read from an indexer that implements the TzReadProvider interface\n     *\n     * @param options TzReadProvider to use to interact with the Tezos network\n     *\n     */\n    setReadProvider(readProvider) {\n        const readP = readProvider ? readProvider : new RpcReadAdapter(this._context.rpc);\n        this._options.readProvider = readP;\n        this._context.readProvider = readP;\n    }\n    /**\n     * @description Sets parser provider on the Tezos Taquito instance\n     *\n     * @param options parserProvider to use to interact with the Tezos network\n     *\n     */\n    setParserProvider(parserProvider) {\n        if (!this._options.parserProvider && typeof parserProvider === 'undefined') {\n            const p = new MichelCodecParser(this._context);\n            this._context.parser = p;\n            this._options.parserProvider = p;\n        }\n        else if (typeof parserProvider !== 'undefined') {\n            this._context.parser = parserProvider;\n            this._options.parserProvider = parserProvider;\n        }\n    }\n    /**\n     * @description Sets injector provider on the Tezos Taquito instance\n     *\n     * @param options Injector to use to interact with the Tezos network by default RpcInjector\n     *\n     */\n    setInjectorProvider(injectorProvider) {\n        if (!this._options.injectorProvider && typeof injectorProvider === 'undefined') {\n            const i = new RpcInjector(this._context);\n            this._context.injector = i;\n            this._options.injectorProvider = i;\n        }\n        else if (typeof injectorProvider !== 'undefined') {\n            this._context.injector = injectorProvider;\n            this._options.injectorProvider = injectorProvider;\n        }\n    }\n    /**\n     * @description Provide access to tezos account management\n     */\n    get tz() {\n        return this._context.tz;\n    }\n    /**\n     * @description Provide access to smart contract utilities\n     */\n    get contract() {\n        return this._context.contract;\n    }\n    /**\n     * @description Provide access to tezos operation preparation utilities\n     */\n    get prepare() {\n        return this._context.prepare;\n    }\n    get wallet() {\n        return this._wallet;\n    }\n    get operation() {\n        return this._context.operationFactory;\n    }\n    /**\n     * @description Provide access to operation estimation utilities\n     */\n    get estimate() {\n        return this._context.estimate;\n    }\n    /**\n     * @description Provide access to streaming utilities backed by an streamer implementation\n     */\n    get stream() {\n        return this._context.stream;\n    }\n    /**\n     * @description Provide access to the currently used rpc client\n     */\n    get rpc() {\n        return this._context.rpc;\n    }\n    /**\n     * @description Provide access to the currently used signer\n     */\n    get signer() {\n        return this._context.signer;\n    }\n    /**\n     * @description Provide access to the currently used globalConstantsProvider\n     */\n    get globalConstants() {\n        return this._context.globalConstantsProvider;\n    }\n    /**\n     * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.\n     *\n     * @param module extension to add to the TezosToolkit instance\n     *\n     * @example Tezos.addExtension(new Tzip16Module());\n     */\n    addExtension(module) {\n        if (Array.isArray(module)) {\n            module.forEach((extension) => extension.configureContext(this._context));\n        }\n        else {\n            module.configureContext(this._context);\n        }\n    }\n    getFactory(ctor) {\n        return (...args) => {\n            return new ctor(this._context, ...args);\n        };\n    }\n    /**\n     * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from\n     */\n    getVersionInfo() {\n        return VERSION;\n    }\n}\n\n\n//# sourceMappingURL=taquito.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/taquito/dist/taquito.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js":
/*!***************************************************************!*\
  !*** ./node_modules/@taquito/utils/dist/taquito-utils.es6.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeprecationError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.DeprecationError),\n/* harmony export */   InvalidAddressError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidAddressError),\n/* harmony export */   InvalidBlockHashError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidBlockHashError),\n/* harmony export */   InvalidChainIdError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidChainIdError),\n/* harmony export */   InvalidContractAddressError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidContractAddressError),\n/* harmony export */   InvalidHexStringError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidHexStringError),\n/* harmony export */   InvalidKeyError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidKeyError),\n/* harmony export */   InvalidKeyHashError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidKeyHashError),\n/* harmony export */   InvalidMessageError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidMessageError),\n/* harmony export */   InvalidOperationHashError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidOperationHashError),\n/* harmony export */   InvalidOperationKindError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidOperationKindError),\n/* harmony export */   InvalidProtocolHashError: () => (/* binding */ InvalidProtocolHashError),\n/* harmony export */   InvalidPublicKeyError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidPublicKeyError),\n/* harmony export */   InvalidSignatureError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidSignatureError),\n/* harmony export */   Prefix: () => (/* binding */ Prefix),\n/* harmony export */   ProhibitedActionError: () => (/* reexport safe */ _taquito_core__WEBPACK_IMPORTED_MODULE_5__.ProhibitedActionError),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   ValidationResult: () => (/* binding */ ValidationResult),\n/* harmony export */   ValueConversionError: () => (/* binding */ ValueConversionError),\n/* harmony export */   b58cdecode: () => (/* binding */ b58cdecode),\n/* harmony export */   b58cencode: () => (/* binding */ b58cencode),\n/* harmony export */   b58decode: () => (/* binding */ b58decode),\n/* harmony export */   b58decodeL2Address: () => (/* binding */ b58decodeL2Address),\n/* harmony export */   buf2hex: () => (/* binding */ buf2hex),\n/* harmony export */   bytes2Char: () => (/* binding */ bytes2Char),\n/* harmony export */   char2Bytes: () => (/* binding */ char2Bytes),\n/* harmony export */   encodeExpr: () => (/* binding */ encodeExpr),\n/* harmony export */   encodeKey: () => (/* binding */ encodeKey),\n/* harmony export */   encodeKeyHash: () => (/* binding */ encodeKeyHash),\n/* harmony export */   encodeL2Address: () => (/* binding */ encodeL2Address),\n/* harmony export */   encodeOpHash: () => (/* binding */ encodeOpHash),\n/* harmony export */   encodePubKey: () => (/* binding */ encodePubKey),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   getPkhfromPk: () => (/* binding */ getPkhfromPk),\n/* harmony export */   hex2Bytes: () => (/* binding */ hex2Bytes),\n/* harmony export */   hex2buf: () => (/* binding */ hex2buf),\n/* harmony export */   invalidDetail: () => (/* binding */ invalidDetail),\n/* harmony export */   isValidPrefix: () => (/* binding */ isValidPrefix),\n/* harmony export */   mergebuf: () => (/* binding */ mergebuf),\n/* harmony export */   mic2arr: () => (/* binding */ mic2arr),\n/* harmony export */   num2PaddedHex: () => (/* binding */ num2PaddedHex),\n/* harmony export */   prefix: () => (/* binding */ prefix),\n/* harmony export */   prefixLength: () => (/* binding */ prefixLength),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   toHexBuf: () => (/* binding */ toHexBuf),\n/* harmony export */   validateAddress: () => (/* binding */ validateAddress),\n/* harmony export */   validateBlock: () => (/* binding */ validateBlock),\n/* harmony export */   validateChain: () => (/* binding */ validateChain),\n/* harmony export */   validateContractAddress: () => (/* binding */ validateContractAddress),\n/* harmony export */   validateKeyHash: () => (/* binding */ validateKeyHash),\n/* harmony export */   validateOperation: () => (/* binding */ validateOperation),\n/* harmony export */   validatePkAndExtractPrefix: () => (/* binding */ validatePkAndExtractPrefix),\n/* harmony export */   validateProtocol: () => (/* binding */ validateProtocol),\n/* harmony export */   validatePublicKey: () => (/* binding */ validatePublicKey),\n/* harmony export */   validateSignature: () => (/* binding */ validateSignature),\n/* harmony export */   validateSmartRollupAddress: () => (/* binding */ validateSmartRollupAddress),\n/* harmony export */   validateSpendingKey: () => (/* binding */ validateSpendingKey),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/ed25519 */ \"(ssr)/./node_modules/@stablelib/ed25519/lib/ed25519.js\");\n/* harmony import */ var _stablelib_blake2b__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stablelib/blake2b */ \"(ssr)/./node_modules/@stablelib/blake2b/lib/blake2b.js\");\n/* harmony import */ var blakejs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! blakejs */ \"(ssr)/./node_modules/blakejs/index.js\");\n/* harmony import */ var blakejs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(blakejs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bs58check__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58check */ \"(ssr)/./node_modules/bs58check/index.js\");\n/* harmony import */ var bs58check__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58check__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _taquito_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @taquito/core */ \"(ssr)/./node_modules/@taquito/core/dist/taquito-core.es6.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! typedarray-to-buffer */ \"(ssr)/./node_modules/typedarray-to-buffer/index.js\");\n/* harmony import */ var typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n\nvar Prefix;\n(function (Prefix) {\n    Prefix[\"TZ1\"] = \"tz1\";\n    Prefix[\"TZ2\"] = \"tz2\";\n    Prefix[\"TZ3\"] = \"tz3\";\n    Prefix[\"TZ4\"] = \"tz4\";\n    Prefix[\"KT\"] = \"KT\";\n    Prefix[\"KT1\"] = \"KT1\";\n    Prefix[\"EDSK2\"] = \"edsk2\";\n    Prefix[\"SPSK\"] = \"spsk\";\n    Prefix[\"P2SK\"] = \"p2sk\";\n    Prefix[\"EDPK\"] = \"edpk\";\n    Prefix[\"SPPK\"] = \"sppk\";\n    Prefix[\"P2PK\"] = \"p2pk\";\n    Prefix[\"BLPK\"] = \"BLpk\";\n    Prefix[\"EDESK\"] = \"edesk\";\n    Prefix[\"SPESK\"] = \"spesk\";\n    Prefix[\"P2ESK\"] = \"p2esk\";\n    Prefix[\"EDSK\"] = \"edsk\";\n    Prefix[\"EDSIG\"] = \"edsig\";\n    Prefix[\"SPSIG\"] = \"spsig\";\n    Prefix[\"P2SIG\"] = \"p2sig\";\n    Prefix[\"SIG\"] = \"sig\";\n    Prefix[\"NET\"] = \"Net\";\n    Prefix[\"NCE\"] = \"nce\";\n    Prefix[\"B\"] = \"B\";\n    Prefix[\"O\"] = \"o\";\n    Prefix[\"LO\"] = \"Lo\";\n    Prefix[\"LLO\"] = \"LLo\";\n    Prefix[\"P\"] = \"P\";\n    Prefix[\"CO\"] = \"Co\";\n    Prefix[\"ID\"] = \"id\";\n    Prefix[\"EXPR\"] = \"expr\";\n    Prefix[\"TZ\"] = \"TZ\";\n    Prefix[\"VH\"] = \"vh\";\n    Prefix[\"SASK\"] = \"sask\";\n    Prefix[\"ZET1\"] = \"zet1\";\n    //rollups\n    Prefix[\"TXR1\"] = \"txr1\";\n    Prefix[\"TXI\"] = \"txi\";\n    Prefix[\"TXM\"] = \"txm\";\n    Prefix[\"TXC\"] = \"txc\";\n    Prefix[\"TXMR\"] = \"txmr\";\n    Prefix[\"TXRL\"] = \"txM\";\n    Prefix[\"TXW\"] = \"txw\";\n    Prefix[\"SR1\"] = \"sr1\";\n    Prefix[\"SRC1\"] = \"src1\";\n})(Prefix || (Prefix = {}));\nconst prefix = {\n    [Prefix.TZ1]: new Uint8Array([6, 161, 159]),\n    [Prefix.TZ2]: new Uint8Array([6, 161, 161]),\n    [Prefix.TZ3]: new Uint8Array([6, 161, 164]),\n    [Prefix.TZ4]: new Uint8Array([6, 161, 166]),\n    [Prefix.KT]: new Uint8Array([2, 90, 121]),\n    [Prefix.KT1]: new Uint8Array([2, 90, 121]),\n    [Prefix.EDSK]: new Uint8Array([43, 246, 78, 7]),\n    [Prefix.EDSK2]: new Uint8Array([13, 15, 58, 7]),\n    [Prefix.SPSK]: new Uint8Array([17, 162, 224, 201]),\n    [Prefix.P2SK]: new Uint8Array([16, 81, 238, 189]),\n    [Prefix.EDPK]: new Uint8Array([13, 15, 37, 217]),\n    [Prefix.SPPK]: new Uint8Array([3, 254, 226, 86]),\n    [Prefix.P2PK]: new Uint8Array([3, 178, 139, 127]),\n    [Prefix.BLPK]: new Uint8Array([6, 149, 135, 204]),\n    [Prefix.EDESK]: new Uint8Array([7, 90, 60, 179, 41]),\n    [Prefix.SPESK]: new Uint8Array([0x09, 0xed, 0xf1, 0xae, 0x96]),\n    [Prefix.P2ESK]: new Uint8Array([0x09, 0x30, 0x39, 0x73, 0xab]),\n    [Prefix.EDSIG]: new Uint8Array([9, 245, 205, 134, 18]),\n    [Prefix.SPSIG]: new Uint8Array([13, 115, 101, 19, 63]),\n    [Prefix.P2SIG]: new Uint8Array([54, 240, 44, 52]),\n    [Prefix.SIG]: new Uint8Array([4, 130, 43]),\n    [Prefix.NET]: new Uint8Array([87, 82, 0]),\n    [Prefix.NCE]: new Uint8Array([69, 220, 169]),\n    [Prefix.B]: new Uint8Array([1, 52]),\n    [Prefix.O]: new Uint8Array([5, 116]),\n    [Prefix.LO]: new Uint8Array([133, 233]),\n    [Prefix.LLO]: new Uint8Array([29, 159, 109]),\n    [Prefix.P]: new Uint8Array([2, 170]),\n    [Prefix.CO]: new Uint8Array([79, 179]),\n    [Prefix.ID]: new Uint8Array([153, 103]),\n    [Prefix.EXPR]: new Uint8Array([13, 44, 64, 27]),\n    // Legacy prefix\n    [Prefix.TZ]: new Uint8Array([2, 90, 121]),\n    [Prefix.VH]: new Uint8Array([1, 106, 242]),\n    [Prefix.SASK]: new Uint8Array([11, 237, 20, 92]),\n    [Prefix.ZET1]: new Uint8Array([18, 71, 40, 223]),\n    [Prefix.TXR1]: new Uint8Array([1, 128, 120, 31]),\n    [Prefix.TXI]: new Uint8Array([79, 148, 196]),\n    [Prefix.TXM]: new Uint8Array([79, 149, 30]),\n    [Prefix.TXC]: new Uint8Array([79, 148, 17]),\n    [Prefix.TXMR]: new Uint8Array([18, 7, 206, 87]),\n    [Prefix.TXRL]: new Uint8Array([79, 146, 82]),\n    [Prefix.TXW]: new Uint8Array([79, 150, 72]),\n    [Prefix.SR1]: new Uint8Array([6, 124, 117]),\n    [Prefix.SRC1]: new Uint8Array([17, 165, 134, 138]),\n};\nconst prefixLength = {\n    [Prefix.TZ1]: 20,\n    [Prefix.TZ2]: 20,\n    [Prefix.TZ3]: 20,\n    [Prefix.TZ4]: 20,\n    [Prefix.KT]: 20,\n    [Prefix.KT1]: 20,\n    [Prefix.EDPK]: 32,\n    [Prefix.SPPK]: 33,\n    [Prefix.P2PK]: 33,\n    //working with value in comment for base58.ml line 445 but not consistent with the three above\n    [Prefix.BLPK]: 48,\n    [Prefix.EDSIG]: 64,\n    [Prefix.SPSIG]: 64,\n    [Prefix.P2SIG]: 64,\n    [Prefix.SIG]: 64,\n    [Prefix.NET]: 4,\n    [Prefix.B]: 32,\n    [Prefix.P]: 32,\n    [Prefix.O]: 32,\n    [Prefix.VH]: 32,\n    [Prefix.SASK]: 169,\n    [Prefix.ZET1]: 43,\n    [Prefix.TXR1]: 20,\n    [Prefix.TXI]: 32,\n    [Prefix.TXM]: 32,\n    [Prefix.TXC]: 32,\n    [Prefix.TXMR]: 32,\n    [Prefix.TXRL]: 32,\n    [Prefix.TXW]: 32,\n    [Prefix.SR1]: 20,\n    [Prefix.SRC1]: 32,\n};\n\n/**\n * @description Verify signature of a payload\n *\n * @param messageBytes The forged message including the magic byte (11 for block,\n *        12 for preendorsement, 13 for endorsement, 3 for generic, 5 for the PACK format of michelson)\n * @param publicKey The public key to verify the signature against\n * @param signature The signature to verify\n * @returns A boolean indicating if the signature matches\n * @throws {@link InvalidPublicKeyError} | {@link InvalidSignatureError} | {@link InvalidMessageError}\n * @example\n * ```\n * const message = '03d0c10e3ed11d7c6e3357f6ef335bab9e8f2bd54d0ce20c482e241191a6e4b8ce6c01be917311d9ac46959750e405d57e268e2ed9e174a80794fbd504e12a4a000141eb3781afed2f69679ff2bbe1c5375950b0e40d00ff000000005e05050505050507070100000024747a32526773486e74516b72794670707352466261313652546656503539684b72654a4d07070100000024747a315a6672455263414c42776d4171776f6e525859565142445439426a4e6a42484a750001';\n * const pk = 'sppk7c7hkPj47yjYFEHX85q46sFJGw6RBrqoVSHwAJAT4e14KJwzoey';\n * const sig = 'spsig1cdLkp1RLgUHAp13aRFkZ6MQDPp7xCnjAExGL3MBSdMDmT6JgQSX8cufyDgJRM3sinFtiCzLbsyP6d365EHoNevxhT47nx'\n *\n * const response = verifySignature(message, pk, sig);\n * ```\n *\n */\nfunction verifySignature(messageBytes, publicKey, signature, watermark) {\n    const pkPrefix = validatePkAndExtractPrefix(publicKey);\n    const sigPrefix = validateSigAndExtractPrefix(signature);\n    const decodedPublicKey = b58cdecode(publicKey, prefix[pkPrefix]);\n    const decodedSig = b58cdecode(signature, prefix[sigPrefix]);\n    let messageBuf = hex2buf(validateMessageNotEmpty(messageBytes));\n    if (typeof watermark !== 'undefined') {\n        messageBuf = mergebuf(watermark, messageBuf);\n    }\n    const bytesHash = (0,_stablelib_blake2b__WEBPACK_IMPORTED_MODULE_2__.hash)(messageBuf, 32);\n    if (pkPrefix === Prefix.EDPK) {\n        return verifyEdSignature(decodedSig, bytesHash, decodedPublicKey);\n    }\n    else if (pkPrefix === Prefix.SPPK) {\n        return verifySpSignature(decodedSig, bytesHash, decodedPublicKey);\n    }\n    else if (pkPrefix === Prefix.P2PK) {\n        return verifyP2Signature(decodedSig, bytesHash, decodedPublicKey);\n    }\n    else {\n        return false;\n    }\n}\nfunction validateMessageNotEmpty(message) {\n    if (message === '') {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidMessageError(message, `can't be empty`);\n    }\n    return message;\n}\nfunction validatePkAndExtractPrefix(publicKey) {\n    if (publicKey === '') {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidPublicKeyError(publicKey, `can't be empty`);\n    }\n    const pkPrefix = publicKey.substring(0, 4);\n    const publicKeyValidation = validatePublicKey(publicKey);\n    if (publicKeyValidation !== ValidationResult.VALID) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidPublicKeyError(publicKey, invalidDetail(publicKeyValidation));\n    }\n    return pkPrefix;\n}\nfunction validateSigAndExtractPrefix(signature) {\n    const signaturePrefix = signature.startsWith('sig')\n        ? signature.substring(0, 3)\n        : signature.substring(0, 5);\n    const validation = validateSignature(signature);\n    if (validation !== ValidationResult.VALID) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidSignatureError(signature, invalidDetail(validation));\n    }\n    return signaturePrefix;\n}\nfunction verifyEdSignature(decodedSig, bytesHash, decodedPublicKey) {\n    try {\n        return (0,_stablelib_ed25519__WEBPACK_IMPORTED_MODULE_1__.verify)(decodedPublicKey, bytesHash, decodedSig);\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction verifySpSignature(decodedSig, bytesHash, decodedPublicKey) {\n    const key = new (elliptic__WEBPACK_IMPORTED_MODULE_7___default().ec)('secp256k1').keyFromPublic(decodedPublicKey);\n    return verifySpOrP2Sig(decodedSig, bytesHash, key);\n}\nfunction verifyP2Signature(decodedSig, bytesHash, decodedPublicKey) {\n    const key = new (elliptic__WEBPACK_IMPORTED_MODULE_7___default().ec)('p256').keyFromPublic(decodedPublicKey);\n    return verifySpOrP2Sig(decodedSig, bytesHash, key);\n}\nfunction verifySpOrP2Sig(decodedSig, bytesHash, key) {\n    const hexSig = buf2hex(typedarray_to_buffer__WEBPACK_IMPORTED_MODULE_8___default()(decodedSig));\n    const match = hexSig.match(/([a-f\\d]{64})/gi);\n    if (match) {\n        try {\n            const [r, s] = match;\n            return key.verify(bytesHash, { r, s });\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\n\n/**\n *  @category Error\n *  @description Error that indicates invalid protocol hash being passed or used\n */\nclass InvalidProtocolHashError extends _taquito_core__WEBPACK_IMPORTED_MODULE_5__.ParameterValidationError {\n    constructor(protocolHash, errorDetails) {\n        super();\n        this.protocolHash = protocolHash;\n        this.errorDetails = errorDetails;\n        this.name = 'InvalidProtocolHashError';\n        this.name = 'InvalidProtocolHashError';\n        this.message = `The protocol hash '${protocolHash}' is invalid`;\n        errorDetails ? (this.message += `: ${errorDetails}`) : null;\n    }\n}\n/**\n *  @category Error\n *  @description Error that indicates unable to convert data type from one to another\n */\nclass ValueConversionError extends _taquito_core__WEBPACK_IMPORTED_MODULE_5__.UnsupportedActionError {\n    constructor(value, desiredType) {\n        super();\n        this.value = value;\n        this.desiredType = desiredType;\n        this.name = 'ValueConversionError';\n        this.message = `Unable to convert ${value} to a ${desiredType}`;\n    }\n}\n\nvar ValidationResult;\n(function (ValidationResult) {\n    ValidationResult[ValidationResult[\"NO_PREFIX_MATCHED\"] = 0] = \"NO_PREFIX_MATCHED\";\n    ValidationResult[ValidationResult[\"INVALID_CHECKSUM\"] = 1] = \"INVALID_CHECKSUM\";\n    ValidationResult[ValidationResult[\"INVALID_LENGTH\"] = 2] = \"INVALID_LENGTH\";\n    ValidationResult[ValidationResult[\"VALID\"] = 3] = \"VALID\";\n})(ValidationResult || (ValidationResult = {}));\nfunction isValidPrefix(value) {\n    if (typeof value !== 'string') {\n        return false;\n    }\n    return value in prefix;\n}\n/**\n * @description This function is called by the validation functions ([[validateAddress]], [[validateChain]], [[validateContractAddress]], [[validateKeyHash]], [[validateSignature]], [[validatePublicKey]]).\n * Verify if the value has the right prefix or return `NO_PREFIX_MATCHED`,\n * decode the value using base58 and return `INVALID_CHECKSUM` if it fails,\n * check if the length of the value matches the prefix type or return `INVALID_LENGTH`.\n * If all checks pass, return `VALID`.\n *\n * @param value Value to validate\n * @param prefixes prefix the value should have\n */\nfunction validatePrefixedValue(value, prefixes) {\n    const match = new RegExp(`^(${prefixes.join('|')})`).exec(value);\n    if (!match || match.length === 0) {\n        return ValidationResult.NO_PREFIX_MATCHED;\n    }\n    const prefixKey = match[0];\n    if (!isValidPrefix(prefixKey)) {\n        return ValidationResult.NO_PREFIX_MATCHED;\n    }\n    // Check whether annotation exist before starting validation\n    if (value.includes('%')) {\n        value = value.split('%')[0];\n    }\n    const kt1Regex = /^(KT1\\w{33})$/;\n    if (!kt1Regex.test(value) && prefixKey === 'KT1') {\n        return ValidationResult.INVALID_CHECKSUM;\n    }\n    // decodeUnsafe return undefined if decoding fail\n    let decoded = bs58check__WEBPACK_IMPORTED_MODULE_4___default().decodeUnsafe(value);\n    if (!decoded) {\n        return ValidationResult.INVALID_CHECKSUM;\n    }\n    decoded = decoded.slice(prefix[prefixKey].length);\n    if (decoded.length !== prefixLength[prefixKey]) {\n        return ValidationResult.INVALID_LENGTH;\n    }\n    return ValidationResult.VALID;\n}\nconst implicitPrefix = [Prefix.TZ1, Prefix.TZ2, Prefix.TZ3, Prefix.TZ4];\nconst contractPrefix = [Prefix.KT1, Prefix.TXR1];\nconst signaturePrefix = [Prefix.EDSIG, Prefix.P2SIG, Prefix.SPSIG, Prefix.SIG];\nconst pkPrefix = [Prefix.EDPK, Prefix.SPPK, Prefix.P2PK, Prefix.BLPK];\nconst operationPrefix = [Prefix.O];\nconst protocolPrefix = [Prefix.P];\nconst blockPrefix = [Prefix.B];\nconst smartRollupPrefix = [Prefix.SR1];\n/**\n * @description Used to check if an address or a contract address is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateAddress } from '@taquito/utils';\n * const pkh = 'tz1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\n * const validation = validateAddress(pkh)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateAddress(value) {\n    return validatePrefixedValue(value, [...implicitPrefix, ...contractPrefix, ...smartRollupPrefix]);\n}\n/**\n * @description Used to check if a chain id is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateChain } from '@taquito/utils';\n * const chainId = 'NetXdQprcVkpaWU'\n * const validation = validateChain(chainId)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateChain(value) {\n    return validatePrefixedValue(value, [Prefix.NET]);\n}\n/**\n * @description Used to check if a contract address is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateContractAddress } from '@taquito/utils';\n * const contractAddress = 'KT1JVErLYTgtY8uGGZ4mso2npTSxqVLDRVbC'\n * const validation = validateContractAddress(contractAddress)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateContractAddress(value) {\n    return validatePrefixedValue(value, contractPrefix);\n}\n/**\n * @description Used to check if a key hash is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateKeyHash } from '@taquito/utils';\n * const keyHashWithoutPrefix = '1L9r8mWmRPndRhuvMCWESLGSVeFzQ9NAWx'\n * const validation = validateKeyHash(keyHashWithoutPrefix)\n * console.log(validation)\n * // This example return 0 which correspond to NO_PREFIX_MATCHED\n * ```\n */\nfunction validateKeyHash(value) {\n    return validatePrefixedValue(value, implicitPrefix);\n}\n/**\n * @description Used to check if a signature is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateSignature } from '@taquito/utils';\n * const signature = 'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg'\n * const validation = validateSignature(signature)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateSignature(value) {\n    return validatePrefixedValue(value, signaturePrefix);\n}\n/**\n * @description Used to check if a public key is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validatePublicKey } from '@taquito/utils';\n * const publicKey = 'edpkvS5QFv7KRGfa3b87gg9DBpxSm3NpSwnjhUjNBQrRUUR66F7C9g'\n * const validation = validatePublicKey(publicKey)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validatePublicKey(value) {\n    return validatePrefixedValue(value, pkPrefix);\n}\n/**\n * @description Used to check if an operation hash is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateOperation } from '@taquito/utils';\n * const operationHash = 'oo6JPEAy8VuMRGaFuMmLNFFGdJgiaKfnmT1CpHJfKP3Ye5ZahiP'\n * const validation = validateOperation(operationHash)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateOperation(value) {\n    return validatePrefixedValue(value, operationPrefix);\n}\n/**\n * @description Used to check if a protocol hash is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateProtocol } from '@taquito/utils';\n * const protocolHash = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx'\n * const validation = validateProtocol(protocolHash)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateProtocol(value) {\n    return validatePrefixedValue(value, protocolPrefix);\n}\n/**\n * @description Used to check if a block hash is valid.\n *\n * @returns\n * 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n * @example\n * ```\n * import { validateBlock } from '@taquito/utils';\n * const blockHash = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx'\n * const validation = validateBlock(blockHash)\n * console.log(validation)\n * // This example return 3 which correspond to VALID\n * ```\n */\nfunction validateBlock(value) {\n    return validatePrefixedValue(value, blockPrefix);\n}\n/**\n * @description Used to check if a spending key is valid.\n * @returns 0 (NO_PREFIX_MATCHED), 1 (INVALID_CHECKSUM), 2 (INVALID_LENGTH) or 3 (VALID).\n *\n */\nfunction validateSpendingKey(value) {\n    return validatePrefixedValue(value, [Prefix.SASK]);\n}\nfunction invalidDetail(validation) {\n    switch (validation) {\n        case ValidationResult.NO_PREFIX_MATCHED:\n            return 'with unsupported prefix';\n        case ValidationResult.INVALID_CHECKSUM:\n            return 'failed checksum';\n        case ValidationResult.INVALID_LENGTH:\n            return 'with incorrect length';\n        default:\n            return '';\n    }\n}\nfunction validateSmartRollupAddress(value) {\n    return validatePrefixedValue(value, [...smartRollupPrefix]);\n}\n\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nconst VERSION = {\n    \"commitHash\": \"46a535eea78d77ebb5509ccd1d1cbd01075c7461\",\n    \"version\": \"17.5.2\"\n};\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\nfunction getDecimal(format) {\n    switch (format) {\n        case 'tz':\n            return TZ_DECIMALS;\n        case 'mtz':\n            return MTZ_DECIMALS;\n        case 'mutez':\n        default:\n            return 0;\n    }\n}\nfunction format(from = 'mutez', to = 'mutez', amount) {\n    const bigNum = new bignumber_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](amount);\n    if (bigNum.isNaN()) {\n        return amount;\n    }\n    return bigNum\n        .multipliedBy(Math.pow(10, getDecimal(from)))\n        .dividedBy(Math.pow(10, getDecimal(to)));\n}\n\n/**\n * @packageDocumentation\n * @module @taquito/utils\n */\n/*\n * Some code in this file is originally from sotez and eztz\n * Copyright (c) 2018 Andrew Kishino\n * Copyright (c) 2017 Stephen Andrews\n */\n/**\n *\n * @description Hash a string using the BLAKE2b algorithm, base58 encode the hash obtained and appends the prefix 'expr' to it\n *\n * @param value Value in hex\n */\nfunction encodeExpr(value) {\n    const blakeHash = blakejs__WEBPACK_IMPORTED_MODULE_3___default().blake2b(hex2buf(value), undefined, 32);\n    return b58cencode(blakeHash, prefix['expr']);\n}\n/**\n *\n * @description Return the operation hash of a signed operation\n * @param value Value in hex of a signed operation\n */\nfunction encodeOpHash(value) {\n    const blakeHash = blakejs__WEBPACK_IMPORTED_MODULE_3___default().blake2b(hex2buf(value), undefined, 32);\n    return b58cencode(blakeHash, prefix.o);\n}\n/**\n *\n * @description Base58 encode a string or a Uint8Array and append a prefix to it\n *\n * @param value Value to base58 encode\n * @param prefix prefix to append to the encoded string\n */\nfunction b58cencode(value, prefix) {\n    const payloadAr = typeof value === 'string' ? Uint8Array.from(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, 'hex')) : value;\n    const n = new Uint8Array(prefix.length + payloadAr.length);\n    n.set(prefix);\n    n.set(payloadAr, prefix.length);\n    return bs58check__WEBPACK_IMPORTED_MODULE_4___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(n.buffer));\n}\n/**\n *\n * @description Base58 decode a string and remove the prefix from it\n *\n * @param value Value to base58 decode\n * @param prefix prefix to remove from the decoded string\n */\nconst b58cdecode = (enc, prefixArg) => bs58check__WEBPACK_IMPORTED_MODULE_4___default().decode(enc).slice(prefixArg.length);\n/**\n *\n * @description Base58 decode a string with predefined prefix\n *\n * @param value Value to base58 decode\n */\nfunction b58decode(payload) {\n    const buf = bs58check__WEBPACK_IMPORTED_MODULE_4___default().decode(payload);\n    const prefixMap = {\n        [prefix.tz1.toString()]: '0000',\n        [prefix.tz2.toString()]: '0001',\n        [prefix.tz3.toString()]: '0002',\n    };\n    const rollupPrefMap = {\n        [prefix.txr1.toString()]: '02',\n    };\n    const pref = prefixMap[new Uint8Array(buf.slice(0, 3)).toString()];\n    const rollupPref = rollupPrefMap[new Uint8Array(buf.slice(0, 4)).toString()];\n    if (pref) {\n        // tz addresses\n        const hex = buf2hex(buf.slice(3));\n        return pref + hex;\n    }\n    else if (rollupPref) {\n        const hex = buf2hex(buf.slice(4));\n        return rollupPref + hex + '00';\n    }\n    else {\n        // other (kt addresses)\n        return '01' + buf2hex(buf.slice(3, 42)) + '00';\n    }\n}\n/**\n *\n * @description b58 decode a string without predefined prefix\n * @param value\n * @returns string of bytes\n */\nfunction b58decodeL2Address(payload) {\n    const buf = bs58check__WEBPACK_IMPORTED_MODULE_4___default().decode(payload);\n    // tz4 address currently\n    return buf2hex(buf.slice(3, 42));\n}\n/**\n *\n * @description Base58 encode an address using predefined prefix\n *\n * @param value Address to base58 encode (tz1, tz2, tz3 or KT1)\n */\nfunction encodePubKey(value) {\n    if (value.substring(0, 2) === '00') {\n        const pref = {\n            '0000': prefix.tz1,\n            '0001': prefix.tz2,\n            '0002': prefix.tz3,\n        };\n        return b58cencode(value.substring(4), pref[value.substring(0, 4)]);\n    }\n    else if (value.substring(0, 2) === '02') {\n        // 42 also works but the removes the 00 padding at the end\n        return b58cencode(value.substring(2, value.length - 2), prefix.txr1);\n    }\n    return b58cencode(value.substring(2, 42), prefix.KT);\n}\n/**\n *\n * @description Base58 encode an address without predefined prefix\n * @param value Address to base58 encode (tz4) hex dec\n * @returns return address\n */\nfunction encodeL2Address(value) {\n    return b58cencode(value, prefix.tz4);\n}\n/**\n *\n * @description Base58 encode a key according to its prefix\n *\n * @param value Key to base58 encode\n */\nfunction encodeKey(value) {\n    if (value[0] === '0') {\n        const pref = {\n            '00': new Uint8Array([13, 15, 37, 217]),\n            '01': new Uint8Array([3, 254, 226, 86]),\n            '02': new Uint8Array([3, 178, 139, 127]),\n        };\n        return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n    }\n}\n/**\n *\n * @description Base58 encode a key hash according to its prefix\n *\n * @param value Key hash to base58 encode\n */\nfunction encodeKeyHash(value) {\n    if (value[0] === '0') {\n        const pref = {\n            '00': new Uint8Array([6, 161, 159]),\n            '01': new Uint8Array([6, 161, 161]),\n            '02': new Uint8Array([6, 161, 164]),\n        };\n        return b58cencode(value.substring(2), pref[value.substring(0, 2)]);\n    }\n}\n/**\n *\n * @description Convert an hex string to a Uint8Array\n *\n * @param hex Hex string to convert\n * @throws {@link ValueConversionError}\n */\nconst hex2buf = (hex) => {\n    if (hex.length % 2 !== 0) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidHexStringError(hex, `: Expecting even number of characters`);\n    }\n    const hexDigits = stripHexPrefix(hex);\n    if (!hexDigits.match(/^([\\da-f]{2})*$/gi)) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidHexStringError(hex, `: Only characters 0-9, a-f and A-F are expected. Optionally, it can be prefixed with '0x'`);\n    }\n    const out = new Uint8Array(hexDigits.length / 2);\n    let j = 0;\n    for (let i = 0; i < hexDigits.length; i += 2) {\n        const v = parseInt(hexDigits.slice(i, i + 2), 16);\n        if (Number.isNaN(v)) {\n            throw new ValueConversionError(hex, 'Uint8Array');\n        }\n        out[j++] = v;\n    }\n    return out;\n};\n/**\n *\n * @description Merge 2 buffers together\n *\n * @param b1 First buffer\n * @param b2 Second buffer\n */\nconst mergebuf = (b1, b2) => {\n    const r = new Uint8Array(b1.length + b2.length);\n    r.set(b1);\n    r.set(b2, b1.length);\n    return r;\n};\n/**\n *\n * @description Flatten a michelson json representation to an array\n *\n * @param s michelson json\n */\nconst mic2arr = function me2(s) {\n    let ret = [];\n    if (Object.prototype.hasOwnProperty.call(s, 'prim')) {\n        if (s.prim === 'Pair') {\n            ret.push(me2(s.args[0]));\n            ret = ret.concat(me2(s.args[1]));\n        }\n        else if (s.prim === 'Elt') {\n            ret = {\n                key: me2(s.args[0]),\n                val: me2(s.args[1]),\n            };\n        }\n        else if (s.prim === 'True') {\n            ret = true;\n        }\n        else if (s.prim === 'False') {\n            ret = false;\n        }\n    }\n    else if (Array.isArray(s)) {\n        const sc = s.length;\n        for (let i = 0; i < sc; i++) {\n            const n = me2(s[i]);\n            if (typeof n.key !== 'undefined') {\n                if (Array.isArray(ret)) {\n                    ret = {\n                        keys: [],\n                        vals: [],\n                    };\n                }\n                ret.keys.push(n.key);\n                ret.vals.push(n.val);\n            }\n            else {\n                ret.push(n);\n            }\n        }\n    }\n    else if (Object.prototype.hasOwnProperty.call(s, 'string')) {\n        ret = s.string;\n    }\n    else if (Object.prototype.hasOwnProperty.call(s, 'int')) {\n        ret = parseInt(s.int, 10);\n    }\n    else {\n        ret = s;\n    }\n    return ret;\n};\n/**\n *\n * @description Convert a Uint8Array to an hex string\n *\n * @param buffer Uint8Array to convert\n */\nconst buf2hex = (buffer) => {\n    const hexParts = [];\n    buffer.forEach((byte) => {\n        const hex = byte.toString(16);\n        const paddedHex = `00${hex}`.slice(-2);\n        hexParts.push(paddedHex);\n    });\n    return hexParts.join('');\n};\n/**\n *\n *  @description Gets Tezos address (PKH) from Public Key\n *\n *  @param publicKey Public Key\n *  @returns A string of the Tezos address (PKH) that was derived from the given Public Key\n */\nconst getPkhfromPk = (publicKey) => {\n    let encodingPrefix;\n    let prefixLen;\n    const keyPrefix = validatePkAndExtractPrefix(publicKey);\n    const decoded = b58cdecode(publicKey, prefix[keyPrefix]);\n    switch (keyPrefix) {\n        case Prefix.EDPK:\n            encodingPrefix = prefix[Prefix.TZ1];\n            prefixLen = prefixLength[Prefix.TZ1];\n            break;\n        case Prefix.SPPK:\n            encodingPrefix = prefix[Prefix.TZ2];\n            prefixLen = prefixLength[Prefix.TZ2];\n            break;\n        case Prefix.P2PK:\n            encodingPrefix = prefix[Prefix.TZ3];\n            prefixLen = prefixLength[Prefix.TZ3];\n            break;\n        case Prefix.BLPK:\n            encodingPrefix = prefix[Prefix.TZ4];\n            prefixLen = prefixLength[Prefix.TZ4];\n    }\n    const hashed = (0,_stablelib_blake2b__WEBPACK_IMPORTED_MODULE_2__.hash)(decoded, prefixLen);\n    const result = b58cencode(hashed, encodingPrefix);\n    return result;\n};\n/**\n *\n * @description Convert a string to bytes\n *\n * @param str String to convert\n */\nfunction char2Bytes(str) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str, 'utf8').toString('hex');\n}\n/**\n *\n * @description Convert bytes to a string\n *\n * @param str Bytes to convert\n */\nfunction bytes2Char(hex) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hex2buf(hex)).toString('utf8');\n}\n/**\n *\n * @description Convert hex string/UintArray/Buffer to bytes\n *\n * @param hex String value to convert to bytes\n */\nfunction hex2Bytes(hex) {\n    const hexDigits = stripHexPrefix(hex);\n    if (!hexDigits.match(/^(0x)?([\\da-f]{2})*$/gi)) {\n        throw new _taquito_core__WEBPACK_IMPORTED_MODULE_5__.InvalidHexStringError(hex, `: Expecting even number of characters: 0-9, a-z, A-Z, optionally prefixed with 0x`);\n    }\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(hexDigits, 'hex');\n}\n/**\n *\n * @description Converts a number or Bignumber to hexadecimal  string\n *\n * @param val The value  that will be converted to a hexadecimal string value\n */\nfunction toHexBuf(val, bitLength = 8) {\n    return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(num2PaddedHex(val, bitLength), 'hex');\n}\n/**\n *\n * @description Converts a number or BigNumber to a padded hexadecimal string\n * @param val The value that will be converted into a padded hexadecimal string value\n * @param bitLength The length of bits\n *\n */\nfunction num2PaddedHex(val, bitLength = 8) {\n    if (new bignumber_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](val).isPositive()) {\n        const nibbleLength = Math.ceil(bitLength / 4);\n        const hex = val.toString(16);\n        // check whether nibble (4 bits) length is higher or lower than the current hex string length\n        let targetLength = hex.length >= nibbleLength ? hex.length : nibbleLength;\n        // make sure the hex string target length is even\n        targetLength = targetLength % 2 == 0 ? targetLength : targetLength + 1;\n        return padHexWithZero(hex, targetLength);\n    }\n    else {\n        const twosCompliment = new bignumber_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](2)\n            .pow(bitLength)\n            .minus(new bignumber_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](val).abs());\n        return twosCompliment.toString(16);\n    }\n}\nfunction padHexWithZero(hex, targetLength) {\n    const padString = '0';\n    if (hex.length >= targetLength) {\n        return hex;\n    }\n    else {\n        const padLength = targetLength - hex.length;\n        return padString.repeat(padLength) + hex;\n    }\n}\n/**\n *\n * @description Strips the first 2 characters of a hex string (0x)\n *\n * @param hex string to strip prefix from\n */\nfunction stripHexPrefix(hex) {\n    return hex.startsWith('0x') ? hex.slice(2) : hex;\n}\n\n\n//# sourceMappingURL=taquito-utils.es6.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@taquito/utils/dist/taquito-utils.es6.js\n");

/***/ })

};
;
"use strict";(()=>{var e={};e.id=569,e.ids=[569],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8191:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>f,patchFetch:()=>y,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>m,staticGenerationAsyncStorage:()=>g});var n={};t.r(n),t.d(n,{GET:()=>d,POST:()=>u});var s=t(9303),a=t(8716),o=t(670),i=t(4191),l=t(3077);async function u(e,r){let{userAddress:t,userName:n,emailId:s,fullName:a}=await e.json();if(console.log("Received POST request with data:",{userAddress:t,userName:n,emailId:s,fullName:a}),!t||!n||!s||!a)return console.error("Address, username, email, and full name are required"),new Response(JSON.stringify({error:"Address, username, email, and full name are required"}),{status:400});await (0,i.Z)(),console.log("Connected to database");try{let e=await l.Z.findOne({address:t});return console.log("User found:",e),e?(console.log("Updating existing user"),e.userName=n,e.emailId=s,e.fullName=a):(console.log("Creating new user"),e=new l.Z({address:t,userName:n,emailId:s,fullName:a})),await e.save(),console.log("User saved:",e),new Response(JSON.stringify(e),{status:200})}catch(e){return console.error("Error saving user:",e),new Response(JSON.stringify({error:e.message}),{status:500})}}async function d(e,r){return new Response(JSON.stringify({message:"This API route only supports POST requests"}),{status:405})}let c=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/register/route",pathname:"/api/register",filename:"route",bundlePath:"app/api/register/route"},resolvedPagePath:"D:\\Blive Update\\Frontend\\myapp\\app\\api\\register\\route.js",nextConfigOutput:"",userland:n}),{requestAsyncStorage:p,staticGenerationAsyncStorage:g,serverHooks:m}=c,f="/api/register/route";function y(){return(0,o.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:g})}},4191:(e,r,t)=>{t.d(r,{Z:()=>l});var n=t(1185),s=t.n(n);let a=process.env.MONGODB_URI;if(!a)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let o=null,i=null,l=async function(){if(i)return console.log("Using cached database connection"),{client:o,db:i};console.log("Connecting to new database");try{let e=await s().connect(a,{useNewUrlParser:!0,useUnifiedTopology:!0});return o=e,i=e.connection.db,console.log("Database connection successful"),{client:e,db:i}}catch(e){throw console.error("Error connecting to the database:",e),e}}},3077:(e,r,t)=>{t.d(r,{Z:()=>o});var n=t(1185),s=t.n(n);let a=new(s()).Schema({address:{type:String,required:!0,unique:!0},userName:{type:String},emailId:{type:String,required:!0},fullName:{type:String,required:!0},streams:[{streamId:String,streamKey:String,playbackUrl:String,playbackId:String,createdAt:Date,status:String,streamTitle:String}]}),o=s().models.User||s().model("User",a)},9303:(e,r,t)=>{e.exports=t(517)}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),n=r.X(0,[948],()=>t(8191));module.exports=n})();